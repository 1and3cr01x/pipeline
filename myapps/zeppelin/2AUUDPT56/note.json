{
  "paragraphs": [
    {
      "title": "Load Reference Data for Enrichment",
      "text": "val itemsDF \u003d sqlContext.read.format(\"json\")\n  .load(\"file:/root/pipeline/html/advancedspark.com/json/software.json\")\n\nz.show(itemsDF.select($\"id\", $\"title\", $\"img\", $\"tags\").limit(5))",
      "dateUpdated": "Mar 2, 2016 12:06:21 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 180.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "editorMode": "ace/mode/scala",
        "title": true,
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1448389076669_946770032",
      "id": "20151124-181756_1657385240",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "id\ttitle\timg\ttags\n1\tApache Cassandra\timg/software/cassandra.png\tWrappedArray(Database, NoSQL, Java, Eventually Consistent, Transactional)\n2\tTachyon\timg/software/tachyon.png\tWrappedArray(Distributed Cache, Object Store, S3, Swift, HDFS)\n3\tApache Ambari\timg/software/ambari.png\tWrappedArray(Cluster Provision, Hadoop, Cluster Monitoring, REST API, Metrics, Alerts)\n4\tDocker\timg/software/docker.png\tWrappedArray(Container, Linux, DevOps, Deployment)\n5\tMicrosft Azure\timg/software/azure.png\tWrappedArray(Cloud Provider, Microsoft)\n"
      },
      "dateCreated": "Nov 24, 2015 6:17:56 PM",
      "dateStarted": "Mar 2, 2016 12:06:21 AM",
      "dateFinished": "Mar 2, 2016 12:06:44 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Get Live Ratings from Cassandra",
      "text": "val cassandraConfig \u003d Map(\"keyspace\" -\u003e \"advancedspark\", \"table\" -\u003e \"item_ratings\")\n\nval itemRatingsDF \u003d sqlContext.read.format(\"org.apache.spark.sql.cassandra\").options(cassandraConfig)\n  .load().toDF(\"userId\", \"itemId\", \"rating\", \"timestamp\")",
      "dateUpdated": "Mar 2, 2016 12:06:21 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "title": true,
        "tableHide": false,
        "editorMode": "ace/mode/scala",
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1435900511434_-2036302443",
      "id": "20150703-051511_2118186706",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "cassandraConfig: scala.collection.immutable.Map[String,String] \u003d Map(keyspace -\u003e advancedspark, table -\u003e item_ratings)\nitemRatingsDF: org.apache.spark.sql.DataFrame \u003d [userId: int, itemId: int, rating: int, timestamp: bigint]\n"
      },
      "dateCreated": "Jul 3, 2015 5:15:11 AM",
      "dateStarted": "Mar 2, 2016 12:06:25 AM",
      "dateFinished": "Mar 2, 2016 12:06:45 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Total ratings and Distinct Users",
      "text": "import org.apache.spark.sql.functions._\n\nval totalRatings \u003d itemRatingsDF.count()\nval distinctUsers \u003d itemRatingsDF.select(countDistinct($\"userId\")).collect()(0)(0)",
      "dateUpdated": "Mar 2, 2016 12:06:21 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "title": true,
        "tableHide": false,
        "editorMode": "ace/mode/scala",
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1435903786952_671772613",
      "id": "20150703-060946_1260514447",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.sql.functions._\ntotalRatings: Long \u003d 272\ndistinctUsers: Any \u003d 31\n"
      },
      "dateCreated": "Jul 3, 2015 6:09:46 AM",
      "dateStarted": "Mar 2, 2016 12:06:44 AM",
      "dateFinished": "Mar 2, 2016 12:06:49 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "distribution of ratings ",
      "text": "val joinedDF \u003d itemRatingsDF.join(itemsDF, $\"itemId\" \u003d\u003d\u003d $\"id\")\n  .select($\"itemId\", $\"title\", $\"img\")\n  .groupBy($\"itemId\", $\"title\", $\"img\")\n  .agg(count($\"itemId\").as(\"count\"))\n  .orderBy($\"count\".desc)\n  .limit(5)\n  \n//z.show(joinedDF.select($\"title\", $\"count\").limit(50))\njoinedDF.explain(true)",
      "dateUpdated": "Mar 2, 2016 12:09:21 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "multiBarChart",
          "height": 294.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "title",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "count",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "title",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "count",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "editorMode": "ace/mode/scala",
        "title": true,
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451072111148_1271278951",
      "id": "20151225-193511_1695756196",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "joinedDF: org.apache.spark.sql.DataFrame \u003d [itemId: int, title: string, img: string, count: bigint]\n\u003d\u003d Parsed Logical Plan \u003d\u003d\nLimit 5\n+- Sort [count#42L DESC], true\n   +- Aggregate [itemId#11,title#5,img#3], [itemId#11,title#5,img#3,(count(itemId#11),mode\u003dComplete,isDistinct\u003dfalse) AS count#42L]\n      +- Project [itemId#11,title#5,img#3]\n         +- Join Inner, Some((cast(itemId#11 as bigint) \u003d id#2L))\n            :- Project [userid#6 AS userId#10,itemid#7 AS itemId#11,rating#8 AS rating#12,timestamp#9L AS timestamp#13L]\n            :  +- Relation[userid#6,itemid#7,rating#8,timestamp#9L] org.apache.spark.sql.cassandra.CassandraSourceRelation@7e1ff848\n            +- Relation[category#0,description#1,id#2L,img#3,tags#4,title#5] JSONRelation\n\n\u003d\u003d Analyzed Logical Plan \u003d\u003d\nitemId: int, title: string, img: string, count: bigint\nLimit 5\n+- Sort [count#42L DESC], true\n   +- Aggregate [itemId#11,title#5,img#3], [itemId#11,title#5,img#3,(count(itemId#11),mode\u003dComplete,isDistinct\u003dfalse) AS count#42L]\n      +- Project [itemId#11,title#5,img#3]\n         +- Join Inner, Some((cast(itemId#11 as bigint) \u003d id#2L))\n            :- Project [userid#6 AS userId#10,itemid#7 AS itemId#11,rating#8 AS rating#12,timestamp#9L AS timestamp#13L]\n            :  +- Relation[userid#6,itemid#7,rating#8,timestamp#9L] org.apache.spark.sql.cassandra.CassandraSourceRelation@7e1ff848\n            +- Relation[category#0,description#1,id#2L,img#3,tags#4,title#5] JSONRelation\n\n\u003d\u003d Optimized Logical Plan \u003d\u003d\nLimit 5\n+- Sort [count#42L DESC], true\n   +- Aggregate [itemId#11,title#5,img#3], [itemId#11,title#5,img#3,(count(itemId#11),mode\u003dComplete,isDistinct\u003dfalse) AS count#42L]\n      +- Project [itemId#11,title#5,img#3]\n         +- Join Inner, Some((cast(itemId#11 as bigint) \u003d id#2L))\n            :- Project [itemid#7 AS itemId#11]\n            :  +- Relation[userid#6,itemid#7,rating#8,timestamp#9L] org.apache.spark.sql.cassandra.CassandraSourceRelation@7e1ff848\n            +- Project [title#5,img#3,id#2L]\n               +- Relation[category#0,description#1,id#2L,img#3,tags#4,title#5] JSONRelation\n\n\u003d\u003d Physical Plan \u003d\u003d\nTakeOrderedAndProject(limit\u003d5, orderBy\u003d[count#42L DESC], output\u003d[itemId#11,title#5,img#3,count#42L])\n+- ConvertToSafe\n   +- TungstenAggregate(key\u003d[itemId#11,title#5,img#3], functions\u003d[(count(itemId#11),mode\u003dFinal,isDistinct\u003dfalse)], output\u003d[itemId#11,title#5,img#3,count#42L])\n      +- TungstenExchange hashpartitioning(itemId#11,title#5,img#3,200), None\n         +- TungstenAggregate(key\u003d[itemId#11,title#5,img#3], functions\u003d[(count(itemId#11),mode\u003dPartial,isDistinct\u003dfalse)], output\u003d[itemId#11,title#5,img#3,count#46L])\n            +- Project [itemId#11,title#5,img#3]\n               +- BroadcastHashJoin [cast(itemId#11 as bigint)], [id#2L], BuildRight\n                  :- Project [itemid#7 AS itemId#11]\n                  :  +- Scan org.apache.spark.sql.cassandra.CassandraSourceRelation@7e1ff848[itemid#7] \n                  +- Scan JSONRelation[title#5,img#3,id#2L] InputPaths: file:/root/pipeline/html/advancedspark.com/json/software.json\n"
      },
      "dateCreated": "Dec 25, 2015 7:35:11 PM",
      "dateStarted": "Mar 2, 2016 12:09:06 AM",
      "dateFinished": "Mar 2, 2016 12:09:07 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Register Temp Tables to run SQL (won\u0027t need to do this in Spark 1.6+)",
      "text": "itemsDF.registerTempTable(\"items_temp\")\nitemRatingsDF.registerTempTable(\"item_ratings_temp\")",
      "dateUpdated": "Mar 2, 2016 12:06:21 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "title": true,
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451071841185_1778592016",
      "id": "20151225-193041_517360775",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Dec 25, 2015 7:30:41 PM",
      "dateStarted": "Mar 2, 2016 12:06:50 AM",
      "dateFinished": "Mar 2, 2016 12:06:51 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Use SQL to Show Most desirable Items by Rating Count",
      "text": "%sql SELECT itemId, title, count(itemId) as count FROM item_ratings_temp \n  JOIN items_temp ON (item_ratings_temp.itemId \u003d items_temp.id) \n  GROUP BY itemId, title \n  ORDER BY count \n  DESC LIMIT 5",
      "dateUpdated": "Mar 2, 2016 12:11:11 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "pieChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "count",
              "index": 2.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "itemId",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "title": true,
        "tableHide": false,
        "editorHide": false,
        "editorMode": "ace/mode/sql",
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1435904577933_-1977276639",
      "id": "20150703-062257_361919402",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "itemId\ttitle\tcount\n7\tApache Spark\t20\n10\tApache HDFS\t15\n42\tScala\t13\n11\tApache YARN\t12\n63\tSpark SQL\t9\n"
      },
      "dateCreated": "Jul 3, 2015 6:22:57 AM",
      "dateStarted": "Mar 2, 2016 12:06:51 AM",
      "dateFinished": "Mar 2, 2016 12:06:53 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Save Top 5 Most Rated Items to ElasticSearch",
      "text": "//import org.elasticsearch.spark.sql._\n//import org.apache.spark.sql.SaveMode\n\n//val esConfig \u003d Map(\"pushdown\" -\u003e \"true\", \"es.nodes\" -\u003e \"127.0.0.1\", \"es.port\" -\u003e \"9200\")\n\n//joinedDF.limit(5).write.format(\"org.elasticsearch.spark.sql\")\n//  .mode(SaveMode.Overwrite)\n//  .options(esConfig)\n//  .save(\"advancedspark/top-items-by-exact-rating-count\")\n\n//z.show(joinedDF)\n",
      "dateUpdated": "Mar 2, 2016 12:06:21 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 196.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "itemId",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "itemId",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "editorMode": "ace/mode/scala",
        "title": true,
        "enabled": true,
        "editorHide": false,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1447754108027_-274054386",
      "id": "20151117-095508_447614045",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Nov 17, 2015 9:55:08 AM",
      "dateStarted": "Mar 2, 2016 12:06:52 AM",
      "dateFinished": "Mar 2, 2016 12:06:53 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "dateUpdated": "Mar 2, 2016 12:06:21 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451253178953_1437391893",
      "id": "20151227-215258_643401988",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT"
      },
      "dateCreated": "Dec 27, 2015 9:52:58 PM",
      "dateStarted": "Mar 2, 2016 12:06:53 AM",
      "dateFinished": "Mar 2, 2016 12:06:53 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Live Recs/01: TopK and Summary Statistics (SQL, DataFrames)",
  "id": "2AUUDPT56",
  "angularObjects": {
    "2ARR8UZDJ": [],
    "2AS9P7JSA": [],
    "2AR33ZMZJ": []
  },
  "config": {
    "looknfeel": "default"
  },
  "info": {}
}