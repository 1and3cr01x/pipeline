{
  "paragraphs": [
    {
      "text": "%md ![Similarity Pathway](http://advancedspark.com/img/similarity-pathway.png)",
      "dateUpdated": "Apr 19, 2016 12:52:06 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1452908616265_-1963403551",
      "id": "20160116-014336_821072801",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003e\u003cimg src\u003d\"http://advancedspark.com/img/similarity-pathway.png\" alt\u003d\"Similarity Pathway\" /\u003e\u003c/p\u003e\n"
      },
      "dateCreated": "Jan 16, 2016 1:43:36 AM",
      "dateStarted": "Apr 19, 2016 12:52:06 AM",
      "dateFinished": "Apr 19, 2016 12:52:06 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Load dataset",
      "text": "val itemsDF \u003d sqlContext.read.format(\"com.databricks.spark.csv\")\n  .option(\"header\", \"true\")\n  .option(\"inferSchema\", \"true\")\n  .load(\"file:/root/pipeline/datasets/movielens/ml-latest/movies-sm.csv\").toDF(\"id\", \"title\", \"tags\")\n  \nz.show(itemsDF)",
      "dateUpdated": "Apr 19, 2016 12:52:06 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "tableHide": false,
        "title": true,
        "graph": {
          "mode": "table",
          "height": 364.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451323111480_-372297908",
      "id": "20151228-171831_1063248354",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "id\ttitle\ttags\n1\tToy Story (1995)\tAdventure|Animation|Children|Comedy|Fantasy\n2\tJumanji (1995)\tAdventure|Children|Fantasy\n3\tGrumpier Old Men (1995)\tComedy|Romance\n4\tWaiting to Exhale (1995)\tComedy|Drama|Romance\n5\tFather of the Bride Part II (1995)\tComedy\n6\tHeat (1995)\tAction|Crime|Thriller\n7\tSabrina (1995)\tComedy|Romance\n8\tTom and Huck (1995)\tAdventure|Children\n9\tSudden Death (1995)\tAction\n10\tGoldenEye (1995)\tAction|Adventure|Thriller\n"
      },
      "dateCreated": "Dec 28, 2015 5:18:31 PM",
      "dateStarted": "Apr 19, 2016 12:52:06 AM",
      "dateFinished": "Apr 19, 2016 12:52:06 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Convert CSV-based DataFrame into TaggedItems",
      "text": "import org.apache.spark.sql.Row\nimport com.advancedspark.ml.TaggedItem\n\nval itemsRDD \u003d itemsDF.select($\"id\", $\"title\", $\"tags\").map(row \u003d\u003e {\n  val id \u003d row.getInt(0)\n  val title \u003d row.getString(1)\n  val tags \u003d row.getString(2).trim.split(\"\\\\|\")\n  TaggedItem(id, title, tags)\n})",
      "dateUpdated": "Apr 19, 2016 12:52:06 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "title": true,
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451400566555_-1305258659",
      "id": "20151229-144926_1579858999",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.sql.Row\nimport com.advancedspark.ml.TaggedItem\nitemsRDD: org.apache.spark.rdd.RDD[com.advancedspark.ml.TaggedItem] \u003d MapPartitionsRDD[203] at map at \u003cconsole\u003e:43\n"
      },
      "dateCreated": "Dec 29, 2015 2:49:26 PM",
      "dateStarted": "Apr 19, 2016 12:52:06 AM",
      "dateFinished": "Apr 19, 2016 12:52:07 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Distribution of tags within dataset",
      "text": "val tagsCountRDD \u003d itemsRDD.flatMap(item \u003d\u003e item.tags).map(tag \u003d\u003e (tag,1)).reduceByKey(_ + _)\n\nz.show(tagsCountRDD.toDF())",
      "dateUpdated": "Apr 19, 2016 12:52:06 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "tableHide": false,
        "title": true,
        "graph": {
          "mode": "pieChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "_1",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "_2",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "_1",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "_2",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451277734947_-102286185",
      "id": "20151228-044214_1740589078",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "_1\t_2\nFantasy\t2\nCrime\t1\nAnimation\t1\nThriller\t2\nAdventure\t4\nAction\t3\nChildren\t3\nComedy\t5\nRomance\t3\nDrama\t1\n"
      },
      "dateCreated": "Dec 28, 2015 4:42:14 AM",
      "dateStarted": "Apr 19, 2016 12:52:06 AM",
      "dateFinished": "Apr 19, 2016 12:52:07 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Cartesian product of all items",
      "text": "val allItemPairsRDD \u003d itemsRDD.cartesian(itemsRDD).cache()",
      "dateUpdated": "Apr 19, 2016 12:52:06 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1452393855712_1952437088",
      "id": "20160110-024415_365689229",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "allItemPairsRDD: org.apache.spark.rdd.RDD[(com.advancedspark.ml.TaggedItem, com.advancedspark.ml.TaggedItem)] \u003d CartesianRDD[209] at cartesian at \u003cconsole\u003e:44\n"
      },
      "dateCreated": "Jan 10, 2016 2:44:15 AM",
      "dateStarted": "Apr 19, 2016 12:52:07 AM",
      "dateFinished": "Apr 19, 2016 12:52:07 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Calculate Exact Jaccard Similarity between all Distinct item pairs",
      "text": "import com.advancedspark.ml.Similarity\n\nval minExactJaccardSimilarityThreshold \u003d 0.01\n\n// Calculate Jaccard Similarity between all distinct item pairs\n// Only keep pairs with a Jaccard Similarity above a specific threshold\nval similarItemsAboveThresholdRDD \u003d allItemPairsRDD.flatMap(itemPair \u003d\u003e {\n  val jaccardSim \u003d Similarity.jaccardSimilarity(itemPair._1.tags, itemPair._2.tags)\n\n  if (jaccardSim \u003e\u003d minExactJaccardSimilarityThreshold)\n    Some(itemPair._1.id.toLong, itemPair._2.id.toLong, jaccardSim.toDouble)\n  else\n    None\n})\n\nval similarItemPairCount \u003d similarItemsAboveThresholdRDD.count()\n\nsimilarItemsAboveThresholdRDD.collect().mkString(\",\")",
      "dateUpdated": "Apr 19, 2016 12:52:06 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "tableHide": false,
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451317394187_1089784615",
      "id": "20151228-154314_719152611",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import com.advancedspark.ml.Similarity\nminExactJaccardSimilarityThreshold: Double \u003d 0.01\nsimilarItemsAboveThresholdRDD: org.apache.spark.rdd.RDD[(Long, Long, Double)] \u003d MapPartitionsRDD[210] at flatMap at \u003cconsole\u003e:52\nsimilarItemPairCount: Long \u003d 48\nres52: String \u003d (1,1,1.0),(1,2,0.6),(1,3,0.16666666666666666),(1,4,0.14285714285714285),(1,5,0.2),(2,1,0.6),(2,2,1.0),(3,1,0.16666666666666666),(3,3,1.0),(3,4,0.6666666666666666),(3,5,0.5),(4,1,0.14285714285714285),(4,3,0.6666666666666666),(4,4,1.0),(4,5,0.3333333333333333),(5,1,0.2),(5,3,0.5),(5,4,0.3333333333333333),(5,5,1.0),(1,7,0.16666666666666666),(1,8,0.4),(1,10,0.14285714285714285),(2,8,0.6666666666666666),(2,10,0.2),(3,7,1.0),(4,7,0.6666666666666666),(5,7,0.5),(7,1,0.16666666666666666),(7,3,1.0),(7,4,0.6666666666666666),(7,5,0.5),(8,1,0.4),(8,2,0.6666666666666666),(10,1,0.14285714285714285),(10,2,0.2),(6,6,1.0),(6,9,0.3333333333333333),(6,10,0.5),(7,7,1.0),(8,8,1.0),(8,10,0.25),(9,6,0.3333333333333333),(9,9,1.0),(9,10,0.3333333333333333),(10,6,0.5),(10,8,0.25),(10,9,0.333333333..."
      },
      "dateCreated": "Dec 28, 2015 3:43:14 PM",
      "dateStarted": "Apr 19, 2016 12:52:07 AM",
      "dateFinished": "Apr 19, 2016 12:52:08 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Create Tag similarity Graph",
      "text": "import org.apache.spark.graphx._\n\nval similarItemsAboveThresholdEdgeRDD \u003d similarItemsAboveThresholdRDD.map(rdd \u003d\u003e {\n  Edge(rdd._1.toLong, rdd._2.toLong, rdd._3.toDouble) \n})\n\nval similarityGraph \u003d Graph.fromEdges(similarItemsAboveThresholdEdgeRDD, 0L)\n  .cache()",
      "dateUpdated": "Apr 19, 2016 12:52:06 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "tableHide": false,
        "title": true,
        "graph": {
          "mode": "table",
          "height": 64.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451352094574_-1165080675",
      "id": "20151229-012134_1599229617",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.graphx._\nsimilarItemsAboveThresholdEdgeRDD: org.apache.spark.rdd.RDD[org.apache.spark.graphx.Edge[Double]] \u003d MapPartitionsRDD[211] at map at \u003cconsole\u003e:55\nsimilarityGraph: org.apache.spark.graphx.Graph[Long,Double] \u003d org.apache.spark.graphx.impl.GraphImpl@1c023d32\n"
      },
      "dateCreated": "Dec 29, 2015 1:21:34 AM",
      "dateStarted": "Apr 19, 2016 12:52:08 AM",
      "dateFinished": "Apr 19, 2016 12:52:08 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md ![Similarity Graph](https://s3.amazonaws.com/fluxcapacitor.com/img/similarity-graph.png)",
      "dateUpdated": "Apr 19, 2016 12:52:06 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457233507438_-1544133749",
      "id": "20160306-030507_1823540583",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003e\u003cimg src\u003d\"https://s3.amazonaws.com/fluxcapacitor.com/img/similarity-graph.png\" alt\u003d\"Similarity Graph\" /\u003e\u003c/p\u003e\n"
      },
      "dateCreated": "Mar 6, 2016 3:05:07 AM",
      "dateStarted": "Apr 19, 2016 12:52:06 AM",
      "dateFinished": "Apr 19, 2016 12:52:06 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "similarityGraph.vertices.collect()",
      "dateUpdated": "Apr 19, 2016 12:53:13 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1461027112495_-19872264",
      "id": "20160419-005152_33114829",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res74: Array[(org.apache.spark.graphx.VertexId, Long)] \u003d Array((4,0), (8,0), (1,0), (9,0), (5,0), (6,0), (10,0), (2,0), (3,0), (7,0))\n"
      },
      "dateCreated": "Apr 19, 2016 12:51:52 AM",
      "dateStarted": "Apr 19, 2016 12:53:13 AM",
      "dateFinished": "Apr 19, 2016 12:53:14 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val json \u003d sc.textFile(\"/root/pipeline/work/graph/similarity-pathway.json\").collect().mkString\n",
      "dateUpdated": "Apr 19, 2016 1:47:29 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 115.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1461029626889_1011272280",
      "id": "20160419-013346_2048611722",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "json: String \u003d {\"nodes\":[{\"title\":\"name: 4\",\"id\":4,\"size\":1},{\"title\":\"name: 8\",\"id\":8,\"size\":1},{\"title\":\"name: 1\",\"id\":1,\"size\":1},{\"title\":\"name: 9\",\"id\":9,\"size\":1},{\"title\":\"name: 5\",\"id\":5,\"size\":1},{\"title\":\"name: 6\",\"id\":6,\"size\":1},{\"title\":\"name: 10\",\"id\":10,\"size\":1},{\"title\":\"name: 2\",\"id\":2,\"size\":1},{\"title\":\"name: 3\",\"id\":3,\"size\":1},{\"title\":\"name: 7\",\"id\":7,\"size\":1}],\"links\":[{\"source\":1,\"target\":1,\"direction\":\"EdgeDirection.Both\"},{\"source\":2,\"target\":1,\"direction\":\"EdgeDirection.Both\"},{\"source\":3,\"target\":1,\"direction\":\"EdgeDirection.Both\"},{\"source\":4,\"target\":1,\"direction\":\"EdgeDirection.Both\"},{\"source\":5,\"target\":1,\"direction\":\"EdgeDirection.Both\"},{\"source\":1,\"target\":2,\"direction\":\"EdgeDirection.Both\"},{\"source\":2,\"target\":2,\"direction\":\"EdgeDirection.Both\"},{..."
      },
      "dateCreated": "Apr 19, 2016 1:33:46 AM",
      "dateStarted": "Apr 19, 2016 1:47:29 AM",
      "dateFinished": "Apr 19, 2016 1:47:29 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "\n//def d3Graph(json : String) : String \u003d {\n  val u \u003d java.util.UUID.randomUUID\n  println(\"\"\"%html \n\u003cdiv id\u003d\u0027a\"\"\" + u + \"\"\"\u0027 style\u003d\u0027width:960px; height:500px\u0027\u003e\u003c/div\u003e\n  \n\u003cstyle\u003e\n\n.node circle { fill: blue; }\n.node text { font: 10px sans-serif;\n             text-anchor: middle;\n             fill: white; }\nline.link { stroke: red;\n            stroke-width: 1.5px; }\n            \n\u003c/style\u003e\n\n\u003cscript src\u003d\"//d3js.org/d3.v3.min.js\"\u003e\u003c/script\u003e\n  \n\u003cscript\u003e\nvar graph \u003d   \"\"\" + json + \"\"\";\nvar width \u003d 960,\n    height \u003d 500;\n\n//var color \u003d d3.scale.category20();\n\n//var radius \u003d d3.scale.sqrt()\n    .range([0, 6]);\n\nvar svg \u003d d3.select(\"#a\"\"\" + u + \"\"\"\").append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height);\n\nvar force \u003d d3.layout.force()\n    .size([width, height])\n    .charge(-400)\n//    .linkDistance(function(d) { return radius(d.source.size) + radius(d.target.size) + 20; });\n    .linkDistance(100)\n\n\n  force\n      .nodes(graph.nodes)\n      .links(graph.links)\n      .on(\"tick\", tick)\n      .start();\n\n  var link \u003d svg.selectAll(\".link\")\n      .data(graph.links);\n      \n  link.enter().insert(\"line\", \".node\").attr(\"class\", \"link\");\n      \n  //link.enter().append(\"g\")\n  // .attr(\"class\", \"link\");\n\n  //link.append(\"line\")\n  //      .style(\"stroke-width\", function(d) { return (1) * 2 + \"px\"; });\n\n  //link.filter(function(d) { return 0 \u003e 1; }).append(\"line\")\n  //      .attr(\"class\", \"separator\");\n\n  var node \u003d svg.selectAll(\".node\")\n      .data(graph.nodes);\n      \n  var nodeEnter \u003d node.enter().append(\"g\")\n      .attr(\"class\", \"node\")\n    //  .call(force.drag);\n\n  nodeEnter.append(\"circle\")\n        .attr(\"r\", 20);\n     // .attr(\"r\", function(d) { return radius(d.size); })\n      .style(\"fill\", function(d) { return color(d.id); });\n\n  nodeEnter.append(\"text\")\n      .attr(\"dy\", \".35em\")\n      .text(function(d) { return d.title; });\n\n  function tick() {\n    link.selectAll(\"line\")\n        .attr(\"x1\", function(d) { return d.source.x; })\n        .attr(\"y1\", function(d) { return d.source.y; })\n        .attr(\"x2\", function(d) { return d.target.x; })\n        .attr(\"y2\", function(d) { return d.target.y; });\n\n    node.attr(\"transform\", function(d) { return \"translate(\" + d.x + \",\" + d.y + \")\"; });\n}\n\u003c/script\u003e\n  \"\"\")\n",
      "dateUpdated": "Apr 19, 2016 1:52:22 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1461027576574_-970894924",
      "id": "20160419-005936_228945357",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\n\u003cdiv id\u003d\u0027a2b8e7b06-7882-4a83-83f0-c21226fa28c0\u0027 style\u003d\u0027width:960px; height:500px\u0027\u003e\u003c/div\u003e\n  \n\u003cstyle\u003e\n\n.node circle { fill: blue; }\n.node text { font: 10px sans-serif;\n             text-anchor: middle;\n             fill: white; }\nline.link { stroke: red;\n            stroke-width: 1.5px; }\n            \n\u003c/style\u003e\n\n\u003cscript src\u003d\"//d3js.org/d3.v3.min.js\"\u003e\u003c/script\u003e\n  \n\u003cscript\u003e\nvar graph \u003d   {\"nodes\":[{\"title\":\"name: 4\",\"id\":4,\"size\":1},{\"title\":\"name: 8\",\"id\":8,\"size\":1},{\"title\":\"name: 1\",\"id\":1,\"size\":1},{\"title\":\"name: 9\",\"id\":9,\"size\":1},{\"title\":\"name: 5\",\"id\":5,\"size\":1},{\"title\":\"name: 6\",\"id\":6,\"size\":1},{\"title\":\"name: 10\",\"id\":10,\"size\":1},{\"title\":\"name: 2\",\"id\":2,\"size\":1},{\"title\":\"name: 3\",\"id\":3,\"size\":1},{\"title\":\"name: 7\",\"id\":7,\"size\":1}],\"links\":[{\"source\":1,\"target\":1,\"direction\":\"EdgeDirection.Both\"},{\"source\":2,\"target\":1,\"direction\":\"EdgeDirection.Both\"},{\"source\":3,\"target\":1,\"direction\":\"EdgeDirection.Both\"},{\"source\":4,\"target\":1,\"direction\":\"EdgeDirection.Both\"},{\"source\":5,\"target\":1,\"direction\":\"EdgeDirection.Both\"},{\"source\":1,\"target\":2,\"direction\":\"EdgeDirection.Both\"},{\"source\":2,\"target\":2,\"direction\":\"EdgeDirection.Both\"},{\"source\":1,\"target\":3,\"direction\":\"EdgeDirection.Both\"},{\"source\":3,\"target\":3,\"direction\":\"EdgeDirection.Both\"},{\"source\":4,\"target\":3,\"direction\":\"EdgeDirection.Both\"},{\"source\":5,\"target\":3,\"direction\":\"EdgeDirection.Both\"},{\"source\":1,\"target\":4,\"direction\":\"EdgeDirection.Both\"},{\"source\":3,\"target\":4,\"direction\":\"EdgeDirection.Both\"},{\"source\":4,\"target\":4,\"direction\":\"EdgeDirection.Both\"},{\"source\":5,\"target\":4,\"direction\":\"EdgeDirection.Both\"},{\"source\":1,\"target\":5,\"direction\":\"EdgeDirection.Both\"},{\"source\":3,\"target\":5,\"direction\":\"EdgeDirection.Both\"},{\"source\":4,\"target\":5,\"direction\":\"EdgeDirection.Both\"},{\"source\":5,\"target\":5,\"direction\":\"EdgeDirection.Both\"},{\"source\":7,\"target\":1,\"direction\":\"EdgeDirection.Both\"},{\"source\":8,\"target\":1,\"direction\":\"EdgeDirection.Both\"},{\"source\":10,\"target\":1,\"direction\":\"EdgeDirection.Both\"},{\"source\":8,\"target\":2,\"direction\":\"EdgeDirection.Both\"},{\"source\":10,\"target\":2,\"direction\":\"EdgeDirection.Both\"},{\"source\":7,\"target\":3,\"direction\":\"EdgeDirection.Both\"},{\"source\":7,\"target\":4,\"direction\":\"EdgeDirection.Both\"},{\"source\":7,\"target\":5,\"direction\":\"EdgeDirection.Both\"},{\"source\":1,\"target\":7,\"direction\":\"EdgeDirection.Both\"},{\"source\":3,\"target\":7,\"direction\":\"EdgeDirection.Both\"},{\"source\":4,\"target\":7,\"direction\":\"EdgeDirection.Both\"},{\"source\":5,\"target\":7,\"direction\":\"EdgeDirection.Both\"},{\"source\":1,\"target\":8,\"direction\":\"EdgeDirection.Both\"},{\"source\":2,\"target\":8,\"direction\":\"EdgeDirection.Both\"},{\"source\":1,\"target\":10,\"direction\":\"EdgeDirection.Both\"},{\"source\":2,\"target\":10,\"direction\":\"EdgeDirection.Both\"},{\"source\":6,\"target\":6,\"direction\":\"EdgeDirection.Both\"},{\"source\":9,\"target\":6,\"direction\":\"EdgeDirection.Both\"},{\"source\":10,\"target\":6,\"direction\":\"EdgeDirection.Both\"},{\"source\":7,\"target\":7,\"direction\":\"EdgeDirection.Both\"},{\"source\":8,\"target\":8,\"direction\":\"EdgeDirection.Both\"},{\"source\":10,\"target\":8,\"direction\":\"EdgeDirection.Both\"},{\"source\":6,\"target\":9,\"direction\":\"EdgeDirection.Both\"},{\"source\":9,\"target\":9,\"direction\":\"EdgeDirection.Both\"},{\"source\":10,\"target\":9,\"direction\":\"EdgeDirection.Both\"},{\"source\":6,\"target\":10,\"direction\":\"EdgeDirection.Both\"},{\"source\":8,\"target\":10,\"direction\":\"EdgeDirection.Both\"},{\"source\":9,\"target\":10,\"direction\":\"EdgeDirection.Both\"},{\"source\":10,\"target\":10,\"direction\":\"EdgeDirection.Both\"}]};\nvar width \u003d 960,\n    height \u003d 500;\n\n//var color \u003d d3.scale.category20();\n\n//var radius \u003d d3.scale.sqrt()\n    .range([0, 6]);\n\nvar svg \u003d d3.select(\"#a2b8e7b06-7882-4a83-83f0-c21226fa28c0\").append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height);\n\nvar force \u003d d3.layout.force()\n    .size([width, height])\n    .charge(-400)\n//    .linkDistance(function(d) { return radius(d.source.size) + radius(d.target.size) + 20; });\n    .linkDistance(100)\n\n\n  force\n      .nodes(graph.nodes)\n      .links(graph.links)\n      .on(\"tick\", tick)\n      .start();\n\n  var link \u003d svg.selectAll(\".link\")\n      .data(graph.links);\n      \n  link.enter().insert(\"line\", \".node\").attr(\"class\", \"link\");\n      \n  //link.enter().append(\"g\")\n  // .attr(\"class\", \"link\");\n\n  //link.append(\"line\")\n  //      .style(\"stroke-width\", function(d) { return (1) * 2 + \"px\"; });\n\n  //link.filter(function(d) { return 0 \u003e 1; }).append(\"line\")\n  //      .attr(\"class\", \"separator\");\n\n  var node \u003d svg.selectAll(\".node\")\n      .data(graph.nodes);\n      \n  var nodeEnter \u003d node.enter().append(\"g\")\n      .attr(\"class\", \"node\")\n    //  .call(force.drag);\n\n  nodeEnter.append(\"circle\")\n        .attr(\"r\", 20);\n     // .attr(\"r\", function(d) { return radius(d.size); })\n      .style(\"fill\", function(d) { return color(d.id); });\n\n  nodeEnter.append(\"text\")\n      .attr(\"dy\", \".35em\")\n      .text(function(d) { return d.title; });\n\n  function tick() {\n    link.selectAll(\"line\")\n        .attr(\"x1\", function(d) { return d.source.x; })\n        .attr(\"y1\", function(d) { return d.source.y; })\n        .attr(\"x2\", function(d) { return d.target.x; })\n        .attr(\"y2\", function(d) { return d.target.y; });\n\n    node.attr(\"transform\", function(d) { return \"translate(\" + d.x + \",\" + d.y + \")\"; });\n}\n\u003c/script\u003e\n  \n"
      },
      "dateCreated": "Apr 19, 2016 12:59:36 AM",
      "dateStarted": "Apr 19, 2016 1:52:22 AM",
      "dateFinished": "Apr 19, 2016 1:52:22 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "case class Node(title : String, id : Long, size: Int)\n\ncase class Link(source : Long, target : Long, direction : String)\n\ncase class D3Graph(nodes : Array[Node], links : Array[Link])\n\nval nodes \u003d similarityGraph.vertices.map( vertex \u003d\u003e Node(\"name\" + \": \" + vertex._1, vertex._1, 1))\n\nval links \u003d similarityGraph.edges.map(ed \u003d\u003e Link(ed.dstId, ed.srcId, EdgeDirection.Both.toString))\n\nval d3GraphDF \u003d sc.parallelize(Seq(D3Graph(nodes.collect(), links.collect()))).toDF()\n\nd3GraphDF.write.format(\"json\").mode(\"overwrite\").save(\"/root/pipeline/work/graph/similarity-pathway.json\")\n\nval d3GraphJson \u003d sc.textFile(\"/root/pipeline/work/graph/similarity-pathway.json\").collect().mkString",
      "dateUpdated": "Apr 19, 2016 1:47:08 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 294.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "nodes",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "links",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "nodes",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "links",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1461027618204_-578238152",
      "id": "20160419-010018_301174225",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "defined class Node\ndefined class Link\ndefined class D3Graph\nnodes: org.apache.spark.rdd.RDD[Node] \u003d MapPartitionsRDD[446] at map at \u003cconsole\u003e:78\nlinks: org.apache.spark.rdd.RDD[Link] \u003d MapPartitionsRDD[447] at map at \u003cconsole\u003e:78\nd3GraphDF: org.apache.spark.sql.DataFrame \u003d [nodes: array\u003cstruct\u003ctitle:string,id:bigint,size:int\u003e\u003e, links: array\u003cstruct\u003csource:bigint,target:bigint,direction:string\u003e\u003e]\nd3GraphJson: String \u003d {\"nodes\":[{\"title\":\"name: 4\",\"id\":4,\"size\":1},{\"title\":\"name: 8\",\"id\":8,\"size\":1},{\"title\":\"name: 1\",\"id\":1,\"size\":1},{\"title\":\"name: 9\",\"id\":9,\"size\":1},{\"title\":\"name: 5\",\"id\":5,\"size\":1},{\"title\":\"name: 6\",\"id\":6,\"size\":1},{\"title\":\"name: 10\",\"id\":10,\"size\":1},{\"title\":\"name: 2\",\"id\":2,\"size\":1},{\"title\":\"name: 3\",\"id\":3,\"size\":1},{\"title\":\"name: 7\",\"id\":7,\"size\":1}],\"links\":[{\"source\":1,\"target\":1,\"direction\":\"EdgeDirection.Both\"},{\"source\":2,\"target\":1,\"direction\":\"EdgeDirection.Both\"},{\"source\":3,\"target\":1,\"direction\":\"EdgeDirection.Both\"},{\"source\":4,\"target\":1,\"direction\":\"EdgeDirection.Both\"},{\"source\":5,\"target\":1,\"direction\":\"EdgeDirection.Both\"},{\"source\":1,\"target\":2,\"direction\":\"EdgeDirection.Both\"},{\"source\":2,\"target\":2,\"direction\":\"EdgeDirection.B..."
      },
      "dateCreated": "Apr 19, 2016 1:00:18 AM",
      "dateStarted": "Apr 19, 2016 1:47:09 AM",
      "dateFinished": "Apr 19, 2016 1:47:09 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "println(\"\"\"%html \"\"\" + d3Graph(d3GraphJson))",
      "dateUpdated": "Apr 19, 2016 1:21:32 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1461028424015_-918579465",
      "id": "20160419-011344_1399420494",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\n\u003cstyle\u003e\n\n.link line {\n  stroke: #696969;\n}\n\n.link line.separator {\n  stroke: #fff;\n  stroke-width: 2px;\n}\n\n.node circle {\n  stroke: #111;\n  stroke-width: 1.5px;\n}\n\n.node text {\n  font: 10px sans-serif;\n  pointer-events: none;\n}\n\n\u003c/style\u003e\n\u003cscript src\u003d\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.6/d3.min.js\"\u003e\u003c/script\u003e\n\u003cscript\u003e\n\nvar graph \u003d   {\"nodes\":[{\"itemName\":\"name: 4\",\"itemId\":4,\"size\":1},{\"itemName\":\"name: 8\",\"itemId\":8,\"size\":1},{\"itemName\":\"name: 1\",\"itemId\":1,\"size\":1},{\"itemName\":\"name: 9\",\"itemId\":9,\"size\":1},{\"itemName\":\"name: 5\",\"itemId\":5,\"size\":1},{\"itemName\":\"name: 6\",\"itemId\":6,\"size\":1},{\"itemName\":\"name: 10\",\"itemId\":10,\"size\":1},{\"itemName\":\"name: 2\",\"itemId\":2,\"size\":1},{\"itemName\":\"name: 3\",\"itemId\":3,\"size\":1},{\"itemName\":\"name: 7\",\"itemId\":7,\"size\":1}],\"links\":[{\"source\":1,\"target\":1,\"direction\":\"EdgeDirection.Both\"},{\"source\":2,\"target\":1,\"direction\":\"EdgeDirection.Both\"},{\"source\":3,\"target\":1,\"direction\":\"EdgeDirection.Both\"},{\"source\":4,\"target\":1,\"direction\":\"EdgeDirection.Both\"},{\"source\":5,\"target\":1,\"direction\":\"EdgeDirection.Both\"},{\"source\":1,\"target\":2,\"direction\":\"EdgeDirection.Both\"},{\"source\":2,\"target\":2,\"direction\":\"EdgeDirection.Both\"},{\"source\":1,\"target\":3,\"direction\":\"EdgeDirection.Both\"},{\"source\":3,\"target\":3,\"direction\":\"EdgeDirection.Both\"},{\"source\":4,\"target\":3,\"direction\":\"EdgeDirection.Both\"},{\"source\":5,\"target\":3,\"direction\":\"EdgeDirection.Both\"},{\"source\":1,\"target\":4,\"direction\":\"EdgeDirection.Both\"},{\"source\":3,\"target\":4,\"direction\":\"EdgeDirection.Both\"},{\"source\":4,\"target\":4,\"direction\":\"EdgeDirection.Both\"},{\"source\":5,\"target\":4,\"direction\":\"EdgeDirection.Both\"},{\"source\":1,\"target\":5,\"direction\":\"EdgeDirection.Both\"},{\"source\":3,\"target\":5,\"direction\":\"EdgeDirection.Both\"},{\"source\":4,\"target\":5,\"direction\":\"EdgeDirection.Both\"},{\"source\":5,\"target\":5,\"direction\":\"EdgeDirection.Both\"},{\"source\":7,\"target\":1,\"direction\":\"EdgeDirection.Both\"},{\"source\":8,\"target\":1,\"direction\":\"EdgeDirection.Both\"},{\"source\":10,\"target\":1,\"direction\":\"EdgeDirection.Both\"},{\"source\":8,\"target\":2,\"direction\":\"EdgeDirection.Both\"},{\"source\":10,\"target\":2,\"direction\":\"EdgeDirection.Both\"},{\"source\":7,\"target\":3,\"direction\":\"EdgeDirection.Both\"},{\"source\":7,\"target\":4,\"direction\":\"EdgeDirection.Both\"},{\"source\":7,\"target\":5,\"direction\":\"EdgeDirection.Both\"},{\"source\":1,\"target\":7,\"direction\":\"EdgeDirection.Both\"},{\"source\":3,\"target\":7,\"direction\":\"EdgeDirection.Both\"},{\"source\":4,\"target\":7,\"direction\":\"EdgeDirection.Both\"},{\"source\":5,\"target\":7,\"direction\":\"EdgeDirection.Both\"},{\"source\":1,\"target\":8,\"direction\":\"EdgeDirection.Both\"},{\"source\":2,\"target\":8,\"direction\":\"EdgeDirection.Both\"},{\"source\":1,\"target\":10,\"direction\":\"EdgeDirection.Both\"},{\"source\":2,\"target\":10,\"direction\":\"EdgeDirection.Both\"},{\"source\":6,\"target\":6,\"direction\":\"EdgeDirection.Both\"},{\"source\":9,\"target\":6,\"direction\":\"EdgeDirection.Both\"},{\"source\":10,\"target\":6,\"direction\":\"EdgeDirection.Both\"},{\"source\":7,\"target\":7,\"direction\":\"EdgeDirection.Both\"},{\"source\":8,\"target\":8,\"direction\":\"EdgeDirection.Both\"},{\"source\":10,\"target\":8,\"direction\":\"EdgeDirection.Both\"},{\"source\":6,\"target\":9,\"direction\":\"EdgeDirection.Both\"},{\"source\":9,\"target\":9,\"direction\":\"EdgeDirection.Both\"},{\"source\":10,\"target\":9,\"direction\":\"EdgeDirection.Both\"},{\"source\":6,\"target\":10,\"direction\":\"EdgeDirection.Both\"},{\"source\":8,\"target\":10,\"direction\":\"EdgeDirection.Both\"},{\"source\":9,\"target\":10,\"direction\":\"EdgeDirection.Both\"},{\"source\":10,\"target\":10,\"direction\":\"EdgeDirection.Both\"}]};\nvar width \u003d 960,\n    height \u003d 500;\n\nvar color \u003d d3.scale.category20();\n\nvar radius \u003d d3.scale.sqrt()\n    .range([0, 6]);\n\nvar svg \u003d d3.select(\"body\").append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height);\n\nvar force \u003d d3.layout.force()\n    .size([width, height])\n    .charge(-400)\n    .linkDistance(function(d) { return radius(d.source.size) + radius(d.target.size) + 20; });\n\n\n  force\n      .nodes(graph.nodes)\n      .links(graph.links)\n      .on(\"tick\", tick)\n      .start();\n\n  var link \u003d svg.selectAll(\".link\")\n      .data(graph.links)\n    .enter().append(\"g\")\n      .attr(\"class\", \"link\");\n\n  link.append(\"line\")\n      .style(\"stroke-width\", function(d) { return (1) * 2 + \"px\"; });\n\n  link.filter(function(d) { return 0 \u003e 1; }).append(\"line\")\n      .attr(\"class\", \"separator\");\n\n  var node \u003d svg.selectAll(\".node\")\n      .data(graph.nodes)\n    .enter().append(\"g\")\n      .attr(\"class\", \"node\")\n      .call(force.drag);\n\n  node.append(\"circle\")\n      .attr(\"r\", function(d) { return radius(d.size); })\n      .style(\"fill\", function(d) { return color(d.currency); });\n\n  node.append(\"text\")\n      .attr(\"dy\", \".35em\")\n      .attr(\"text-anchor\", \"middle\")\n      .text(function(d) { return d.currency; });\n\n  function tick() {\n    link.selectAll(\"line\")\n        .attr(\"x1\", function(d) { return d.source.x; })\n        .attr(\"y1\", function(d) { return d.source.y; })\n        .attr(\"x2\", function(d) { return d.target.x; })\n        .attr(\"y2\", function(d) { return d.target.y; });\n\n    node.attr(\"transform\", function(d) { return \"translate(\" + d.x + \",\" + d.y + \")\"; });\n}\n\u003c/script\u003e\n\n"
      },
      "dateCreated": "Apr 19, 2016 1:13:44 AM",
      "dateStarted": "Apr 19, 2016 1:21:32 AM",
      "dateFinished": "Apr 19, 2016 1:21:32 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import org.apache.spark.graphx._\r\n\r\nimport scala.reflect.ClassTag\r\n\r\ndef drawGraph[VD:ClassTag,ED:ClassTag](graph:Graph[VD,ED]) \u003d {\r\n  val u \u003d java.util.UUID.randomUUID\r\n  val v \u003d graph.vertices.collect.map(_._1)\r\n  println(\"\"\"%html\r\n\u003cdiv id\u003d\u0027a\"\"\" + u + \"\"\"\u0027 style\u003d\u0027width:960px; height:500px\u0027\u003e\u003c/div\u003e\r\n\u003cstyle\u003e\r\n.node circle { fill: blue; }\r\n.node text { font: 10px sans-serif;\r\n             text-anchor: middle;\r\n             fill: white; }\r\nline.link { stroke: red;\r\n            stroke-width: 1.5px; }\r\n\u003c/style\u003e\r\n\u003cscript src\u003d\"//d3js.org/d3.v3.min.js\"\u003e\u003c/script\u003e\r\n\u003cscript\u003e\r\nvar width \u003d 960, height \u003d 500;\r\n\r\nvar svg \u003d d3.select(\"#a\"\"\" + u + \"\"\"\").append(\"svg\")\r\n    .attr(\"width\", width).attr(\"height\", height);\r\n\r\nvar nodes \u003d [\"\"\" + v.map(\"{id:\" + _ + \"}\").mkString(\",\") + \"\"\"];\r\nvar links \u003d [\"\"\" + graph.edges.collect.map(\r\n  e \u003d\u003e \"{source:nodes[\" + v.indexWhere(_ \u003d\u003d e.srcId) + \"],target:nodes[\" +\r\n       v.indexWhere(_ \u003d\u003d e.dstId) + \"]}\").mkString(\",\") + \"\"\"];\r\n\r\nvar link \u003d svg.selectAll(\".link\").data(links);\r\nlink.enter().insert(\"line\", \".node\").attr(\"class\", \"link\");\r\n\r\nvar node \u003d svg.selectAll(\".node\").data(nodes);\r\nvar nodeEnter \u003d node.enter().append(\"g\").attr(\"class\", \"node\")\r\n\r\nnodeEnter.append(\"circle\").attr(\"r\", 20);\r\n\r\nnodeEnter.append(\"text\").attr(\"dy\", \"0.35em\")\r\n         .text(function(d) { return d.id; });\r\n\r\nd3.layout.force().linkDistance(100).charge(-200).chargeDistance(300)\r\n   .friction(0.95).linkStrength(0.5).size([width, height])\r\n   .on(\"tick\", function() {\r\n      link.attr(\"x1\", function(d) { return d.source.x; })\r\n          .attr(\"y1\", function(d) { return d.source.y; })\r\n          .attr(\"x2\", function(d) { return d.target.x; })\r\n          .attr(\"y2\", function(d) { return d.target.y; });\r\n      node.attr(\"transform\", function(d) {\r\n        return \"translate(\" + d.x + \",\" + d.y + \")\";\r\n      });\r\n   }).nodes(nodes).links(links).start();\r\n\u003c/script\u003e\r\n\"\"\")\r\n}\r\n\r\ndrawGraph(similarityGraph)",
      "dateUpdated": "Apr 19, 2016 1:58:25 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 494.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456948534888_-1707307392",
      "id": "20160302-195534_1968820591",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cdiv id\u003d\u0027ae743d5db-0b1c-4af7-ae68-38d85e4de436\u0027 style\u003d\u0027width:960px; height:500px\u0027\u003e\u003c/div\u003e\n\u003cstyle\u003e\n.node circle { fill: blue; }\n.node text { font: 10px sans-serif;\n             text-anchor: middle;\n             fill: white; }\nline.link { stroke: red;\n            stroke-width: 1.5px; }\n\u003c/style\u003e\n\u003cscript src\u003d\"//d3js.org/d3.v3.min.js\"\u003e\u003c/script\u003e\n\u003cscript\u003e\nvar width \u003d 960, height \u003d 500;\n\nvar svg \u003d d3.select(\"#ae743d5db-0b1c-4af7-ae68-38d85e4de436\").append(\"svg\")\n    .attr(\"width\", width).attr(\"height\", height);\n\nvar nodes \u003d [{id:4},{id:8},{id:1},{id:9},{id:5},{id:6},{id:10},{id:2},{id:3},{id:7}];\nvar links \u003d [{source:nodes[2],target:nodes[2]},{source:nodes[2],target:nodes[7]},{source:nodes[2],target:nodes[8]},{source:nodes[2],target:nodes[0]},{source:nodes[2],target:nodes[4]},{source:nodes[7],target:nodes[2]},{source:nodes[7],target:nodes[7]},{source:nodes[8],target:nodes[2]},{source:nodes[8],target:nodes[8]},{source:nodes[8],target:nodes[0]},{source:nodes[8],target:nodes[4]},{source:nodes[0],target:nodes[2]},{source:nodes[0],target:nodes[8]},{source:nodes[0],target:nodes[0]},{source:nodes[0],target:nodes[4]},{source:nodes[4],target:nodes[2]},{source:nodes[4],target:nodes[8]},{source:nodes[4],target:nodes[0]},{source:nodes[4],target:nodes[4]},{source:nodes[2],target:nodes[9]},{source:nodes[2],target:nodes[1]},{source:nodes[2],target:nodes[6]},{source:nodes[7],target:nodes[1]},{source:nodes[7],target:nodes[6]},{source:nodes[8],target:nodes[9]},{source:nodes[0],target:nodes[9]},{source:nodes[4],target:nodes[9]},{source:nodes[9],target:nodes[2]},{source:nodes[9],target:nodes[8]},{source:nodes[9],target:nodes[0]},{source:nodes[9],target:nodes[4]},{source:nodes[1],target:nodes[2]},{source:nodes[1],target:nodes[7]},{source:nodes[6],target:nodes[2]},{source:nodes[6],target:nodes[7]},{source:nodes[5],target:nodes[5]},{source:nodes[5],target:nodes[3]},{source:nodes[5],target:nodes[6]},{source:nodes[9],target:nodes[9]},{source:nodes[1],target:nodes[1]},{source:nodes[1],target:nodes[6]},{source:nodes[3],target:nodes[5]},{source:nodes[3],target:nodes[3]},{source:nodes[3],target:nodes[6]},{source:nodes[6],target:nodes[5]},{source:nodes[6],target:nodes[1]},{source:nodes[6],target:nodes[3]},{source:nodes[6],target:nodes[6]}];\n\nvar link \u003d svg.selectAll(\".link\").data(links);\nlink.enter().insert(\"line\", \".node\").attr(\"class\", \"link\");\n\nvar node \u003d svg.selectAll(\".node\").data(nodes);\nvar nodeEnter \u003d node.enter().append(\"g\").attr(\"class\", \"node\")\n\nnodeEnter.append(\"circle\").attr(\"r\", 20);\n\nnodeEnter.append(\"text\").attr(\"dy\", \"0.35em\")\n         .text(function(d) { return d.id; });\n\nd3.layout.force().linkDistance(100).charge(-200).chargeDistance(300)\n   .friction(0.95).linkStrength(0.5).size([width, height])\n   .on(\"tick\", function() {\n      link.attr(\"x1\", function(d) { return d.source.x; })\n          .attr(\"y1\", function(d) { return d.source.y; })\n          .attr(\"x2\", function(d) { return d.target.x; })\n          .attr(\"y2\", function(d) { return d.target.y; });\n      node.attr(\"transform\", function(d) {\n        return \"translate(\" + d.x + \",\" + d.y + \")\";\n      });\n   }).nodes(nodes).links(links).start();\n\u003c/script\u003e\n\n"
      },
      "dateCreated": "Mar 2, 2016 7:55:34 PM",
      "dateStarted": "Apr 19, 2016 1:58:25 AM",
      "dateFinished": "Apr 19, 2016 1:58:25 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Problem:  Find a Movie for Me and You\n* Me:  Toy Story \\[Adventure|Animation|Children|Comedy|Fantasy\\]\n* You:  Sudden Death \\[Action\\]\n* Us:  ??",
      "dateUpdated": "Apr 19, 2016 12:52:06 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1454568859417_-1519810788",
      "id": "20160204-065419_1676839728",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch3\u003eProblem:  Find a Movie for Me and You\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eMe:  Toy Story [Adventure|Animation|Children|Comedy|Fantasy]\u003c/li\u003e\n\u003cli\u003eYou:  Sudden Death [Action]\u003c/li\u003e\n\u003cli\u003eUs:  ??\u003c/li\u003e\n\u003c/ul\u003e\n"
      },
      "dateCreated": "Feb 4, 2016 6:54:19 AM",
      "dateStarted": "Apr 19, 2016 12:52:06 AM",
      "dateFinished": "Apr 19, 2016 12:52:06 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Dijkstra Shortest Path Between 2 Items",
      "text": "import com.advancedspark.ml.graph.Dijkstra\n\n// Toy Story (Me)\nval src \u003d 1 \n\n// Sudden Death (You)\nval dest \u003d 9 \n\n// Generate Shortest Path for all nodes in the graph\nval shortestPathGraph \u003d Dijkstra.run(similarityGraph, src)\n  .cache()\n  \n// Shortest Path\n// 1 (Toy Story) -\u003e 10 (GoldenEye) -\u003e 9 (Sudden Death)  \n// Filter out only the ones with dest as the destination vertex\nval shortestPathFromSrcToDest \u003d shortestPathGraph.vertices\n  .filter(_._1 \u003d\u003d dest)\n  .map(_._2)\n  .collect()(0)._2",
      "dateUpdated": "Apr 19, 2016 12:52:06 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1452662642144_-2030518322",
      "id": "20160113-052402_1819863464",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import com.advancedspark.ml.graph.Dijkstra\nsrc: Int \u003d 1\ndest: Int \u003d 9\nshortestPathGraph: org.apache.spark.graphx.Graph[(org.apache.spark.graphx.VertexId, List[Any]),Double] \u003d org.apache.spark.graphx.impl.GraphImpl@70fca889\nshortestPathFromSrcToDest: List[Any] \u003d List(0.47619047619047616, List(1, 10))\n"
      },
      "dateCreated": "Jan 13, 2016 5:24:02 AM",
      "dateStarted": "Apr 19, 2016 12:52:09 AM",
      "dateFinished": "Apr 19, 2016 12:52:11 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Solution\n* Me: Toy Story \\[**Adventure**|Animation|Children|Comedy|Fantasy\\]\n* You: Sudden Death \\[**Action**\\]\n* Us: **Golden Eye** \\[**Action**|**Adventure**|Thriller\\]\n",
      "dateUpdated": "Apr 19, 2016 12:52:06 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/markdown",
        "enabled": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451400014910_399953924",
      "id": "20151229-144014_562495240",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch3\u003eSolution\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eMe: Toy Story [\u003cstrong\u003eAdventure\u003c/strong\u003e|Animation|Children|Comedy|Fantasy]\u003c/li\u003e\n\u003cli\u003eYou: Sudden Death [\u003cstrong\u003eAction\u003c/strong\u003e]\u003c/li\u003e\n\u003cli\u003eUs: \u003cstrong\u003eGolden Eye\u003c/strong\u003e [\u003cstrong\u003eAction\u003c/strong\u003e|\u003cstrong\u003eAdventure\u003c/strong\u003e|Thriller]\u003c/li\u003e\n\u003c/ul\u003e\n"
      },
      "dateCreated": "Dec 29, 2015 2:40:14 PM",
      "dateStarted": "Apr 19, 2016 12:52:06 AM",
      "dateFinished": "Apr 19, 2016 12:52:06 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "dateUpdated": "Apr 19, 2016 12:52:06 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1454569133180_-1392663574",
      "id": "20160204-065853_2089059441",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT"
      },
      "dateCreated": "Feb 4, 2016 6:58:53 AM",
      "dateStarted": "Apr 19, 2016 12:52:10 AM",
      "dateFinished": "Apr 19, 2016 12:52:11 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Graph/04: Similarity Pathway (Similarity Graph + Dijkstra)",
  "id": "2BA4YA8KU",
  "angularObjects": {
    "2ARR8UZDJ": [],
    "2AS9P7JSA": [],
    "2AR33ZMZJ": []
  },
  "config": {
    "looknfeel": "default"
  },
  "info": {}
}