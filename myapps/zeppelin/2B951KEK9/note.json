{
  "paragraphs": [
    {
      "dateUpdated": "Mar 9, 2016 4:12:13 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456386719552_-1289365663",
      "id": "20160225-075159_1120209487",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT"
      },
      "dateCreated": "Feb 25, 2016 7:51:59 AM",
      "dateStarted": "Mar 9, 2016 4:12:13 AM",
      "dateFinished": "Mar 9, 2016 4:12:35 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Load dataset including tags",
      "text": "val itemsDF \u003d sqlContext.read.format(\"com.databricks.spark.csv\")\n  .option(\"header\", \"true\")\n  .option(\"inferSchema\", \"true\")\n  .load(\"file:/root/pipeline/datasets/movielens/ml-latest/movies-sm.csv\")\n  .toDF(\"id\", \"title\", \"tags\")\n\nz.show(itemsDF)",
      "dateUpdated": "Mar 9, 2016 4:24:11 AM",
      "config": {
        "tableHide": false,
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1452399241202_1486008097",
      "id": "20160110-041401_1060534387",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "id\ttitle\ttags\n1\tToy Story (1995)\tAdventure|Animation|Children|Comedy|Fantasy\n2\tJumanji (1995)\tAdventure|Children|Fantasy\n3\tGrumpier Old Men (1995)\tComedy|Romance\n4\tWaiting to Exhale (1995)\tComedy|Drama|Romance\n5\tFather of the Bride Part II (1995)\tComedy\n6\tHeat (1995)\tAction|Crime|Thriller\n7\tSabrina (1995)\tComedy|Romance\n8\tTom and Huck (1995)\tAdventure|Children\n9\tSudden Death (1995)\tAction\n10\tGoldenEye (1995)\tAction|Adventure|Thriller\n"
      },
      "dateCreated": "Jan 10, 2016 4:14:01 AM",
      "dateStarted": "Mar 9, 2016 4:24:11 AM",
      "dateFinished": "Mar 9, 2016 4:24:12 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Convert CSV-based DataFrame into TaggedItems",
      "text": "import org.apache.spark.sql.Row\nimport com.advancedspark.ml.TaggedItem\n\nval itemsWithTagsDF \u003d itemsDF.select($\"id\", $\"title\", $\"tags\").map(row \u003d\u003e {\n  val id \u003d row.getInt(0)\n  val title \u003d row.getString(1)\n  val tags \u003d row.getString(2).trim.split(\"\\\\|\")\n  TaggedItem(id, title, tags)\n}).toDF(\"id\", \"title\", \"tags\")",
      "dateUpdated": "Mar 9, 2016 4:24:58 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1452399241202_1486008097",
      "id": "20160110-041401_2030491697",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.sql.Row\nimport com.advancedspark.ml.TaggedItem\nitemsWithTagsDF: org.apache.spark.sql.DataFrame \u003d [id: bigint, title: string, tags: array\u003cstring\u003e]\n"
      },
      "dateCreated": "Jan 10, 2016 4:14:01 AM",
      "dateStarted": "Mar 9, 2016 4:24:58 AM",
      "dateFinished": "Mar 9, 2016 4:24:58 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Distribution of tags within dataset",
      "text": "val tagsCountRDD \u003d itemsWithTagsDF.flatMap(item \u003d\u003e item.getSeq[String](2)).map(tag \u003d\u003e (tag,1)).reduceByKey(_ + _)\nz.show(tagsCountRDD.toDF(\"tag\", \"count\"))",
      "dateUpdated": "Mar 9, 2016 4:30:18 AM",
      "config": {
        "tableHide": false,
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "graph": {
          "mode": "pieChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "tag",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "count",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "tag",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "count",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1452399241202_1486008097",
      "id": "20160110-041401_1205734711",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "tag\tcount\nFantasy\t2\nCrime\t1\nAnimation\t1\nThriller\t2\nAdventure\t4\nAction\t3\nChildren\t3\nComedy\t5\nRomance\t3\nDrama\t1\n"
      },
      "dateCreated": "Jan 10, 2016 4:14:01 AM",
      "dateStarted": "Mar 9, 2016 4:30:04 AM",
      "dateFinished": "Mar 9, 2016 4:30:04 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Distinct Tags",
      "text": "val distinctTagsDF \u003d itemsWithTagsDF.flatMap(row \u003d\u003e row.getSeq[String](2)).distinct().toDF(\"tag\")",
      "dateUpdated": "Mar 9, 2016 4:34:58 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457496680376_1978843102",
      "id": "20160309-041120_1608443125",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "distinctTagsDF: org.apache.spark.sql.DataFrame \u003d [tag: string]\n"
      },
      "dateCreated": "Mar 9, 2016 4:11:20 AM",
      "dateStarted": "Mar 9, 2016 4:34:58 AM",
      "dateFinished": "Mar 9, 2016 4:34:58 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "//TODO:  For Spark\u0027s current implementation, you would need to map those features as you mention. You could also use say StringIndexer -\u003e OneHotEncoder or VectorIndexer. You could create a Pipeline to deal with the mapping and training (e.g. http://spark.apache.org/docs/latest/ml-guide.html#example-pipeline). Pipeline supports persistence.\n",
      "dateUpdated": "Mar 12, 2016 2:16:29 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457792178889_1987403522",
      "id": "20160312-141618_533322746",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Mar 12, 2016 2:16:18 PM",
      "dateStarted": "Mar 12, 2016 2:16:29 PM",
      "dateFinished": "Mar 12, 2016 2:16:46 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import org.apache.spark.ml.feature.StringIndexer\n\nval tagIndexer \u003d new StringIndexer()\n  .setInputCol(\"tag\")\n  .setOutputCol(\"tagIndex\")",
      "dateUpdated": "Mar 9, 2016 4:42:20 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457498049612_-111932803",
      "id": "20160309-043409_575471273",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.ml.feature.StringIndexer\ntagIndexer: org.apache.spark.ml.feature.StringIndexer \u003d strIdx_70b1e5f5a6e1\n"
      },
      "dateCreated": "Mar 9, 2016 4:34:09 AM",
      "dateStarted": "Mar 9, 2016 4:42:20 AM",
      "dateFinished": "Mar 9, 2016 4:42:21 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import org.apache.spark.ml.feature.OneHotEncoder\n\nval oneHotEncoder \u003d new OneHotEncoder()\n  .setInputCol(tagIndexer.getOutputCol)\n  .setOutputCol(\"tagOneHotEncoded\")\n  .setDropLast(false)",
      "dateUpdated": "Mar 9, 2016 4:50:10 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457498342824_1758745353",
      "id": "20160309-043902_1173974218",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.ml.feature.OneHotEncoder\noneHotEncoder: org.apache.spark.ml.feature.OneHotEncoder \u003d oneHot_47c925fce145\n"
      },
      "dateCreated": "Mar 9, 2016 4:39:02 AM",
      "dateStarted": "Mar 9, 2016 4:50:10 AM",
      "dateFinished": "Mar 9, 2016 4:50:10 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import org.apache.spark.ml.Pipeline\n\nval pipeline \u003d new Pipeline()\n  .setStages(Array(tagIndexer, oneHotEncoder))\n  \nval pipelineModel \u003d pipeline.fit(distinctTagsDF)\nval resultsDF \u003d pipelineModel.transform(distinctTagsDF)\n//z.show(resultsDF)\n\nimport org.jblas.DoubleMatrix\nresultsDF.map(row \u003d\u003e new DoubleMatrix(row.getSeq[Vector[Double]](0).toArray))\n",
      "dateUpdated": "Mar 9, 2016 5:00:49 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457498638811_-405489636",
      "id": "20160309-044358_87162211",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "import org.apache.spark.ml.Pipeline\npipeline: org.apache.spark.ml.Pipeline \u003d pipeline_233712f0ccbe\npipelineModel: org.apache.spark.ml.PipelineModel \u003d pipeline_233712f0ccbe\nresultsDF: org.apache.spark.sql.DataFrame \u003d [tag: string, tagIndex: double, tagOneHotEncoded: vector]\nimport org.jblas.DoubleMatrix\n\u003cconsole\u003e:108: error: overloaded method constructor DoubleMatrix with alternatives:\n  (x$1: java.util.List[java.lang.Double])org.jblas.DoubleMatrix \u003cand\u003e\n  (x$1: Array[Array[scala.Double]])org.jblas.DoubleMatrix \u003cand\u003e\n  (x$1: String)org.jblas.DoubleMatrix \u003cand\u003e\n  (x$1: Array[scala.Double])org.jblas.DoubleMatrix \u003cand\u003e\n  (x$1: Int)org.jblas.DoubleMatrix\n cannot be applied to (Array[Vector[scala.Double]])\n              resultsDF.map(row \u003d\u003e new DoubleMatrix(row.getSeq[Vector[Double]](0).toArray))\n                                   ^\n"
      },
      "dateCreated": "Mar 9, 2016 4:43:58 AM",
      "dateStarted": "Mar 9, 2016 5:00:49 AM",
      "dateFinished": "Mar 9, 2016 5:00:49 AM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Cluster Items Using Tag Vectors and K-Means",
      "text": "val numClusters \u003d 2\nval numIterations \u003d 20\n\nval clusters \u003d KMeans.fit(parsedData, numClusters, numIterations)",
      "dateUpdated": "Mar 9, 2016 4:12:13 AM",
      "config": {
        "tableHide": false,
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "clusterId",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "clusterId",
              "index": 0.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1452399241202_1486008097",
      "id": "20160110-041401_1801101308",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "numClusters: Int \u003d 2\nnumIterations: Int \u003d 20\n\u003cconsole\u003e:35: error: not found: value KMeans\n       val clusters \u003d KMeans.fit(parsedData, numClusters, numIterations)\n                      ^\n"
      },
      "dateCreated": "Jan 10, 2016 4:14:01 AM",
      "dateStarted": "Mar 9, 2016 4:12:42 AM",
      "dateFinished": "Mar 9, 2016 4:12:42 AM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Evaluate clustering by computing Within Set Sum of Squared Errors (WSSSE)",
      "text": "val WSSSE \u003d clusters.computeCost(parsedData)\n\nprintln(\"Within Set Sum of Squared Errors \u003d \" + WSSSE)",
      "dateUpdated": "Mar 9, 2016 4:12:13 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1454569817245_-241515122",
      "id": "20160204-071017_390324117",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "\u003cconsole\u003e:30: error: not found: value clusters\n         val WSSSE \u003d clusters.computeCost(parsedData)\n                     ^\n"
      },
      "dateCreated": "Feb 4, 2016 7:10:17 AM",
      "dateStarted": "Mar 9, 2016 4:12:42 AM",
      "dateFinished": "Mar 9, 2016 4:12:42 AM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Enrich the cluster assignments with item data",
      "text": "//val enrichedClusterAssignmentsDF \u003d clusterAssignmentsRDD.toDF(\"itemId\", \"clusterId\")\n//  .join(itemsDF, $\"itemId\" \u003d\u003d\u003d $\"id\")\n//  .select($\"clusterId\", $\"itemId\", $\"title\", $\"tags\")\n//  .sort($\"clusterId\" desc)\n  \n//z.show(enrichedClusterAssignmentsDF)",
      "dateUpdated": "Mar 9, 2016 4:12:13 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "clusterId",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "itemId",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "clusterId",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "itemId",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1452399241202_1486008097",
      "id": "20160110-041401_1557823509",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Jan 10, 2016 4:14:01 AM",
      "dateStarted": "Mar 9, 2016 4:12:42 AM",
      "dateFinished": "Mar 9, 2016 4:12:42 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Show cluster Distributions",
      "text": "//val clusterDistributionDF \u003d joinedClusterAssignmentsDF\n//  .select($\"clusterId\", $\"itemId\", $\"tags\")\n//  .groupBy($\"clusterId\", $\"tags\")\n//  .agg(count($\"itemId\"))\n//  .sort($\"clusterId\" desc)\n\n//z.show(clusterDistributionDF)",
      "dateUpdated": "Mar 9, 2016 4:12:13 AM",
      "config": {
        "tableHide": false,
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "graph": {
          "mode": "multiBarChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "clusterId",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "count(itemId)",
              "index": 2.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "clusterId",
              "index": 0.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1452399241202_1486008097",
      "id": "20160110-041401_744869899",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Jan 10, 2016 4:14:01 AM",
      "dateStarted": "Mar 9, 2016 4:12:42 AM",
      "dateFinished": "Mar 9, 2016 4:12:43 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "dateUpdated": "Mar 9, 2016 4:12:13 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1452399241202_1486008097",
      "id": "20160110-041401_662280891",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT"
      },
      "dateCreated": "Jan 10, 2016 4:14:01 AM",
      "dateStarted": "Mar 9, 2016 4:12:43 AM",
      "dateFinished": "Mar 9, 2016 4:12:43 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "TODO: Clustering/05: K-Means Clustering",
  "id": "2B951KEK9",
  "angularObjects": {
    "2BEGD5PKY": [],
    "2BE77VGXX": [],
    "2BCP5RYPW": [],
    "2BE5B7T6C": [],
    "2BDHX9C4U": [],
    "2BFE8ZRKW": [],
    "2BG7XUMST": [],
    "2BEWT9BTQ": [],
    "2BF9JBZN5": [],
    "2BF666AQP": [],
    "2BF7MKGKF": [],
    "2BG2MTBAA": [],
    "2BCR6TSCQ": [],
    "2BFVSJYDM": []
  },
  "config": {
    "looknfeel": "default"
  },
  "info": {}
}