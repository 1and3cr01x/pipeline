{
  "paragraphs": [
    {
      "text": "%md ![Most Desirable Users](http://fluxcapacitor.com/img/shortest-path-by-cost.png)",
      "dateUpdated": "Mar 16, 2016 4:03:22 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "enabled": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451274621785_-2091468050",
      "id": "20151228-035021_708663317",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "Interpreter md not found"
      },
      "dateCreated": "Dec 28, 2015 3:50:21 AM",
      "dateStarted": "Mar 7, 2016 9:50:24 PM",
      "dateFinished": "Mar 7, 2016 9:50:24 PM",
      "status": "ERROR",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import org.apache.spark.graphx.Edge\nimport org.apache.spark.graphx.Graph\n\nval graphDF \u003d sqlContext.read\n  .format(\"com.databricks.spark.csv\")\n  .option(\"header\", \"false\")\n  .load(\"/root/pipeline/datasets/graph/dijkstra.csv\")\n  .toDF(\"userId1\", \"userId2\", \"cost\")\n  \n// Edges has a cost that we\u0027re trying to minimize\nval connectionEdgesRDD \u003d graphDF.map(row \u003d\u003e {\n  Edge(row(0).toString.toLong, row(1).toString.toLong, row(2).toString.toDouble)\n})\n\nval graph \u003d Graph.fromEdges(connectionEdgesRDD, 0L)",
      "dateUpdated": "Mar 16, 2016 4:03:22 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451274763346_-1561452631",
      "id": "20151228-035243_771934602",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "Interpreter null not found"
      },
      "dateCreated": "Dec 28, 2015 3:52:43 AM",
      "dateStarted": "Mar 8, 2016 4:45:40 PM",
      "dateFinished": "Mar 8, 2016 4:45:41 PM",
      "status": "ERROR",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import org.apache.spark.graphx._\r\n\r\nimport scala.reflect.ClassTag\r\n\r\ndef drawGraph[VD:ClassTag,ED:ClassTag](graph:Graph[VD,ED]) \u003d {\r\n  val u \u003d java.util.UUID.randomUUID\r\n  val v \u003d graph.vertices.collect.map(_._1)\r\n  println(\"\"\"%html\r\n\u003cdiv id\u003d\u0027a\"\"\" + u + \"\"\"\u0027 style\u003d\u0027width:960px; height:500px\u0027\u003e\u003c/div\u003e\r\n\u003cstyle\u003e\r\n.node circle { fill: green; }\r\n.node text { font: 10px sans-serif;\r\n             text-anchor: middle;\r\n             fill: white; }\r\nline.link { stroke: red;\r\n            stroke-width: 1.5px; }\r\n\u003c/style\u003e\r\n\u003cscript src\u003d\"//d3js.org/d3.v3.min.js\"\u003e\u003c/script\u003e\r\n\u003cscript\u003e\r\nvar width \u003d 960, height \u003d 500;\r\n\r\nvar svg \u003d d3.select(\"#a\"\"\" + u + \"\"\"\").append(\"svg\")\r\n    .attr(\"width\", width).attr(\"height\", height);\r\n\r\nvar nodes \u003d [\"\"\" + v.map(\"{id:\" + _ + \"}\").mkString(\",\") + \"\"\"];\r\nvar links \u003d [\"\"\" + graph.edges.collect.map(\r\n  e \u003d\u003e \"{source:nodes[\" + v.indexWhere(_ \u003d\u003d e.srcId) + \"],target:nodes[\" +\r\n       v.indexWhere(_ \u003d\u003d e.dstId) + \"]}\").mkString(\",\") + \"\"\"];\r\n\r\nvar link \u003d svg.selectAll(\".link\").data(links);\r\nlink.enter().insert(\"line\", \".node\").attr(\"class\", \"link\");\r\n\r\nvar node \u003d svg.selectAll(\".node\").data(nodes);\r\nvar nodeEnter \u003d node.enter().append(\"g\").attr(\"class\", \"node\")\r\n\r\nnodeEnter.append(\"circle\").attr(\"r\", 30);\r\n\r\nnodeEnter.append(\"text\").attr(\"dy\", \"0.35em\")\r\n         .text(function(d) { return d.id; });\r\n\r\nd3.layout.force().linkDistance(150).charge(-100).chargeDistance(200)\r\n   .friction(0.5).linkStrength(0.4).size([width, height])\r\n   .on(\"tick\", function() {\r\n      link.attr(\"x1\", function(d) { return d.source.x; })\r\n          .attr(\"y1\", function(d) { return d.source.y; })\r\n          .attr(\"x2\", function(d) { return d.target.x; })\r\n          .attr(\"y2\", function(d) { return d.target.y; });\r\n      node.attr(\"transform\", function(d) {\r\n        return \"translate(\" + d.x + \",\" + d.y + \")\";\r\n      });\r\n   }).nodes(nodes).links(links).start();\r\n\u003c/script\u003e\r\n\"\"\")\r\n}\r\n\r\ndrawGraph(graph)",
      "dateUpdated": "Mar 16, 2016 4:03:22 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456948481851_-312470035",
      "id": "20160302-195441_195068162",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "Interpreter null not found"
      },
      "dateCreated": "Mar 2, 2016 7:54:41 PM",
      "dateStarted": "Mar 8, 2016 4:45:47 PM",
      "dateFinished": "Mar 8, 2016 4:45:47 PM",
      "status": "ERROR",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Run Dijkstra on the entire graph From the given source",
      "text": "import com.advancedspark.ml.graph.Dijkstra\n\nval src \u003d 10002\n\nval shortestPathGraph \u003d Dijkstra.run(graph, src)",
      "dateUpdated": "Mar 16, 2016 4:03:35 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1452393064783_1985034596",
      "id": "20160110-023104_1688931389",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "Interpreter null not found"
      },
      "dateCreated": "Jan 10, 2016 2:31:04 AM",
      "dateStarted": "Mar 8, 2016 4:46:23 PM",
      "dateFinished": "Mar 8, 2016 4:46:24 PM",
      "status": "ERROR",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Filter the shortest path for the given destination",
      "text": "val dst \u003d 90002\n\nval shortestPathFromSrcToDest \u003d shortestPathGraph.vertices.filter(_._1 \u003d\u003d dst).map(_._2).collect()(0)._2\n\n// Example:  Shortest Path (Total Cost \u003d\u003d 11)\n//   10002 -5-\u003e 90003 -2-\u003e 10001 -1-\u003e 90001 -3-\u003e 90002",
      "dateUpdated": "Mar 16, 2016 4:03:22 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "enabled": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451401103924_621545220",
      "id": "20151229-145823_414962899",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "Interpreter null not found"
      },
      "dateCreated": "Dec 29, 2015 2:58:23 PM",
      "dateStarted": "Mar 8, 2016 4:46:30 PM",
      "dateFinished": "Mar 8, 2016 4:46:31 PM",
      "status": "ERROR",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "dateUpdated": "Mar 16, 2016 4:03:22 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457387260456_1672967636",
      "id": "20160307-214740_1410509606",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "Interpreter null not found"
      },
      "dateCreated": "Mar 7, 2016 9:47:40 PM",
      "dateStarted": "Mar 7, 2016 9:50:26 PM",
      "dateFinished": "Mar 7, 2016 9:50:27 PM",
      "status": "ERROR",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Graph/03: Shortest Path By Cost (Dijkstra)",
  "id": "2BAFX81J2",
  "angularObjects": {},
  "config": {
    "looknfeel": "default"
  },
  "info": {}
}