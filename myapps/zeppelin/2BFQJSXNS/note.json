{
  "paragraphs": [
    {
      "text": "val membersArray \u003d sqlContext.read\n  .format(\"com.databricks.spark.csv\")\n  .option(\"header\", \"false\") \n  .option(\"inferSchema\", \"true\") \n  .load(\"/\u003clist-of-whatever\u003e\")\n  .select($\"C0\", $\"C8\")\n  .toDF(\"member\", \"memberUrl\")\n  .map(row \u003d\u003e (row.getString(0), row.getString(1)))\n  .collect()",
      "dateUpdated": "May 27, 2016 2:18:03 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460513116915_1708594940",
      "id": "20160413-020516_229951153",
      "dateCreated": "Apr 13, 2016 2:05:16 AM",
      "dateStarted": "May 27, 2016 1:47:33 AM",
      "dateFinished": "May 27, 2016 1:47:34 AM",
      "status": "ERROR",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import org.apache.spark.SparkContext\nimport org.apache.spark.mllib.random.RandomRDDs._\nimport scala.util.Random\n\n// Generate a random double RDD that contains 1 million i.i.d. values drawn from the\n// uniform distribution `N(0.0, 1.0)`, evenly distributed in 10 partitions.\nval u \u003d uniformRDD(sc, 1000000L, 2)\n//val uniformIds \u003d u.collect()\n\n// To transform the distribution in the generated RDD from `U(0.0, 1.0)` to `U(a, b)`, \n//  use uniformIds.map(v \u003d\u003e a + (b - a) * v)`.\nval v \u003d u.map(id \u003d\u003e (0 + 433 * id).toInt).map(id \u003d\u003e id % 30)\nval ids \u003d v.take(1)\n\n// scala.util.Random.nextInt generates an Int between 0 inclusive, \u003cvalue\u003e exclusive\n//val winnersDF \u003d sc.parallelize((0 to 100).map(x \u003d\u003e membersArray(Random.nextInt(433)))).toDF(\"member\", \"memberUrl\")\n\nval winner \u003d sc.parallelize(ids).toDF(\"winner\")\n",
      "dateUpdated": "May 27, 2016 2:56:42 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 370.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "tableHide": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1460512761685_-1001113298",
      "id": "20160413-015921_2053145450",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.SparkContext\nimport org.apache.spark.mllib.random.RandomRDDs._\nimport scala.util.Random\nu: org.apache.spark.rdd.RDD[Double] \u003d RandomRDD[28] at RDD at RandomRDD.scala:38\nv: org.apache.spark.rdd.RDD[Int] \u003d MapPartitionsRDD[30] at map at \u003cconsole\u003e:70\nids: Array[Int] \u003d Array(5)\nwinner: org.apache.spark.sql.DataFrame \u003d [winner: int]\n"
      },
      "dateCreated": "Apr 13, 2016 1:59:21 AM",
      "dateStarted": "May 27, 2016 2:56:42 AM",
      "dateFinished": "May 27, 2016 2:56:44 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "z.show(winner)",
      "dateUpdated": "May 27, 2016 2:56:47 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "winner",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "winner",
              "index": 0.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1464315527230_691296747",
      "id": "20160527-021847_1757368447",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "winner\n5\n"
      },
      "dateCreated": "May 27, 2016 2:18:47 AM",
      "dateStarted": "May 27, 2016 2:56:47 AM",
      "dateFinished": "May 27, 2016 2:56:48 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1464315630931_576411713",
      "id": "20160527-022030_579884781",
      "dateCreated": "May 27, 2016 2:20:30 AM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Statistics/01: Random Numbers",
  "id": "2BFQJSXNS",
  "angularObjects": {
    "2BCMAZYZ5": [],
    "2BDF8WQWY": [],
    "2ARR8UZDJ": [],
    "2AS9P7JSA": [],
    "2AR33ZMZJ": []
  },
  "config": {},
  "info": {}
}