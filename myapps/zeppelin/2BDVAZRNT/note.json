{
  "paragraphs": [
    {
      "title": "Get reference data for enrichment",
      "text": "val itemsDF \u003d sqlContext.read.format(\"json\")\n  .load(\"file:/root/pipeline/html/advancedspark.com/json/software.json\")\n  .as(\"items\")\n\nz.show(itemsDF.select($\"id\", $\"title\", $\"img\", $\"tags\").limit(5))",
      "dateUpdated": "Apr 5, 2016 4:47:14 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 229.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456864493859_1816775810",
      "id": "20160301-203453_435330649",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "id\ttitle\timg\ttags\n1\tApache Cassandra\timg/software/cassandra.png\tWrappedArray(Database, NoSQL, Java, Eventually Consistent, Transactional)\n2\tTachyon\timg/software/tachyon.png\tWrappedArray(Distributed Cache, Object Store, S3, Swift, HDFS)\n3\tApache Ambari\timg/software/ambari.png\tWrappedArray(Cluster Provision, Hadoop, Cluster Monitoring, REST API, Metrics, Alerts)\n4\tDocker\timg/software/docker.png\tWrappedArray(Container, Linux, DevOps, Deployment)\n5\tMicrosft Azure\timg/software/azure.png\tWrappedArray(Cloud Provider, Microsoft)\n"
      },
      "dateCreated": "Mar 1, 2016 8:34:53 PM",
      "dateStarted": "Mar 17, 2016 10:24:32 AM",
      "dateFinished": "Mar 17, 2016 10:24:32 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Get live ratings from cassandra",
      "text": "val cassandraConfig \u003d Map(\"keyspace\" -\u003e \"advancedspark\", \"table\" -\u003e \"item_ratings\")\n\nval itemRatingsDF \u003d sqlContext.read.format(\"org.apache.spark.sql.cassandra\").options(cassandraConfig)\n  .load().toDF(\"userId\", \"itemId\", \"rating\", \"timestamp\")",
      "dateUpdated": "Mar 17, 2016 10:24:39 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456864473360_947045726",
      "id": "20160301-203433_727044271",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "cassandraConfig: scala.collection.immutable.Map[String,String] \u003d Map(keyspace -\u003e advancedspark, table -\u003e item_ratings)\nitemRatingsDF: org.apache.spark.sql.DataFrame \u003d [userId: int, itemId: int, rating: int, timestamp: bigint]\n"
      },
      "dateCreated": "Mar 1, 2016 8:34:33 PM",
      "dateStarted": "Mar 17, 2016 10:24:39 AM",
      "dateFinished": "Mar 17, 2016 10:24:39 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Train the ALS model",
      "text": "import org.apache.spark.ml.recommendation.ALS\n\nval rank \u003d 10\nval maxIterations \u003d 20\nval convergenceThreshold \u003d 0.01\n\nval als \u003d new ALS()\n  .setRank(rank)\n  .setRegParam(convergenceThreshold)\n  .setUserCol(\"userId\")\n  .setItemCol(\"itemId\")\n  .setRatingCol(\"rating\")\n\nval model \u003d als.fit(itemRatingsDF)\n\nmodel.setPredictionCol(\"confidence\")",
      "dateUpdated": "Mar 17, 2016 10:24:45 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456863935152_-1530906280",
      "id": "20160301-202535_1243843765",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.ml.recommendation.ALS\nrank: Int \u003d 10\nmaxIterations: Int \u003d 20\nconvergenceThreshold: Double \u003d 0.01\nals: org.apache.spark.ml.recommendation.ALS \u003d als_7283aa6a00a4\nmodel: org.apache.spark.ml.recommendation.ALSModel \u003d als_7283aa6a00a4\nres348: model.type \u003d als_7283aa6a00a4\n"
      },
      "dateCreated": "Mar 1, 2016 8:25:35 PM",
      "dateStarted": "Mar 17, 2016 10:24:45 AM",
      "dateFinished": "Mar 17, 2016 10:24:47 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Show User Factors generated by ALS Model",
      "text": "val userFactorsDF \u003d model.userFactors\n\nz.show(userFactorsDF.sort($\"id\"))",
      "dateUpdated": "Mar 17, 2016 10:24:59 AM",
      "config": {
        "colWidth": 11.0,
        "graph": {
          "mode": "table",
          "height": 160.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "features",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "features",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456871675606_-1963639723",
      "id": "20160301-223435_324458630",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "id\tfeatures\n737\tWrappedArray(0.061973304, 0.11190858, -0.12978281, 0.0777086, -0.08408595, 0.05610314, 0.088874675, 0.16571788, 0.67555946, 0.14237884)\n2707\tWrappedArray(-0.14065309, -0.22781235, -0.05231712, -0.03700746, 0.14176206, 0.2051035, 0.09436496, 0.17833821, 0.66796464, 0.22139469)\n3428\tWrappedArray(0.03971679, 0.022588717, 0.16206987, 0.20658447, -0.034892526, 0.2703141, 0.3785848, 0.33426708, 0.53340834, -0.1396686)\n5285\tWrappedArray(0.06797677, -0.07114843, 0.05779688, -0.03306026, -0.5963408, 0.17431496, -0.08916646, 0.6528132, 0.3450788, -0.062211238)\n9863\tWrappedArray(-0.024735393, 0.22824378, 0.1653407, 0.1633802, 0.070620015, -0.036308326, 0.115669586, 0.16979732, 0.68858534, 0.014205343)\n11685\tWrappedArray(0.12279157, -0.00977125, -0.029131794, 0.022268308, -0.032603946, 0.10940032, 0.1539865, 0.11643169, 0.6178483, 0.2504731)\n11731\tWrappedArray(0.084786765, 0.043338418, 0.06587246, 0.06042603, -0.09066543, 0.039578307, 0.2224179, 0.14863867, 0.6133525, 0.18869919)\n14934\tWrappedArray(0.07655674, -0.1442838, 0.007100321, 0.005209236, -0.082243636, 0.095037974, 0.14493161, 0.16348884, 0.6365359, 0.16913061)\n15090\tWrappedArray(0.12568654, -0.090636805, -0.09534973, 0.08594647, -0.11790814, 0.07733549, 0.26001254, 0.14405389, 0.57507193, 0.27257133)\n16383\tWrappedArray(0.18889962, -0.2686816, 0.12991191, -0.017436232, -0.21941283, -0.05985065, 0.16593048, 0.13742709, 0.6355214, 0.23325574)\n16487\tWrappedArray(0.11389967, -0.10281242, -0.07079329, 0.113263085, -0.13208835, 0.058358405, 0.2871765, 0.2126377, 0.5820264, 0.21535806)\n21800\tWrappedArray(0.26616797, -0.09887135, -0.15910096, 0.16555077, -0.27002537, 0.07058503, 0.31965545, 0.23436096, 0.58122486, 0.044367686)\n26658\tWrappedArray(0.22486362, -0.11207244, -0.064736106, 0.1509233, -0.09419923, 0.06327348, 0.22825697, 0.3271674, 0.5654922, 0.18716231)\n28045\tWrappedArray(0.11535489, -0.14667223, 0.03537846, -0.165121, -0.021839278, 0.27018625, 0.012813046, 0.07282797, 0.709569, 0.07751163)\n31771\tWrappedArray(0.29870522, 0.1583928, 0.25654092, 0.3336147, 0.09814125, -0.038646173, 0.12481665, -0.1032069, 0.45400202, 0.33594772)\n32725\tWrappedArray(0.10914739, 0.12376483, -0.006781432, -0.0091593135, -0.07144852, 0.070641644, 0.14917105, 0.14303775, 0.58852875, 0.27253252)\n34330\tWrappedArray(0.2536678, -0.0789351, -0.18490982, 0.14799918, -0.30839577, 0.082146555, 0.34059677, 0.2827106, 0.5080256, -0.025116269)\n34473\tWrappedArray(0.073550396, 0.12240582, 0.0032912586, -0.01864913, -0.061608035, 0.09848955, 0.099294744, 0.19123465, 0.5993164, 0.26276243)\n35181\tWrappedArray(0.10766691, 0.15304525, -0.013254909, -0.023144284, -0.069076404, 0.099743456, 0.12934442, 0.14382122, 0.57207304, 0.30375794)\n37014\tWrappedArray(0.0850715, -0.07831941, -0.026142435, 0.0028735278, -0.09196495, 0.09646604, 0.14560929, 0.18021983, 0.6355264, 0.18893303)\n40115\tWrappedArray(0.095342875, -0.12501773, -0.074107185, 0.11765574, -0.11586371, 0.082948886, 0.29586217, 0.1823665, 0.5856689, 0.22479604)\n40927\tWrappedArray(-0.12833235, -0.16986768, -0.05567517, -0.011874834, 0.044818837, 0.21588965, 0.10259387, 0.089697346, 0.6973305, 0.1706761)\n41052\tWrappedArray(0.061956532, 0.09944353, -0.06003539, 4.7285303E-5, 0.0018867076, 0.07394772, 0.06582167, 0.15049751, 0.6389524, 0.2661774)\n48382\tWrappedArray(-0.01627524, -0.0022798334, -0.07174473, -0.09815069, 0.06492294, 0.22074074, 0.07349171, 0.12129089, 0.7274393, 0.086160675)\n48396\tWrappedArray(0.20381768, -0.11696325, 0.070641056, -0.12652479, -0.07270214, 0.23659565, 0.037285093, 0.07163777, 0.69520676, 0.104037516)\n50555\tWrappedArray(0.110883206, -0.08539947, -0.083460666, 0.105036065, -0.09909756, 0.07115537, 0.27279618, 0.23027241, 0.585718, 0.22946537)\n51275\tWrappedArray(0.09403908, -0.0905997, -0.06617904, 0.08823833, -0.09262114, 0.10197219, 0.1847942, 0.16437072, 0.614754, 0.2370741)\n53428\tWrappedArray(0.08565705, 0.046689477, -0.026225949, 7.9522165E-4, -0.043353938, 0.0739241, 0.13911003, 0.15487233, 0.6366177, 0.2248535)\n63907\tWrappedArray(0.12622802, -0.13657108, -0.08085356, 0.09775785, -0.11687585, 0.07134686, 0.27783597, 0.18693727, 0.5801752, 0.23383231)\n64598\tWrappedArray(0.26431292, -0.18978897, -0.022987777, -0.032864608, -0.1517031, -0.089941524, 0.27541673, 0.14524497, 0.5823595, 0.23072688)\n66469\tWrappedArray(0.1153567, -0.21413092, -0.33969036, 0.036310207, -0.097905576, 0.07126761, 0.42888746, -0.058131233, 0.49045223, 0.4462155)\n68401\tWrappedArray(0.079796806, 0.1422079, -0.006317979, 0.16271648, -0.049529, 0.0018936931, 0.13706198, 0.07705515, 0.6837137, 0.17037469)\n68796\tWrappedArray(0.00657293, 0.072028086, -0.048922863, -0.009895237, -0.0931734, 0.012536746, 0.15024114, -0.030993653, 0.68823856, 0.23217931)\n72623\tWrappedArray(0.14921758, -0.107105196, -0.0793718, 0.061734058, -0.1478616, 0.05021527, 0.26386157, 0.19760582, 0.58702666, 0.20344496)\n73890\tWrappedArray(0.12258532, 0.018216277, -0.06951705, 0.012469896, -0.08796937, 0.053166714, 0.12440535, 0.15398079, 0.59637666, 0.28712663)\n77210\tWrappedArray(0.10486911, 2.8945043E-4, -0.061113328, 0.0049526, -0.066440254, 0.07508785, 0.1505711, 0.15285632, 0.6141665, 0.24986911)\n77866\tWrappedArray(0.11467577, -0.015386739, -0.04080718, 0.023754366, -0.06270645, 0.07717196, 0.13473418, 0.14820252, 0.63140243, 0.22683534)\n79233\tWrappedArray(0.234831, -0.23442622, -0.38478333, 0.18507461, -0.25771806, 0.08389222, 0.5473073, 0.02132793, 0.47346348, 0.28586364)\n80249\tWrappedArray(0.076721855, 0.063310936, -0.015560907, -0.017837185, -0.019744907, 0.106986955, 0.13233183, 0.14420964, 0.62355286, 0.24359295)\n84383\tWrappedArray(0.097348996, -0.033126213, -0.06585541, 0.0075778197, -0.05337139, 0.07452255, 0.15124568, 0.1455408, 0.6334437, 0.22871974)\n90265\tWrappedArray(0.0793106, 0.12085092, 0.08370312, 0.042000618, -0.10530541, -0.029044079, 0.22286503, 0.05946114, 0.6319618, 0.18558173)\n92112\tWrappedArray(0.17850524, -0.110605724, -0.09940165, 0.09759896, -0.16602798, 0.05140848, 0.27338356, 0.17151949, 0.5452332, 0.26923752)\n92372\tWrappedArray(-0.08446242, 0.07936786, 0.34718364, 0.15594205, -0.04282439, -4.590334E-4, 0.3570082, -0.078622036, 0.57075423, 0.16260375)\n94237\tWrappedArray(-0.009309907, -0.05961043, -0.007115811, 0.102256596, -0.0073816236, 0.09897195, 0.23120594, 0.053519648, 0.6354781, 0.28742772)\n95937\tWrappedArray(0.18721023, -0.09264701, -0.04106876, 0.14476985, -0.108198695, 0.058436442, 0.25104088, 0.28721288, 0.58373237, 0.17668946)\n96750\tWrappedArray(0.04319771, -0.16815495, -0.07769127, 0.0856129, -0.121337034, 0.08538715, 0.28515416, 0.14620483, 0.60692304, 0.21924938)\n97039\tWrappedArray(0.10938341, -0.36961514, 0.2035028, -0.024206983, -0.22101344, -0.0014420449, 0.058601886, 0.09351319, 0.61191577, 0.19878699)\n"
      },
      "dateCreated": "Mar 1, 2016 10:34:35 PM",
      "dateStarted": "Mar 17, 2016 10:24:59 AM",
      "dateFinished": "Mar 17, 2016 10:25:00 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Show Item Factors Generated by aLS Model",
      "text": "val itemFactorsDF \u003d model.itemFactors\n\nz.show(itemFactorsDF.sort($\"id\"))",
      "dateUpdated": "Mar 17, 2016 10:25:06 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "features",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "features",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456871608058_2084410724",
      "id": "20160301-223328_1552390087",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "id\tfeatures\n1\tWrappedArray(0.4038073, 0.048868567, 0.16017666, 0.26765078, -0.06506688, 0.11897039, 0.32888204, 0.073351875, 1.2069871, 0.50931376)\n2\tWrappedArray(0.2323402, -0.23450224, -0.39989898, 0.20183638, -0.25408304, 0.084251486, 0.5446612, 8.32187E-4, 0.44886112, 0.27627578)\n3\tWrappedArray(0.13200423, -0.25365904, -0.4131202, 0.043177307, -0.114618056, 0.08339922, 0.5167212, -0.08850611, 0.5274259, 0.5326013)\n4\tWrappedArray(0.19923462, -0.035066206, -0.10798021, -0.009981035, -0.06289913, 0.23461914, 0.29195172, 0.2623319, 1.1981208, 0.48096815)\n5\tWrappedArray(-0.07564049, -0.25002298, -0.09031478, 0.10676143, -0.06636836, 0.20713748, 0.40902516, 0.12727785, 1.0897145, 0.44123805)\n6\tWrappedArray(0.35650665, -0.14801231, -0.2766567, 0.23434599, -0.43912977, 0.105196595, 0.48358548, 0.38575813, 0.70236105, -0.037701838)\n7\tWrappedArray(0.18587463, -0.06324998, -0.12574193, 0.014468813, -0.10190539, 0.14229064, 0.288783, 0.27789032, 1.2094744, 0.43670917)\n8\tWrappedArray(0.4617587, -0.325418, -0.035214234, -0.08212501, -0.23390098, -0.20120539, 0.4263764, 0.20496626, 0.84876275, 0.3599902)\n9\tWrappedArray(0.28189674, -0.21901888, -0.17796169, 0.16693097, -0.2635133, 0.12660326, 0.49770957, 0.25028732, 0.94957256, 0.48140097)\n10\tWrappedArray(0.22453304, 0.13202326, -0.06699219, -0.024094319, -0.2131835, 0.15584998, 0.29033676, 0.320432, 1.1570722, 0.5650868)\n11\tWrappedArray(0.26055294, 0.12977006, -0.0754803, -0.017648907, -0.19475639, 0.115113705, 0.32692418, 0.2951191, 1.154725, 0.55390143)\n12\tWrappedArray(0.24303287, 0.103425324, -0.08414119, -0.034127228, -0.19624913, 0.19935636, 0.2954806, 0.28461012, 1.1636691, 0.56164324)\n13\tWrappedArray(0.22814262, 0.1762605, -0.097261794, -0.018745579, -0.18559913, 0.18956828, 0.3387294, 0.324111, 1.1262194, 0.6080033)\n14\tWrappedArray(0.25722617, 0.11151881, -0.079426825, -0.03034021, -0.16810474, 0.11744311, 0.3086983, 0.31917763, 1.1600617, 0.5491309)\n15\tWrappedArray(0.18958046, -0.19677849, -0.13579229, 0.21788165, -0.2437036, 0.08012161, 0.512177, 0.3928996, 0.9462122, 0.376291)\n16\tWrappedArray(0.23771703, 0.15405686, -0.12090251, 0.005631792, -0.16647485, 0.1682063, 0.29550853, 0.334907, 1.1349607, 0.5862707)\n17\tWrappedArray(0.26298162, 0.15303645, -0.063734256, -0.073755056, -0.1423397, 0.13750531, 0.31512508, 0.3011758, 1.1823547, 0.52446085)\n18\tWrappedArray(0.3748317, 0.18508315, 0.08940797, 0.20839879, -0.06689243, 0.078392096, 0.31710395, 0.18046774, 1.1796048, 0.6274589)\n19\tWrappedArray(0.2847283, 0.3136573, 0.15938449, 0.14449495, 0.040783256, 0.13932341, 0.24611448, 0.04332798, 1.1160784, 0.7410312)\n20\tWrappedArray(0.16804458, -0.05709807, 0.055938557, -0.045667734, -0.2008425, 0.12467988, 0.17712381, 0.32179606, 1.249666, 0.4941079)\n21\tWrappedArray(0.15411223, 0.2656398, 0.07845916, 0.07967078, -0.10847743, 0.27797255, 0.4079783, 0.3952858, 1.202926, 0.36970899)\n22\tWrappedArray(0.031877834, 0.01250288, 0.21816823, 0.32083622, -0.034157924, 0.37908515, 0.5322716, 0.47387272, 0.6974447, -0.24583808)\n25\tWrappedArray(0.24250549, 0.038494393, -0.11897664, 0.021967461, -0.14347717, 0.09449189, 0.17960246, 0.34582207, 1.1795869, 0.52681726)\n27\tWrappedArray(0.15980424, 0.39488286, -0.013468463, -0.1144732, -0.11838633, 0.2379283, 0.16884404, 0.35718974, 1.0835043, 0.60009885)\n28\tWrappedArray(0.24011432, 0.13628279, -0.0040405695, -0.05979195, -0.17593688, 0.14478077, 0.3227421, 0.34602404, 1.1739568, 0.54708564)\n29\tWrappedArray(-0.038073994, 0.063107945, -0.1340448, -0.19566706, 0.14698514, 0.34247097, 0.11635073, 0.14183404, 1.1292474, 0.09768239)\n31\tWrappedArray(0.44501764, 0.25836578, 0.43634102, 0.5350347, 0.19389723, -0.06997554, 0.1568692, -0.22082677, 0.59608895, 0.49447963)\n33\tWrappedArray(0.22689144, 0.2349347, -0.05692656, -0.023104303, -0.20225732, 0.1891351, 0.3587074, 0.23514351, 1.1207049, 0.59919804)\n34\tWrappedArray(0.42634377, -0.34890038, 0.024060396, -0.06742811, -0.2633168, -0.18568443, 0.38323608, 0.20640433, 0.86522216, 0.35849667)\n35\tWrappedArray(0.06434188, -0.06679964, -0.05154477, -0.24432406, 0.075869665, 0.40353295, 0.06927006, 0.12815738, 1.1347723, 0.09334791)\n36\tWrappedArray(0.25056052, -0.13918449, -0.07777268, 0.01928924, -0.04479767, 0.27654904, 0.26561716, 0.38654968, 1.171779, 0.2321038)\n37\tWrappedArray(-0.16628689, -0.13277218, -0.10670071, -0.10909797, 0.13907036, 0.35660428, 0.13485077, 0.16618171, 1.1266341, 0.18607421)\n38\tWrappedArray(0.28380167, -0.25446042, -0.16650723, 0.14102076, -0.28628585, 0.0653951, 0.5133369, 0.35573527, 0.9715526, 0.32053426)\n39\tWrappedArray(-0.011713616, -0.47713357, 0.14554796, -0.086653866, -0.109938115, 0.26081148, 0.08901657, 0.16368036, 1.12478, 0.2680419)\n40\tWrappedArray(0.14531168, -0.27386382, 0.013477057, 0.009887605, -0.15610592, 0.18039075, 0.27509344, 0.31031674, 1.2082032, 0.32102534)\n41\tWrappedArray(-0.0067252936, 0.0034394441, 0.057242755, 0.25571936, -0.03705204, 0.15939172, 0.41841987, 0.3519709, 1.2187244, 0.207003)\n42\tWrappedArray(0.21341729, -0.0020930853, -0.16279931, 0.03617521, -0.17398655, 0.09909652, 0.2719884, 0.273016, 1.160602, 0.55439657)\n43\tWrappedArray(0.19987935, -0.53594667, 0.31684357, -0.016444521, -0.3615234, -0.05316338, 0.10358733, 0.14229397, 0.86290604, 0.29460743)\n44\tWrappedArray(0.09136908, -0.111059986, 0.23894437, 0.119771376, -0.11019463, 0.12556338, 0.42364123, 0.2575421, 1.2793025, 0.24074619)\n47\tWrappedArray(0.41272643, 0.19661015, 0.09677939, 0.19447044, -0.10992309, 0.07320702, 0.34073964, 0.13103352, 1.1298107, 0.67334574)\n48\tWrappedArray(0.11160464, 0.28060007, -0.1963315, 0.17655784, -0.13957551, 0.0433559, 0.122528836, 0.22233574, 1.1751385, 0.24216698)\n49\tWrappedArray(0.25149468, 0.17878732, -0.11185255, 0.0143623995, -0.24133113, 0.21474366, 0.3639604, 0.41520476, 1.1798742, 0.41168475)\n50\tWrappedArray(-0.075996816, 0.40608892, 0.28787416, 0.25489894, 0.12810656, -0.11106502, 0.1486279, 0.2747892, 1.0110109, -0.06556134)\n51\tWrappedArray(0.25120777, 0.16458964, -0.018763784, -0.07063632, -0.15790017, 0.10626741, 0.3510216, 0.2708364, 1.1729975, 0.5597311)\n52\tWrappedArray(0.10968956, 0.20150286, 0.056090582, 0.06756281, -0.05260511, 0.15833043, 0.27389064, 0.48227078, 1.2026709, 0.34845582)\n53\tWrappedArray(0.15605511, 0.35487995, 0.38377282, 0.4377799, 0.058603395, -0.07619623, 0.31378967, -0.030851988, 1.0733966, 0.3400178)\n54\tWrappedArray(0.12387769, 0.37501696, 0.071970925, -0.023153001, -0.059627622, 0.16022253, 0.23512802, 0.33356893, 1.2011176, 0.4462537)\n56\tWrappedArray(0.32860872, -0.20648758, -0.1907159, 0.20894755, -0.33636478, 0.08777333, 0.5086864, 0.3769778, 0.89690363, 0.35244957)\n57\tWrappedArray(0.067597814, -0.07089791, 0.06542934, -0.03478048, -0.6252167, 0.17529875, -0.10480916, 0.67846215, 0.32178918, -0.07660136)\n59\tWrappedArray(0.09597651, 0.09079053, 0.23286504, 0.23594399, -0.15466745, -0.014213214, 0.50195277, 0.25833347, 1.1807437, 0.2983553)\n60\tWrappedArray(-0.072308905, 0.16614024, 0.13980432, 0.094946116, -0.0037508288, 0.10660824, 0.3473388, 0.16177163, 1.2868795, 0.44387987)\n61\tWrappedArray(0.12874307, -0.13127016, -0.07998714, -0.017255075, -0.36253262, 0.2835658, 0.21551429, 0.5388442, 1.1624087, 0.23315516)\n62\tWrappedArray(0.22116259, -0.06381214, -0.24542405, 0.17561239, -0.26935384, 0.14732409, 0.36897606, 0.31495044, 1.1209854, 0.30670634)\n63\tWrappedArray(0.0889323, -0.2650209, -0.12402319, 0.13937448, -0.08528102, 0.20419122, 0.3737745, 0.33447877, 1.0841786, 0.4265695)\n64\tWrappedArray(0.027084572, 0.327705, -0.0404317, 0.052828256, 0.07473272, 0.083732106, 0.089506075, 0.31762087, 1.2342205, 0.29482162)\n65\tWrappedArray(0.0014327542, 0.12395293, -0.135153, -0.062020447, -0.1978511, 2.0361376E-4, 0.20129043, -0.16570446, 1.14801, 0.39739835)\n67\tWrappedArray(-0.25714436, -0.3618403, -0.049707014, -0.05746627, 0.25971204, 0.28854617, 0.12343157, 0.28492823, 0.9117067, 0.31190622)\n68\tWrappedArray(0.067597814, -0.07089791, 0.06542934, -0.03478048, -0.6252167, 0.17529875, -0.10480916, 0.67846215, 0.32178918, -0.07660136)\n69\tWrappedArray(0.35770294, -0.16684566, -0.07512859, 0.28088042, -0.16239478, 0.06386902, 0.39190018, 0.5234792, 0.8655357, 0.30035627)\n70\tWrappedArray(-0.009662418, 0.2743587, 0.22046414, 0.12171406, -0.12875827, -0.06614921, 0.38427588, 0.0034275658, 1.2198352, 0.2808278)\n71\tWrappedArray(-0.1790019, 0.16874185, 0.5466209, 0.2343738, -0.07937704, -0.033560857, 0.5704229, -0.16938971, 0.78840834, 0.24833363)\n73\tWrappedArray(0.08460451, 0.27274448, -0.16467728, -0.06342698, 0.075976335, 0.14173692, 0.021924838, 0.31830594, 1.1274053, 0.5375528)\n74\tWrappedArray(0.23466589, 0.1452027, -0.032480538, -0.053822376, -0.16258518, 0.13493633, 0.30733147, 0.31375834, 1.171247, 0.5795765)\n75\tWrappedArray(0.20054579, -0.21851511, -0.14795606, 0.17728017, -0.18801251, 0.1282825, 0.4923959, 0.3063084, 0.9707651, 0.45649195)\n76\tWrappedArray(0.2166732, 0.4715007, -3.886464E-4, -0.122225806, -0.1732982, 0.2508456, 0.2608211, 0.2749642, 1.0051292, 0.6438641)\n77\tWrappedArray(0.18995604, 0.17344527, -0.110653035, -0.016959628, -0.13033116, 0.24119203, 0.2994665, 0.27071232, 1.1620458, 0.5538188)\n79\tWrappedArray(0.096158326, 0.2503853, -0.27926296, 0.106772006, -0.1611824, 0.08620185, 0.08544676, 0.27875364, 1.1646967, 0.2169557)\n80\tWrappedArray(0.29632965, -0.21694346, 0.10399984, -0.25100666, -0.0882518, 0.4165357, 0.022495408, 0.104578234, 1.0367602, 0.11363062)\n81\tWrappedArray(0.15729046, 0.38563114, -0.05443087, -0.079252735, -0.14029725, 0.22049022, 0.16768588, 0.3495708, 1.1166896, 0.54749334)\n"
      },
      "dateCreated": "Mar 1, 2016 10:33:28 PM",
      "dateStarted": "Mar 17, 2016 10:25:06 AM",
      "dateFinished": "Mar 17, 2016 10:25:07 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "convert ALS item factors into K-Means Feature vectors",
      "text": "import org.apache.spark.mllib.linalg.Vectors\nimport org.apache.spark.sql.Row\n\nval itemFeatureVectorsDF \u003d model.itemFactors.map(row \u003d\u003e (row.getInt(0), row.getSeq[Float](1)))\n  .mapValues(row \u003d\u003e Vectors.dense(row(2)))\n  .toDF(\"id\", \"features\")\n  .as(\"itemFeatureVectors\")",
      "dateUpdated": "Mar 17, 2016 10:25:14 AM",
      "config": {
        "colWidth": 11.0,
        "graph": {
          "mode": "table",
          "height": 275.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456864598644_-707623020",
      "id": "20160301-203638_1668523129",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.mllib.linalg.Vectors\nimport org.apache.spark.sql.Row\nitemFeatureVectorsDF: org.apache.spark.sql.DataFrame \u003d [id: int, features: vector]\n"
      },
      "dateCreated": "Mar 1, 2016 8:36:38 PM",
      "dateStarted": "Mar 17, 2016 10:25:14 AM",
      "dateFinished": "Mar 17, 2016 10:25:14 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Enrich the Item feature vectors for display purposes",
      "text": "val enrichedItemFeatureVectorsDF \u003d itemFeatureVectorsDF\n  .join(itemsDF, $\"itemFeatureVectors.id\" \u003d\u003d\u003d $\"items.id\")\n  .select($\"items.id\", $\"title\", $\"category\", $\"features\", $\"tags\")\n  .sort($\"items.id\")\n  .as(\"enrichedItemFeatureVectors\")\n\nz.show(enrichedItemFeatureVectorsDF)",
      "dateUpdated": "Mar 17, 2016 10:25:21 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456872339856_-283274355",
      "id": "20160301-224539_90254018",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "id\ttitle\tcategory\tfeatures\ttags\n1\tApache Cassandra\tDatabase\t[0.16017666459083557]\tWrappedArray(Database, NoSQL, Java, Eventually Consistent, Transactional)\n2\tTachyon\tDistributed Cache\t[-0.3998989760875702]\tWrappedArray(Distributed Cache, Object Store, S3, Swift, HDFS)\n3\tApache Ambari\tCluster Provision\t[-0.41312021017074585]\tWrappedArray(Cluster Provision, Hadoop, Cluster Monitoring, REST API, Metrics, Alerts)\n4\tDocker\tContainer\t[-0.10798020660877228]\tWrappedArray(Container, Linux, DevOps, Deployment)\n5\tMicrosft Azure\tCloud Provider\t[-0.09031478315591812]\tWrappedArray(Cloud Provider, Microsoft)\n6\tApache Flink\tData Processing\t[-0.2766566872596741]\tWrappedArray(Data Processing, Java, Scala, SQL, DataFrame, Table, Streaming Analytics, Batch Analytics, Machine Learning, Graph Analytics, Approximations, Sampling)\n7\tApache Spark\tData Processing\t[-0.12574192881584167]\tWrappedArray(Data Processing, Java, Scala, SQL, R, Python, DataFrame, Table, DataStream, Streaming Analytics, Batch Analytics, Machine Learning, Graph Analytics, Approximations, Sampling, Lazy)\n8\tApache Flume\tLibrary\t[-0.03521423414349556]\tWrappedArray(Library, Java, Log Collection)\n9\tApache Giraph\tLibrary\t[-0.17796169221401215]\tWrappedArray(Library, Java, Graph Analytics, Batch)\n10\tApache HDFS\tFile System\t[-0.06699219346046448]\tWrappedArray(File System, Hadoop, Java)\n11\tApache YARN\tCluster Resource Manager\t[-0.07548029720783234]\tWrappedArray(Cluster Resource Manager, Hadoop, Java)\n12\tApache HBase\tDatabase\t[-0.08414118736982346]\tWrappedArray(Database, Hadoop, NoSQL, Java, Eventually Consistent)\n13\tApache MapReduce\tData Processing\t[-0.09726179391145706]\tWrappedArray(Data Processing, Hadoop, Java, Python)\n14\tApache Hive\tData Processing\t[-0.0794268250465393]\tWrappedArray(Data Processing, Hadoop, HiveQL, SQL, Query Processing, Java, MapReduce)\n15\tHortonworks\tDistribution\t[-0.13579228520393372]\tWrappedArray(Distribution, Hadoop, Spark, Kafka)\n16\tApache HUE\tUI\t[-0.12090250849723816]\tWrappedArray(UI, Hadoop, Cloudera, Ad Hoc, HiveQL, SQL, Data Import, Java)\n17\tApache Impala\tData Processing\t[-0.0637342557311058]\tWrappedArray(Data Processing, Query Processing, SQL, C++, Batch Analytics)\n18\tApache Kafka\tMessage Broker\t[0.08940797299146652]\tWrappedArray(Message Broker, Java, C++, REST API, Messaging, Publish Subscribe, Producer Consumer)\n19\tApache Lucene\tLibrary\t[0.15938448905944824]\tWrappedArray(Library, Search, Java, Python)\n20\tApache Solr\tSearch Engine\t[0.05593855679035187]\tWrappedArray(Search Engine, Java, REST API, UI, Python, Ruby, XML, JSON)\n21\tElasticSearch\tSearch Engine\t[0.07845915853977203]\tWrappedArray(Search Engine, Java, Python, REST API, Lucene, XML, JSON, Aggregations)\n22\tApache Mahout\tLibrary\t[0.2181682288646698]\tWrappedArray(Library, Machine Learning, Java)\n25\tApache Parquet\tFile Format\t[-0.1189766377210617]\tWrappedArray(File Format, Columnar, Compression, Evolving Schema, Nested Schema, Java, C++, Python)\n27\tApache Pig\tData Processing\t[-0.013468462973833084]\tWrappedArray(Data Processing, Hadoop, HiveQL, SQL, Query Processing, Java, Lazy)\n28\tApache ZooKeeper\tDistributed Coordinator\t[-0.00404056953266263]\tWrappedArray(Distribured Coordinator, Paxos, RAFT, Hadoop, HiveQL, SQL, Query Processing, Java, Lazy)\n29\tStanford CoreNLP\tLibrary\t[-0.1340447962284088]\tWrappedArray(Library, NLP, Java, Text Analytics)\n31\tApache Storm\tStreaming\t[0.4363410174846649]\tWrappedArray(Streaming, Java)\n33\tApache Oozie\tWorkflow\t[-0.056926559656858444]\tWrappedArray(Workflow, Hadoop, Java, UI)\n34\tApache Nifi\tWorkflow\t[0.02406039647758007]\tWrappedArray(Workflow, Streaming, Message Broker, Java, UI)\n35\tNLTK\tLibrary\t[-0.05154477059841156]\tWrappedArray(Library, NLP, Python, Text Analytics)\n36\tSci-Kit Learn\tLibrary\t[-0.07777267694473267]\tWrappedArray(Library, Python, Machine Learning)\n37\tiPython/Jupyter\tNotebook\t[-0.10670071095228195]\tWrappedArray(Notebook, Python, Java, Scala, R, Visualization, SQL)\n38\tApache Zeppelin\tNotebook\t[-0.16650722920894623]\tWrappedArray(Notebook, Python, Java, Scala, R, HiveQL, Cassandra, Visualization, SQL)\n39\tTableau\tBI\t[0.14554795622825623]\tWrappedArray(BI, UI, Visualization, SQL)\n40\tR\tProgramming Language\t[0.013477057218551636]\tWrappedArray(Programming Language, Dynamic Typing, Interpreted)\n41\tSQL\tProgramming Language\t[0.057242754846811295]\tWrappedArray(Programming Language, SQL, RDBMS, Interpreted)\n42\tScala\tProgramming Language\t[-0.16279931366443634]\tWrappedArray(Programming Language, Functional, Java, Static Typing, Compiled)\n43\tJava\tProgramming Language\t[0.31684356927871704]\tWrappedArray(Programming Language, Object Oriented, Java, Static Typing, Compiled)\n44\tPython\tProgramming Language\t[0.23894436657428741]\tWrappedArray(Programming Language, Dynamic Typing, Interpreted)\n47\tCloudera\tDistribution\t[0.09677939116954803]\tWrappedArray(Distribution, Hadoop, Spark, Kafka)\n48\tIBM BigInsights\tDistribution\t[-0.19633150100708008]\tWrappedArray(Distribution, Hadoop, Spark, Kafka)\n49\tAmazon Web Services\tCloud Provider\t[-0.11185254901647568]\tWrappedArray(Cloud Provider, AWS)\n50\tGoogle Cloud Platform\tCloud Provider\t[0.28787416219711304]\tWrappedArray(Cloud Provider, Google)\n51\tRedis\tDistributed Cache\t[-0.01876378431916237]\tWrappedArray(Distributed Cache, Key Value Store, HyperLogLog, Approximations, Probabilistic Data Structures, UDAF)\n52\tJSON\tFile Format\t[0.0560905821621418]\tWrappedArray(File Format, Key Value Store)\n53\tXML\tFile Format\t[0.3837728202342987]\tWrappedArray(File Format, Key Value Store)\n54\tMongoDB\tDatabase\t[0.07197092473506927]\tWrappedArray(Database, Document Store, Key Value Store, NoSQL, JSON, Eventually Consistent)\n56\tMicroStrategy\tBI\t[-0.19071589410305023]\tWrappedArray(BI, UI, Visualization, SQL)\n57\tKnime\tWorkflow\t[0.06542933732271194]\tWrappedArray(Workflow, UI, Machine Learning, Graph Processing, Visualization)\n59\tOracle\tDatabase\t[0.23286503553390503]\tWrappedArray(Database, SQL, RDBMS, Transactional)\n60\tMySQL\tDatabase\t[0.13980431854724884]\tWrappedArray(Database, SQL, RDBMS, Transactional)\n61\tSpark ML/MLlib\tLibrary\t[-0.07998713850975037]\tWrappedArray(Library, Spark, Machine Learning)\n62\tSpark Streaming\tLibrary\t[-0.2454240471124649]\tWrappedArray(Library, Spark, Streaming)\n63\tSpark SQL\tLibrary\t[-0.1240231916308403]\tWrappedArray(Library, Spark, HiveQL, SQL)\n64\tCSV\tFile Format\t[-0.04043170064687729]\tWrappedArray(File Format)\n65\tDeep Learning 4J\tLibrary\t[-0.13515299558639526]\tWrappedArray(Library, Deep Learning, Neural Networks)\n67\tKinesis\tLibrary\t[-0.04970701411366463]\tWrappedArray(Library, Streaming, AWS)\n68\tDynamoDB\tDatabase\t[0.06542933732271194]\tWrappedArray(Database, NoSQL, AWS, SQL, Approximations, Eventually Consistent)\n69\tSpark GraphX\tLibrary\t[-0.07512859255075455]\tWrappedArray(Library, Graph Analytics, Spark)\n70\tSQL Server\tDatabase\t[0.22046414017677307]\tWrappedArray(Database, SQL, Microsoft, RDBMS, Transactional)\n71\tElastic MapReduce\tData Processing\t[0.5466209053993225]\tWrappedArray(Data Processing, MapReduce, Spark, HiveQL, Pig, AWS, Presto)\n73\tMemcached\tDistributed Cache\t[-0.16467727720737457]\tWrappedArray(Distributed Cache, Key Value Store, Java, Python, C++)\n74\tNeo4j\tLibrary\t[-0.03248053789138794]\tWrappedArray(Library, Graph Analytics, Java)\n75\tPostgres\tDatabase\t[-0.14795605838298798]\tWrappedArray(Database, SQL, RDBMS, Transactional)\n76\tProtobuffers\tFile Format\t[-3.886464110109955E-4]\tWrappedArray(File Format, Evolving Schema, Nested Schema)\n77\tS3\tFile System\t[-0.11065303534269333]\tWrappedArray(File System, Object Store, AWS, Eventually Consistent)\n79\tTitan GraphDB\tDatabase\t[-0.2792629599571228]\tWrappedArray(Database, Graph, Graph Analytics, Java, Transactional)\n80\tTeradata\tDatabase\t[0.10399983823299408]\tWrappedArray(Database, Data Warehouse, SQL)\n81\tVertica\tDatabase\t[-0.05443086847662926]\tWrappedArray(Database, Data Warehouse, SQL)\n"
      },
      "dateCreated": "Mar 1, 2016 10:45:39 PM",
      "dateStarted": "Mar 17, 2016 10:25:21 AM",
      "dateFinished": "Mar 17, 2016 10:25:21 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Train K-Means Cluster Model",
      "text": "import org.apache.spark.ml.clustering.KMeans\n\nval kmeans \u003d new KMeans()\n  .setK(5)\n  .setMaxIter(10)\n  .setFeaturesCol(\"features\")\n  .setPredictionCol(\"clusterId\")\n\nval kmeansModel \u003d kmeans.fit(itemFeatureVectorsDF)",
      "dateUpdated": "Mar 17, 2016 10:25:39 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456869576746_-1994222589",
      "id": "20160301-215936_103816347",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.ml.clustering.KMeans\nkmeans: org.apache.spark.ml.clustering.KMeans \u003d kmeans_2b9cb123d9a6\nkmeansModel: org.apache.spark.ml.clustering.KMeansModel \u003d kmeans_2b9cb123d9a6\n"
      },
      "dateCreated": "Mar 1, 2016 9:59:36 PM",
      "dateStarted": "Mar 17, 2016 10:25:39 AM",
      "dateFinished": "Mar 17, 2016 10:25:40 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Show cluster centers",
      "text": "val clusterCenters \u003d kmeansModel.clusterCenters.mkString(\"\\n\")",
      "dateUpdated": "Mar 17, 2016 10:25:46 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457234151390_-820318732",
      "id": "20160306-031551_1012691012",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "clusterCenters: String \u003d \n[-0.10427843545164381]\n[0.45557824770609534]\n[0.04635149028581509]\n[-0.3228725761175156]\n[0.21200729310512545]\n"
      },
      "dateCreated": "Mar 6, 2016 3:15:51 AM",
      "dateStarted": "Mar 17, 2016 10:25:46 AM",
      "dateFinished": "Mar 17, 2016 10:25:46 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Evaluate K-Means Cluster Model Using Within Set Sum of Squared Errors (WSSSE)",
      "text": "val WSSSE \u003d kmeansModel.computeCost(itemFeatureVectorsDF)\n\nprintln(\"Within Set Sum of Squared Errors \u003d \" + WSSSE)",
      "dateUpdated": "Mar 17, 2016 10:25:53 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456863935154_-1530136782",
      "id": "20160301-202535_1236869408",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "WSSSE: Double \u003d 0.16587191675706386\nWithin Set Sum of Squared Errors \u003d 0.16587191675706386\n"
      },
      "dateCreated": "Mar 1, 2016 8:25:35 PM",
      "dateStarted": "Mar 17, 2016 10:25:53 AM",
      "dateFinished": "Mar 17, 2016 10:25:53 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "analyze the Clusters",
      "text": "val enrichedClusteredItems \u003d kmeansModel.transform(itemFeatureVectorsDF)\n  .select($\"id\" as \"itemId\", $\"features\", $\"clusterId\")\n  .join(enrichedItemFeatureVectorsDF, $\"itemId\" \u003d\u003d\u003d $\"enrichedItemFeatureVectors.id\")\n  .select($\"clusterId\", $\"itemId\", $\"title\", $\"category\", $\"tags\")\n  .sort($\"clusterId\", $\"itemId\")\n  \nz.show(enrichedClusteredItems)",
      "dateUpdated": "Apr 5, 2016 4:46:46 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "graph": {
          "mode": "multiBarChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "clusterId",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "itemId",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "clusterId",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "itemId",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456863935154_-1530136782",
      "id": "20160301-202535_504888221",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "clusterId\titemId\ttitle\tcategory\ttags\n0\t4\tDocker\tContainer\tWrappedArray(Container, Linux, DevOps, Deployment)\n0\t5\tMicrosft Azure\tCloud Provider\tWrappedArray(Cloud Provider, Microsoft)\n0\t7\tApache Spark\tData Processing\tWrappedArray(Data Processing, Java, Scala, SQL, R, Python, DataFrame, Table, DataStream, Streaming Analytics, Batch Analytics, Machine Learning, Graph Analytics, Approximations, Sampling, Lazy)\n0\t8\tApache Flume\tLibrary\tWrappedArray(Library, Java, Log Collection)\n0\t9\tApache Giraph\tLibrary\tWrappedArray(Library, Java, Graph Analytics, Batch)\n0\t10\tApache HDFS\tFile System\tWrappedArray(File System, Hadoop, Java)\n0\t11\tApache YARN\tCluster Resource Manager\tWrappedArray(Cluster Resource Manager, Hadoop, Java)\n0\t12\tApache HBase\tDatabase\tWrappedArray(Database, Hadoop, NoSQL, Java, Eventually Consistent)\n0\t13\tApache MapReduce\tData Processing\tWrappedArray(Data Processing, Hadoop, Java, Python)\n0\t14\tApache Hive\tData Processing\tWrappedArray(Data Processing, Hadoop, HiveQL, SQL, Query Processing, Java, MapReduce)\n0\t15\tHortonworks\tDistribution\tWrappedArray(Distribution, Hadoop, Spark, Kafka)\n0\t16\tApache HUE\tUI\tWrappedArray(UI, Hadoop, Cloudera, Ad Hoc, HiveQL, SQL, Data Import, Java)\n0\t17\tApache Impala\tData Processing\tWrappedArray(Data Processing, Query Processing, SQL, C++, Batch Analytics)\n0\t25\tApache Parquet\tFile Format\tWrappedArray(File Format, Columnar, Compression, Evolving Schema, Nested Schema, Java, C++, Python)\n0\t29\tStanford CoreNLP\tLibrary\tWrappedArray(Library, NLP, Java, Text Analytics)\n0\t33\tApache Oozie\tWorkflow\tWrappedArray(Workflow, Hadoop, Java, UI)\n0\t35\tNLTK\tLibrary\tWrappedArray(Library, NLP, Python, Text Analytics)\n0\t36\tSci-Kit Learn\tLibrary\tWrappedArray(Library, Python, Machine Learning)\n0\t37\tiPython/Jupyter\tNotebook\tWrappedArray(Notebook, Python, Java, Scala, R, Visualization, SQL)\n0\t38\tApache Zeppelin\tNotebook\tWrappedArray(Notebook, Python, Java, Scala, R, HiveQL, Cassandra, Visualization, SQL)\n0\t42\tScala\tProgramming Language\tWrappedArray(Programming Language, Functional, Java, Static Typing, Compiled)\n0\t48\tIBM BigInsights\tDistribution\tWrappedArray(Distribution, Hadoop, Spark, Kafka)\n0\t49\tAmazon Web Services\tCloud Provider\tWrappedArray(Cloud Provider, AWS)\n0\t56\tMicroStrategy\tBI\tWrappedArray(BI, UI, Visualization, SQL)\n0\t61\tSpark ML/MLlib\tLibrary\tWrappedArray(Library, Spark, Machine Learning)\n0\t63\tSpark SQL\tLibrary\tWrappedArray(Library, Spark, HiveQL, SQL)\n0\t64\tCSV\tFile Format\tWrappedArray(File Format)\n0\t65\tDeep Learning 4J\tLibrary\tWrappedArray(Library, Deep Learning, Neural Networks)\n0\t67\tKinesis\tLibrary\tWrappedArray(Library, Streaming, AWS)\n0\t69\tSpark GraphX\tLibrary\tWrappedArray(Library, Graph Analytics, Spark)\n0\t73\tMemcached\tDistributed Cache\tWrappedArray(Distributed Cache, Key Value Store, Java, Python, C++)\n0\t74\tNeo4j\tLibrary\tWrappedArray(Library, Graph Analytics, Java)\n0\t75\tPostgres\tDatabase\tWrappedArray(Database, SQL, RDBMS, Transactional)\n0\t77\tS3\tFile System\tWrappedArray(File System, Object Store, AWS, Eventually Consistent)\n0\t81\tVertica\tDatabase\tWrappedArray(Database, Data Warehouse, SQL)\n1\t31\tApache Storm\tStreaming\tWrappedArray(Streaming, Java)\n1\t53\tXML\tFile Format\tWrappedArray(File Format, Key Value Store)\n1\t71\tElastic MapReduce\tData Processing\tWrappedArray(Data Processing, MapReduce, Spark, HiveQL, Pig, AWS, Presto)\n2\t18\tApache Kafka\tMessage Broker\tWrappedArray(Message Broker, Java, C++, REST API, Messaging, Publish Subscribe, Producer Consumer)\n2\t20\tApache Solr\tSearch Engine\tWrappedArray(Search Engine, Java, REST API, UI, Python, Ruby, XML, JSON)\n2\t21\tElasticSearch\tSearch Engine\tWrappedArray(Search Engine, Java, Python, REST API, Lucene, XML, JSON, Aggregations)\n2\t27\tApache Pig\tData Processing\tWrappedArray(Data Processing, Hadoop, HiveQL, SQL, Query Processing, Java, Lazy)\n2\t28\tApache ZooKeeper\tDistributed Coordinator\tWrappedArray(Distribured Coordinator, Paxos, RAFT, Hadoop, HiveQL, SQL, Query Processing, Java, Lazy)\n2\t34\tApache Nifi\tWorkflow\tWrappedArray(Workflow, Streaming, Message Broker, Java, UI)\n2\t40\tR\tProgramming Language\tWrappedArray(Programming Language, Dynamic Typing, Interpreted)\n2\t41\tSQL\tProgramming Language\tWrappedArray(Programming Language, SQL, RDBMS, Interpreted)\n2\t47\tCloudera\tDistribution\tWrappedArray(Distribution, Hadoop, Spark, Kafka)\n2\t51\tRedis\tDistributed Cache\tWrappedArray(Distributed Cache, Key Value Store, HyperLogLog, Approximations, Probabilistic Data Structures, UDAF)\n2\t52\tJSON\tFile Format\tWrappedArray(File Format, Key Value Store)\n2\t54\tMongoDB\tDatabase\tWrappedArray(Database, Document Store, Key Value Store, NoSQL, JSON, Eventually Consistent)\n2\t57\tKnime\tWorkflow\tWrappedArray(Workflow, UI, Machine Learning, Graph Processing, Visualization)\n2\t68\tDynamoDB\tDatabase\tWrappedArray(Database, NoSQL, AWS, SQL, Approximations, Eventually Consistent)\n2\t76\tProtobuffers\tFile Format\tWrappedArray(File Format, Evolving Schema, Nested Schema)\n2\t80\tTeradata\tDatabase\tWrappedArray(Database, Data Warehouse, SQL)\n3\t2\tTachyon\tDistributed Cache\tWrappedArray(Distributed Cache, Object Store, S3, Swift, HDFS)\n3\t3\tApache Ambari\tCluster Provision\tWrappedArray(Cluster Provision, Hadoop, Cluster Monitoring, REST API, Metrics, Alerts)\n3\t6\tApache Flink\tData Processing\tWrappedArray(Data Processing, Java, Scala, SQL, DataFrame, Table, Streaming Analytics, Batch Analytics, Machine Learning, Graph Analytics, Approximations, Sampling)\n3\t62\tSpark Streaming\tLibrary\tWrappedArray(Library, Spark, Streaming)\n3\t79\tTitan GraphDB\tDatabase\tWrappedArray(Database, Graph, Graph Analytics, Java, Transactional)\n4\t1\tApache Cassandra\tDatabase\tWrappedArray(Database, NoSQL, Java, Eventually Consistent, Transactional)\n4\t19\tApache Lucene\tLibrary\tWrappedArray(Library, Search, Java, Python)\n4\t22\tApache Mahout\tLibrary\tWrappedArray(Library, Machine Learning, Java)\n4\t39\tTableau\tBI\tWrappedArray(BI, UI, Visualization, SQL)\n4\t43\tJava\tProgramming Language\tWrappedArray(Programming Language, Object Oriented, Java, Static Typing, Compiled)\n4\t44\tPython\tProgramming Language\tWrappedArray(Programming Language, Dynamic Typing, Interpreted)\n4\t50\tGoogle Cloud Platform\tCloud Provider\tWrappedArray(Cloud Provider, Google)\n4\t59\tOracle\tDatabase\tWrappedArray(Database, SQL, RDBMS, Transactional)\n4\t60\tMySQL\tDatabase\tWrappedArray(Database, SQL, RDBMS, Transactional)\n4\t70\tSQL Server\tDatabase\tWrappedArray(Database, SQL, Microsoft, RDBMS, Transactional)\n"
      },
      "dateCreated": "Mar 1, 2016 8:25:35 PM",
      "dateStarted": "Mar 17, 2016 10:25:59 AM",
      "dateFinished": "Mar 17, 2016 10:26:01 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "",
      "dateUpdated": "Mar 17, 2016 1:21:12 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457495167453_2000814305",
      "id": "20160309-034607_2033288424",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT"
      },
      "dateCreated": "Mar 9, 2016 3:46:07 AM",
      "dateStarted": "Mar 17, 2016 1:21:19 AM",
      "dateFinished": "Mar 17, 2016 1:21:20 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Live Recs/04: Generate Item-to-Item Collab Filtering Cluster Recs (K-Means)",
  "id": "2BDVAZRNT",
  "angularObjects": {
    "2ARR8UZDJ": [],
    "2AS9P7JSA": [],
    "2AR33ZMZJ": []
  },
  "config": {
    "looknfeel": "default"
  },
  "info": {}
}