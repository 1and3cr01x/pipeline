{
  "paragraphs": [
    {
      "title": "Get reference data for enrichment",
      "text": "val itemsDF \u003d sqlContext.read.format(\"json\")\n  .load(\"file:/root/pipeline/html/advancedspark.com/json/software.json\").as(\"items\")\n\nz.show(itemsDF.select($\"id\", $\"title\", $\"img\", $\"tags\").limit(5))",
      "dateUpdated": "Mar 6, 2016 6:56:00 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456864493859_1816775810",
      "id": "20160301-203453_435330649",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "id\ttitle\timg\ttags\n1\tApache Cassandra\timg/software/cassandra.png\tWrappedArray(Database, NoSQL, Java, Eventually Consistent, Transactional)\n2\tTachyon\timg/software/tachyon.png\tWrappedArray(Distributed Cache, Object Store, S3, Swift, HDFS)\n3\tApache Ambari\timg/software/ambari.png\tWrappedArray(Cluster Provision, Hadoop, Cluster Monitoring, REST API, Metrics, Alerts)\n4\tDocker\timg/software/docker.png\tWrappedArray(Container, Linux, DevOps, Deployment)\n5\tMicrosft Azure\timg/software/azure.png\tWrappedArray(Cloud Provider, Microsoft)\n"
      },
      "dateCreated": "Mar 1, 2016 8:34:53 PM",
      "dateStarted": "Mar 6, 2016 6:56:00 AM",
      "dateFinished": "Mar 6, 2016 6:56:00 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Get live ratings from cassandra",
      "text": "val cassandraConfig \u003d Map(\"keyspace\" -\u003e \"advancedspark\", \"table\" -\u003e \"item_ratings\")\n\nval itemRatingsDF \u003d sqlContext.read.format(\"org.apache.spark.sql.cassandra\").options(cassandraConfig)\n  .load().toDF(\"userId\", \"itemId\", \"rating\", \"timestamp\")",
      "dateUpdated": "Mar 6, 2016 6:56:00 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456864473360_947045726",
      "id": "20160301-203433_727044271",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "cassandraConfig: scala.collection.immutable.Map[String,String] \u003d Map(keyspace -\u003e advancedspark, table -\u003e item_ratings)\nitemRatingsDF: org.apache.spark.sql.DataFrame \u003d [userId: int, itemId: int, rating: int, timestamp: bigint]\n"
      },
      "dateCreated": "Mar 1, 2016 8:34:33 PM",
      "dateStarted": "Mar 6, 2016 6:56:00 AM",
      "dateFinished": "Mar 6, 2016 6:56:00 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Train the ALS model",
      "text": "import org.apache.spark.ml.recommendation.ALS\n\nval rank \u003d 10\nval maxIterations \u003d 20\nval convergenceThreshold \u003d 0.01\n\nval als \u003d new ALS()\n  .setRank(rank)\n  .setRegParam(convergenceThreshold)\n  .setUserCol(\"userId\")\n  .setItemCol(\"itemId\")\n  .setRatingCol(\"rating\")\n\nval model \u003d als.fit(itemRatingsDF)\n\nmodel.setPredictionCol(\"confidence\")",
      "dateUpdated": "Mar 6, 2016 6:56:00 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456863935152_-1530906280",
      "id": "20160301-202535_1243843765",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.ml.recommendation.ALS\nrank: Int \u003d 10\nmaxIterations: Int \u003d 20\nconvergenceThreshold: Double \u003d 0.01\nals: org.apache.spark.ml.recommendation.ALS \u003d als_912e270a46d7\nmodel: org.apache.spark.ml.recommendation.ALSModel \u003d als_912e270a46d7\nres256: model.type \u003d als_912e270a46d7\n"
      },
      "dateCreated": "Mar 1, 2016 8:25:35 PM",
      "dateStarted": "Mar 6, 2016 6:56:00 AM",
      "dateFinished": "Mar 6, 2016 6:56:02 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Show User Factors generated by ALS Model",
      "text": "val userFactorsDF \u003d model.userFactors\n\nz.show(userFactorsDF.sort($\"id\"))",
      "dateUpdated": "Mar 6, 2016 6:56:00 AM",
      "config": {
        "colWidth": 11.0,
        "graph": {
          "mode": "table",
          "height": 160.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "features",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "features",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456871675606_-1963639723",
      "id": "20160301-223435_324458630",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "id\tfeatures\n26058\tWrappedArray(-0.061401837, -0.25806394, 0.19176695, 0.39655176, 0.026377007, 0.14880164, 0.23655874, 0.2394148, 0.54132265, -0.53907925)\n33366\tWrappedArray(-0.039138883, -0.017534984, 0.042565644, 0.15436144, 0.21192162, 0.59816664, -0.30811605, 0.13501449, 0.28285158, -0.5577711)\n"
      },
      "dateCreated": "Mar 1, 2016 10:34:35 PM",
      "dateStarted": "Mar 6, 2016 6:56:01 AM",
      "dateFinished": "Mar 6, 2016 6:56:02 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Show Item Factors Generated by aLS Model",
      "text": "val itemFactorsDF \u003d model.itemFactors\n\nz.show(itemFactorsDF.sort($\"id\"))",
      "dateUpdated": "Mar 6, 2016 6:56:00 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "features",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "features",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456871608058_2084410724",
      "id": "20160301-223328_1552390087",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "id\tfeatures\n1\tWrappedArray(-0.039870705, -0.008782871, 0.038439065, 0.15116747, 0.22793894, 0.64044875, -0.34223065, 0.13645197, 0.28429735, -0.5814316)\n2\tWrappedArray(-0.0616511, -0.26266557, 0.19447215, 0.40054145, 0.021765688, 0.13723375, 0.24861693, 0.24081218, 0.54502434, -0.53608876)\n3\tWrappedArray(-0.0616511, -0.26266557, 0.19447215, 0.40054145, 0.021765688, 0.13723375, 0.24861693, 0.24081218, 0.54502434, -0.53608876)\n7\tWrappedArray(-0.039870705, -0.008782871, 0.038439065, 0.15116747, 0.22793894, 0.64044875, -0.34223065, 0.13645197, 0.28429735, -0.5814316)\n8\tWrappedArray(-0.0616511, -0.26266557, 0.19447215, 0.40054145, 0.021765688, 0.13723375, 0.24861693, 0.24081218, 0.54502434, -0.53608876)\n14\tWrappedArray(-0.0640655, -0.16761748, 0.14498372, 0.34569225, 0.16246285, 0.503363, -0.07056796, 0.23763254, 0.5217871, -0.7105763)\n15\tWrappedArray(-0.0616511, -0.26266557, 0.19447215, 0.40054145, 0.021765688, 0.13723375, 0.24861693, 0.24081218, 0.54502434, -0.53608876)\n16\tWrappedArray(-0.0616511, -0.26266557, 0.19447215, 0.40054145, 0.021765688, 0.13723375, 0.24861693, 0.24081218, 0.54502434, -0.53608876)\n18\tWrappedArray(-0.039870705, -0.008782871, 0.038439065, 0.15116747, 0.22793894, 0.64044875, -0.34223065, 0.13645197, 0.28429735, -0.5814316)\n20\tWrappedArray(-0.0616511, -0.26266557, 0.19447215, 0.40054145, 0.021765688, 0.13723375, 0.24861693, 0.24081218, 0.54502434, -0.53608876)\n23\tWrappedArray(-0.0616511, -0.26266557, 0.19447215, 0.40054145, 0.021765688, 0.13723375, 0.24861693, 0.24081218, 0.54502434, -0.53608876)\n29\tWrappedArray(-0.0616511, -0.26266557, 0.19447215, 0.40054145, 0.021765688, 0.13723375, 0.24861693, 0.24081218, 0.54502434, -0.53608876)\n32\tWrappedArray(-0.0616511, -0.26266557, 0.19447215, 0.40054145, 0.021765688, 0.13723375, 0.24861693, 0.24081218, 0.54502434, -0.53608876)\n33\tWrappedArray(-0.0616511, -0.26266557, 0.19447215, 0.40054145, 0.021765688, 0.13723375, 0.24861693, 0.24081218, 0.54502434, -0.53608876)\n34\tWrappedArray(-0.0640655, -0.16761748, 0.14498372, 0.34569225, 0.16246285, 0.503363, -0.07056796, 0.23763254, 0.5217871, -0.7105763)\n35\tWrappedArray(-0.0616511, -0.26266557, 0.19447215, 0.40054145, 0.021765688, 0.13723375, 0.24861693, 0.24081218, 0.54502434, -0.53608876)\n38\tWrappedArray(-0.039870705, -0.008782871, 0.038439065, 0.15116747, 0.22793894, 0.64044875, -0.34223065, 0.13645197, 0.28429735, -0.5814316)\n39\tWrappedArray(-0.0616511, -0.26266557, 0.19447215, 0.40054145, 0.021765688, 0.13723375, 0.24861693, 0.24081218, 0.54502434, -0.53608876)\n41\tWrappedArray(-0.0616511, -0.26266557, 0.19447215, 0.40054145, 0.021765688, 0.13723375, 0.24861693, 0.24081218, 0.54502434, -0.53608876)\n44\tWrappedArray(-0.0616511, -0.26266557, 0.19447215, 0.40054145, 0.021765688, 0.13723375, 0.24861693, 0.24081218, 0.54502434, -0.53608876)\n45\tWrappedArray(-0.0616511, -0.26266557, 0.19447215, 0.40054145, 0.021765688, 0.13723375, 0.24861693, 0.24081218, 0.54502434, -0.53608876)\n46\tWrappedArray(-0.0616511, -0.26266557, 0.19447215, 0.40054145, 0.021765688, 0.13723375, 0.24861693, 0.24081218, 0.54502434, -0.53608876)\n50\tWrappedArray(-0.0616511, -0.26266557, 0.19447215, 0.40054145, 0.021765688, 0.13723375, 0.24861693, 0.24081218, 0.54502434, -0.53608876)\n51\tWrappedArray(-0.0616511, -0.26266557, 0.19447215, 0.40054145, 0.021765688, 0.13723375, 0.24861693, 0.24081218, 0.54502434, -0.53608876)\n52\tWrappedArray(-0.0616511, -0.26266557, 0.19447215, 0.40054145, 0.021765688, 0.13723375, 0.24861693, 0.24081218, 0.54502434, -0.53608876)\n53\tWrappedArray(-0.0616511, -0.26266557, 0.19447215, 0.40054145, 0.021765688, 0.13723375, 0.24861693, 0.24081218, 0.54502434, -0.53608876)\n56\tWrappedArray(-0.0616511, -0.26266557, 0.19447215, 0.40054145, 0.021765688, 0.13723375, 0.24861693, 0.24081218, 0.54502434, -0.53608876)\n57\tWrappedArray(-0.0616511, -0.26266557, 0.19447215, 0.40054145, 0.021765688, 0.13723375, 0.24861693, 0.24081218, 0.54502434, -0.53608876)\n59\tWrappedArray(-0.0616511, -0.26266557, 0.19447215, 0.40054145, 0.021765688, 0.13723375, 0.24861693, 0.24081218, 0.54502434, -0.53608876)\n61\tWrappedArray(-0.039870705, -0.008782871, 0.038439065, 0.15116747, 0.22793894, 0.64044875, -0.34223065, 0.13645197, 0.28429735, -0.5814316)\n62\tWrappedArray(-0.039870705, -0.008782871, 0.038439065, 0.15116747, 0.22793894, 0.64044875, -0.34223065, 0.13645197, 0.28429735, -0.5814316)\n63\tWrappedArray(-0.0640655, -0.16761748, 0.14498372, 0.34569225, 0.16246285, 0.503363, -0.07056796, 0.23763254, 0.5217871, -0.7105763)\n69\tWrappedArray(-0.0616511, -0.26266557, 0.19447215, 0.40054145, 0.021765688, 0.13723375, 0.24861693, 0.24081218, 0.54502434, -0.53608876)\n"
      },
      "dateCreated": "Mar 1, 2016 10:33:28 PM",
      "dateStarted": "Mar 6, 2016 6:56:02 AM",
      "dateFinished": "Mar 6, 2016 6:56:03 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "convert ALS item factors into K-Means Feature vectors",
      "text": "import org.apache.spark.mllib.linalg.Vectors\nimport org.apache.spark.sql.Row\n\nval itemFeatureVectorsDF \u003d model.itemFactors.map(row \u003d\u003e (row.getInt(0), row.getSeq[Float](1)))\n  .mapValues(row \u003d\u003e Vectors.dense(row(2)))\n  .toDF(\"id\", \"features\")\n  .as(\"itemFeatureVectors\")",
      "dateUpdated": "Mar 6, 2016 6:56:00 AM",
      "config": {
        "colWidth": 11.0,
        "graph": {
          "mode": "table",
          "height": 275.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456864598644_-707623020",
      "id": "20160301-203638_1668523129",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.mllib.linalg.Vectors\nimport org.apache.spark.sql.Row\nitemFeatureVectorsDF: org.apache.spark.sql.DataFrame \u003d [id: int, features: vector]\n"
      },
      "dateCreated": "Mar 1, 2016 8:36:38 PM",
      "dateStarted": "Mar 6, 2016 6:56:03 AM",
      "dateFinished": "Mar 6, 2016 6:56:03 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Enrich the Item feature vectors for display purposes",
      "text": "val enrichedItemFeatureVectorsDF \u003d itemFeatureVectorsDF\n  .join(itemsDF, $\"itemFeatureVectors.id\" \u003d\u003d\u003d $\"items.id\")\n  .select($\"items.id\", $\"title\", $\"category\", $\"features\", $\"tags\")\n  .sort($\"items.id\")\n\nz.show(enrichedItemFeatureVectorsDF)",
      "dateUpdated": "Mar 6, 2016 6:56:00 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456872339856_-283274355",
      "id": "20160301-224539_90254018",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "id\ttitle\tcategory\tfeatures\ttags\n1\tApache Cassandra\tDatabase\t[0.0384390652179718]\tWrappedArray(Database, NoSQL, Java, Eventually Consistent, Transactional)\n2\tTachyon\tDistributed Cache\t[0.19447214901447296]\tWrappedArray(Distributed Cache, Object Store, S3, Swift, HDFS)\n3\tApache Ambari\tCluster Provision\t[0.19447214901447296]\tWrappedArray(Cluster Provision, Hadoop, Cluster Monitoring, REST API, Metrics, Alerts)\n7\tApache Spark\tData Processing\t[0.0384390652179718]\tWrappedArray(Data Processing, Java, Scala, SQL, R, Python, DataFrame, Table, DataStream, Streaming Analytics, Batch Analytics, Machine Learning, Graph Analytics, Approximations, Sampling, Lazy)\n8\tApache Flume\tLibrary\t[0.19447214901447296]\tWrappedArray(Library, Java, Log Collection)\n14\tApache Hive\tData Processing\t[0.14498372375965118]\tWrappedArray(Data Processing, Hadoop, HiveQL, SQL, Query Processing, Java, MapReduce)\n15\tHortonworks\tDistribution\t[0.19447214901447296]\tWrappedArray(Distribution, Hadoop, Spark, Kafka)\n16\tApache HUE\tUI\t[0.19447214901447296]\tWrappedArray(UI, Hadoop, Cloudera, Ad Hoc, HiveQL, SQL, Data Import, Java)\n18\tApache Kafka\tMessage Broker\t[0.0384390652179718]\tWrappedArray(Message Broker, Java, C++, REST API, Messaging, Publish Subscribe, Producer Consumer)\n20\tApache Solr\tSearch Engine\t[0.19447214901447296]\tWrappedArray(Search Engine, Java, REST API, UI, Python, Ruby, XML, JSON)\n23\tApache Drill\tData Processing\t[0.19447214901447296]\tWrappedArray(Data Processing, Query Processing, SQL, Aggregations, Joins, Batch Analytics)\n29\tStanford CoreNLP\tLibrary\t[0.19447214901447296]\tWrappedArray(Library, NLP, Java, Text Analytics)\n32\tApache Sqoop\tData Import\t[0.19447214901447296]\tWrappedArray(Data Import, Hadoop, Java)\n33\tApache Oozie\tWorkflow\t[0.19447214901447296]\tWrappedArray(Workflow, Hadoop, Java, UI)\n34\tApache Nifi\tWorkflow\t[0.14498372375965118]\tWrappedArray(Workflow, Streaming, Message Broker, Java, UI)\n35\tNLTK\tLibrary\t[0.19447214901447296]\tWrappedArray(Library, NLP, Python, Text Analytics)\n38\tApache Zeppelin\tNotebook\t[0.0384390652179718]\tWrappedArray(Notebook, Python, Java, Scala, R, HiveQL, Cassandra, Visualization, SQL)\n39\tTableau\tBI\t[0.19447214901447296]\tWrappedArray(BI, UI, Visualization, SQL)\n41\tSQL\tProgramming Language\t[0.19447214901447296]\tWrappedArray(Programming Language, SQL, RDBMS, Interpreted)\n44\tPython\tProgramming Language\t[0.19447214901447296]\tWrappedArray(Programming Language, Dynamic Typing, Interpreted)\n45\tPresto\tData Processing\t[0.19447214901447296]\tWrappedArray(Data Processing, Query Processing, Java, SQL, Machine Learning)\n46\tMapR\tDistribution\t[0.19447214901447296]\tWrappedArray(Distribution, Hadoop, Spark, Kafka)\n50\tGoogle Cloud Platform\tCloud Provider\t[0.19447214901447296]\tWrappedArray(Cloud Provider, Google)\n51\tRedis\tDistributed Cache\t[0.19447214901447296]\tWrappedArray(Distributed Cache, Key Value Store, HyperLogLog, Approximations, Probabilistic Data Structures, UDAF)\n52\tJSON\tFile Format\t[0.19447214901447296]\tWrappedArray(File Format, Key Value Store)\n53\tXML\tFile Format\t[0.19447214901447296]\tWrappedArray(File Format, Key Value Store)\n56\tMicroStrategy\tBI\t[0.19447214901447296]\tWrappedArray(BI, UI, Visualization, SQL)\n57\tKnime\tWorkflow\t[0.19447214901447296]\tWrappedArray(Workflow, UI, Machine Learning, Graph Processing, Visualization)\n59\tOracle\tDatabase\t[0.19447214901447296]\tWrappedArray(Database, SQL, RDBMS, Transactional)\n61\tSpark ML/MLlib\tLibrary\t[0.0384390652179718]\tWrappedArray(Library, Spark, Machine Learning)\n62\tSpark Streaming\tLibrary\t[0.0384390652179718]\tWrappedArray(Library, Spark, Streaming)\n63\tSpark SQL\tLibrary\t[0.14498372375965118]\tWrappedArray(Library, Spark, HiveQL, SQL)\n69\tSpark GraphX\tLibrary\t[0.19447214901447296]\tWrappedArray(Library, Graph Analytics, Spark)\n"
      },
      "dateCreated": "Mar 1, 2016 10:45:39 PM",
      "dateStarted": "Mar 6, 2016 6:56:03 AM",
      "dateFinished": "Mar 6, 2016 6:56:04 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Train K-Means Cluster Model",
      "text": "import org.apache.spark.ml.clustering.KMeans\n\nval kmeans \u003d new KMeans()\n  .setK(5)\n  .setMaxIter(10)\n  .setFeaturesCol(\"features\")\n  .setPredictionCol(\"clusterId\")\n\nval kmeansModel \u003d kmeans.fit(itemFeatureVectorsDF)",
      "dateUpdated": "Mar 6, 2016 6:56:00 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456869576746_-1994222589",
      "id": "20160301-215936_103816347",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.ml.clustering.KMeans\nkmeans: org.apache.spark.ml.clustering.KMeans \u003d kmeans_7d5f5c7bbe73\nkmeansModel: org.apache.spark.ml.clustering.KMeansModel \u003d kmeans_7d5f5c7bbe73\n"
      },
      "dateCreated": "Mar 1, 2016 9:59:36 PM",
      "dateStarted": "Mar 6, 2016 6:56:04 AM",
      "dateFinished": "Mar 6, 2016 6:56:05 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Show cluster center",
      "text": "val clusterCenters \u003d kmeansModel.clusterCenters.mkString(\"\\n\")",
      "dateUpdated": "Mar 6, 2016 6:56:00 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457234151390_-820318732",
      "id": "20160306-031551_1012691012",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "clusterCenters: String \u003d \n[0.19447214901447296]\n[0.0384390652179718]\n[0.14498372375965118]\n[0.19447214901447296]\n[0.19447214901447296]\n"
      },
      "dateCreated": "Mar 6, 2016 3:15:51 AM",
      "dateStarted": "Mar 6, 2016 6:56:04 AM",
      "dateFinished": "Mar 6, 2016 6:56:05 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Evaluate K-Means Cluster Model Using Within Set Sum of Squared Errors (WSSSE)",
      "text": "val WSSSE \u003d kmeansModel.computeCost(itemFeatureVectorsDF)\n\nprintln(\"Within Set Sum of Squared Errors \u003d \" + WSSSE)",
      "dateUpdated": "Mar 6, 2016 6:56:00 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456863935154_-1530136782",
      "id": "20160301-202535_1236869408",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "WSSSE: Double \u003d 0.0\nWithin Set Sum of Squared Errors \u003d 0.0\n"
      },
      "dateCreated": "Mar 1, 2016 8:25:35 PM",
      "dateStarted": "Mar 6, 2016 6:56:05 AM",
      "dateFinished": "Mar 6, 2016 6:56:05 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "dateUpdated": "Mar 6, 2016 6:56:00 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456863935154_-1530136782",
      "id": "20160301-202535_504888221",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT"
      },
      "dateCreated": "Mar 1, 2016 8:25:35 PM",
      "dateStarted": "Mar 6, 2016 6:56:05 AM",
      "dateFinished": "Mar 6, 2016 6:56:05 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Live Recs/04: Generate Item-to-Item Collab Filtering Similarity Recs (K-Means)",
  "id": "2BDVAZRNT",
  "angularObjects": {
    "2ARR8UZDJ": [],
    "2AS9P7JSA": [],
    "2AR33ZMZJ": []
  },
  "config": {
    "looknfeel": "default"
  },
  "info": {}
}