{
  "paragraphs": [
    {
      "title": "Get reference data for enrichment",
      "text": "val itemsDF \u003d sqlContext.read.format(\"json\")\n  .load(\"file:/root/pipeline/html/advancedspark.com/json/software.json\").as(\"items\")\n\nz.show(itemsDF.select($\"id\", $\"title\", $\"img\", $\"tags\").limit(5))",
      "dateUpdated": "Mar 9, 2016 3:45:38 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456864493859_1816775810",
      "id": "20160301-203453_435330649",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "id\ttitle\timg\ttags\n1\tApache Cassandra\timg/software/cassandra.png\tWrappedArray(Database, NoSQL, Java, Eventually Consistent, Transactional)\n2\tTachyon\timg/software/tachyon.png\tWrappedArray(Distributed Cache, Object Store, S3, Swift, HDFS)\n3\tApache Ambari\timg/software/ambari.png\tWrappedArray(Cluster Provision, Hadoop, Cluster Monitoring, REST API, Metrics, Alerts)\n4\tDocker\timg/software/docker.png\tWrappedArray(Container, Linux, DevOps, Deployment)\n5\tMicrosft Azure\timg/software/azure.png\tWrappedArray(Cloud Provider, Microsoft)\n"
      },
      "dateCreated": "Mar 1, 2016 8:34:53 PM",
      "dateStarted": "Mar 9, 2016 3:45:38 AM",
      "dateFinished": "Mar 9, 2016 3:45:39 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Get live ratings from cassandra",
      "text": "val cassandraConfig \u003d Map(\"keyspace\" -\u003e \"advancedspark\", \"table\" -\u003e \"item_ratings\")\n\nval itemRatingsDF \u003d sqlContext.read.format(\"org.apache.spark.sql.cassandra\").options(cassandraConfig)\n  .load().toDF(\"userId\", \"itemId\", \"rating\", \"timestamp\")",
      "dateUpdated": "Mar 9, 2016 3:45:38 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456864473360_947045726",
      "id": "20160301-203433_727044271",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "cassandraConfig: scala.collection.immutable.Map[String,String] \u003d Map(keyspace -\u003e advancedspark, table -\u003e item_ratings)\nitemRatingsDF: org.apache.spark.sql.DataFrame \u003d [userId: int, itemId: int, rating: int, timestamp: bigint]\n"
      },
      "dateCreated": "Mar 1, 2016 8:34:33 PM",
      "dateStarted": "Mar 9, 2016 3:45:38 AM",
      "dateFinished": "Mar 9, 2016 3:45:40 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Train the ALS model",
      "text": "import org.apache.spark.ml.recommendation.ALS\n\nval rank \u003d 10\nval maxIterations \u003d 20\nval convergenceThreshold \u003d 0.01\n\nval als \u003d new ALS()\n  .setRank(rank)\n  .setRegParam(convergenceThreshold)\n  .setUserCol(\"userId\")\n  .setItemCol(\"itemId\")\n  .setRatingCol(\"rating\")\n\nval model \u003d als.fit(itemRatingsDF)\n\nmodel.setPredictionCol(\"confidence\")",
      "dateUpdated": "Mar 9, 2016 3:45:38 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456863935152_-1530906280",
      "id": "20160301-202535_1243843765",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.ml.recommendation.ALS\nrank: Int \u003d 10\nmaxIterations: Int \u003d 20\nconvergenceThreshold: Double \u003d 0.01\nals: org.apache.spark.ml.recommendation.ALS \u003d als_e2505e81000f\nmodel: org.apache.spark.ml.recommendation.ALSModel \u003d als_e2505e81000f\nres301: model.type \u003d als_e2505e81000f\n"
      },
      "dateCreated": "Mar 1, 2016 8:25:35 PM",
      "dateStarted": "Mar 9, 2016 3:45:39 AM",
      "dateFinished": "Mar 9, 2016 3:45:43 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Show User Factors generated by ALS Model",
      "text": "val userFactorsDF \u003d model.userFactors\n\nz.show(userFactorsDF.sort($\"id\"))",
      "dateUpdated": "Mar 9, 2016 3:45:38 AM",
      "config": {
        "colWidth": 11.0,
        "graph": {
          "mode": "table",
          "height": 160.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "features",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "features",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456871675606_-1963639723",
      "id": "20160301-223435_324458630",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "id\tfeatures\n20014\tWrappedArray(-0.006050425, 0.083594054, 0.029330302, 0.2736857, 0.30299652, 0.17080921, -0.20938966, 0.13025881, 0.17869186, -0.66491944)\n26058\tWrappedArray(-0.05598122, -0.23062763, 0.1994008, 0.41916022, 0.068916194, 0.07241409, 0.22938105, 0.21852234, 0.50298953, -0.5857711)\n33366\tWrappedArray(-0.027526386, -0.040067382, 0.100885905, 0.24175277, 0.2466436, 0.3479195, -0.2225632, 0.071351364, 0.24721289, -0.6664172)\n61533\tWrappedArray(-1.8191905E-4, 0.034950145, 0.12398971, 0.34652975, 0.33709782, -0.08652099, -0.1212792, 0.01545113, 0.11927485, -0.7616635)\n84653\tWrappedArray(0.19392605, -0.49801332, -0.15463345, -0.10761962, -0.5461286, -0.06419637, -0.10755314, -0.4092953, 0.05905608, -0.24951638)\n"
      },
      "dateCreated": "Mar 1, 2016 10:34:35 PM",
      "dateStarted": "Mar 9, 2016 3:45:40 AM",
      "dateFinished": "Mar 9, 2016 3:45:44 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Show Item Factors Generated by aLS Model",
      "text": "val itemFactorsDF \u003d model.itemFactors\n\nz.show(itemFactorsDF.sort($\"id\"))",
      "dateUpdated": "Mar 9, 2016 3:45:38 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "features",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "features",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456871608058_2084410724",
      "id": "20160301-223328_1552390087",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "id\tfeatures\n1\tWrappedArray(-0.03485119, -0.036845766, 0.11367203, 0.265754, 0.30229086, 0.46764094, -0.3028338, 0.080268614, 0.28389528, -0.7848878)\n2\tWrappedArray(-0.05721035, -0.23784582, 0.20219165, 0.42345744, 0.06199093, 0.06971448, 0.2422319, 0.22391003, 0.51300144, -0.5822865)\n3\tWrappedArray(-0.05721035, -0.23784582, 0.20219165, 0.42345744, 0.06199093, 0.06971448, 0.2422319, 0.22391003, 0.51300144, -0.5822865)\n4\tWrappedArray(8.676767E-4, 0.060162865, 0.1385857, 0.38971668, 0.3986069, -0.12420716, -0.14313553, 0.010924537, 0.10948317, -0.8574177)\n7\tWrappedArray(-0.008130442, 0.112332046, 0.039413482, 0.36777344, 0.40716076, 0.22953005, -0.2813737, 0.17503923, 0.24012262, -0.89350563)\n8\tWrappedArray(-0.05721035, -0.23784582, 0.20219165, 0.42345744, 0.06199093, 0.06971448, 0.2422319, 0.22391003, 0.51300144, -0.5822865)\n10\tWrappedArray(8.676767E-4, 0.060162865, 0.1385857, 0.38971668, 0.3986069, -0.12420716, -0.14313553, 0.010924537, 0.10948317, -0.8574177)\n11\tWrappedArray(8.676767E-4, 0.060162865, 0.1385857, 0.38971668, 0.3986069, -0.12420716, -0.14313553, 0.010924537, 0.10948317, -0.8574177)\n14\tWrappedArray(-0.05184677, -0.14075397, 0.17666061, 0.38915274, 0.2392976, 0.35750318, -0.09226304, 0.16406077, 0.4450993, -0.82548195)\n15\tWrappedArray(-0.05721035, -0.23784582, 0.20219165, 0.42345744, 0.06199093, 0.06971448, 0.2422319, 0.22391003, 0.51300144, -0.5822865)\n16\tWrappedArray(-0.05721035, -0.23784582, 0.20219165, 0.42345744, 0.06199093, 0.06971448, 0.2422319, 0.22391003, 0.51300144, -0.5822865)\n18\tWrappedArray(-0.021100428, 0.0065587563, 0.1377254, 0.35400835, 0.38090423, 0.2282843, -0.2567637, 0.054894697, 0.22867097, -0.90249455)\n20\tWrappedArray(-0.05721035, -0.23784582, 0.20219165, 0.42345744, 0.06199093, 0.06971448, 0.2422319, 0.22391003, 0.51300144, -0.5822865)\n23\tWrappedArray(-0.05721035, -0.23784582, 0.20219165, 0.42345744, 0.06199093, 0.06971448, 0.2422319, 0.22391003, 0.51300144, -0.5822865)\n27\tWrappedArray(0.21967769, -0.56334245, -0.17957142, -0.1343466, -0.63060427, -0.077769734, -0.11338074, -0.46402994, 0.059619445, -0.25049263)\n29\tWrappedArray(-0.05721035, -0.23784582, 0.20219165, 0.42345744, 0.06199093, 0.06971448, 0.2422319, 0.22391003, 0.51300144, -0.5822865)\n32\tWrappedArray(-0.05721035, -0.23784582, 0.20219165, 0.42345744, 0.06199093, 0.06971448, 0.2422319, 0.22391003, 0.51300144, -0.5822865)\n33\tWrappedArray(-0.05721035, -0.23784582, 0.20219165, 0.42345744, 0.06199093, 0.06971448, 0.2422319, 0.22391003, 0.51300144, -0.5822865)\n34\tWrappedArray(-0.05184677, -0.14075397, 0.17666061, 0.38915274, 0.2392976, 0.35750318, -0.09226304, 0.16406077, 0.4450993, -0.82548195)\n35\tWrappedArray(-0.05721035, -0.23784582, 0.20219165, 0.42345744, 0.06199093, 0.06971448, 0.2422319, 0.22391003, 0.51300144, -0.5822865)\n38\tWrappedArray(-0.03485119, -0.036845766, 0.11367203, 0.265754, 0.30229086, 0.46764094, -0.3028338, 0.080268614, 0.28389528, -0.7848878)\n39\tWrappedArray(-0.05721035, -0.23784582, 0.20219165, 0.42345744, 0.06199093, 0.06971448, 0.2422319, 0.22391003, 0.51300144, -0.5822865)\n41\tWrappedArray(-0.05721035, -0.23784582, 0.20219165, 0.42345744, 0.06199093, 0.06971448, 0.2422319, 0.22391003, 0.51300144, -0.5822865)\n42\tWrappedArray(8.676767E-4, 0.060162865, 0.1385857, 0.38971668, 0.3986069, -0.12420716, -0.14313553, 0.010924537, 0.10948317, -0.8574177)\n44\tWrappedArray(-0.05721035, -0.23784582, 0.20219165, 0.42345744, 0.06199093, 0.06971448, 0.2422319, 0.22391003, 0.51300144, -0.5822865)\n45\tWrappedArray(-0.05721035, -0.23784582, 0.20219165, 0.42345744, 0.06199093, 0.06971448, 0.2422319, 0.22391003, 0.51300144, -0.5822865)\n46\tWrappedArray(-0.05721035, -0.23784582, 0.20219165, 0.42345744, 0.06199093, 0.06971448, 0.2422319, 0.22391003, 0.51300144, -0.5822865)\n50\tWrappedArray(-0.05721035, -0.23784582, 0.20219165, 0.42345744, 0.06199093, 0.06971448, 0.2422319, 0.22391003, 0.51300144, -0.5822865)\n51\tWrappedArray(-0.05721035, -0.23784582, 0.20219165, 0.42345744, 0.06199093, 0.06971448, 0.2422319, 0.22391003, 0.51300144, -0.5822865)\n52\tWrappedArray(-0.05721035, -0.23784582, 0.20219165, 0.42345744, 0.06199093, 0.06971448, 0.2422319, 0.22391003, 0.51300144, -0.5822865)\n53\tWrappedArray(-0.05721035, -0.23784582, 0.20219165, 0.42345744, 0.06199093, 0.06971448, 0.2422319, 0.22391003, 0.51300144, -0.5822865)\n56\tWrappedArray(-0.05721035, -0.23784582, 0.20219165, 0.42345744, 0.06199093, 0.06971448, 0.2422319, 0.22391003, 0.51300144, -0.5822865)\n57\tWrappedArray(-0.05721035, -0.23784582, 0.20219165, 0.42345744, 0.06199093, 0.06971448, 0.2422319, 0.22391003, 0.51300144, -0.5822865)\n59\tWrappedArray(-0.05721035, -0.23784582, 0.20219165, 0.42345744, 0.06199093, 0.06971448, 0.2422319, 0.22391003, 0.51300144, -0.5822865)\n61\tWrappedArray(-0.03485119, -0.036845766, 0.11367203, 0.265754, 0.30229086, 0.46764094, -0.3028338, 0.080268614, 0.28389528, -0.7848878)\n62\tWrappedArray(0.21824892, -0.5847708, -0.04070531, 0.25535783, -0.25272086, 0.080589436, -0.3769845, -0.44900778, 0.2868117, -1.2543044)\n63\tWrappedArray(-0.038582347, -0.08905169, 0.18192996, 0.4293544, 0.30881163, 0.2055506, -0.10002211, 0.12938827, 0.37382966, -0.9034492)\n69\tWrappedArray(-0.029601902, -0.085889295, 0.197735, 0.47951236, 0.29472187, -0.044882003, 0.033659533, 0.12526971, 0.34252274, -0.87072563)\n"
      },
      "dateCreated": "Mar 1, 2016 10:33:28 PM",
      "dateStarted": "Mar 9, 2016 3:45:44 AM",
      "dateFinished": "Mar 9, 2016 3:45:44 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "convert ALS item factors into K-Means Feature vectors",
      "text": "import org.apache.spark.mllib.linalg.Vectors\nimport org.apache.spark.sql.Row\n\nval itemFeatureVectorsDF \u003d model.itemFactors.map(row \u003d\u003e (row.getInt(0), row.getSeq[Float](1)))\n  .mapValues(row \u003d\u003e Vectors.dense(row(2)))\n  .toDF(\"id\", \"features\")\n  .as(\"itemFeatureVectors\")",
      "dateUpdated": "Mar 9, 2016 3:45:38 AM",
      "config": {
        "colWidth": 11.0,
        "graph": {
          "mode": "table",
          "height": 275.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456864598644_-707623020",
      "id": "20160301-203638_1668523129",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.mllib.linalg.Vectors\nimport org.apache.spark.sql.Row\nitemFeatureVectorsDF: org.apache.spark.sql.DataFrame \u003d [id: int, features: vector]\n"
      },
      "dateCreated": "Mar 1, 2016 8:36:38 PM",
      "dateStarted": "Mar 9, 2016 3:45:44 AM",
      "dateFinished": "Mar 9, 2016 3:45:45 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Enrich the Item feature vectors for display purposes",
      "text": "val enrichedItemFeatureVectorsDF \u003d itemFeatureVectorsDF\n  .join(itemsDF, $\"itemFeatureVectors.id\" \u003d\u003d\u003d $\"items.id\")\n  .select($\"items.id\", $\"title\", $\"category\", $\"features\", $\"tags\")\n  .sort($\"items.id\")\n  .as(\"enrichedItemFeatureVectors\")\n\nz.show(enrichedItemFeatureVectorsDF)",
      "dateUpdated": "Mar 9, 2016 3:52:19 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456872339856_-283274355",
      "id": "20160301-224539_90254018",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "id\ttitle\tcategory\tfeatures\ttags\n1\tApache Cassandra\tDatabase\t[0.11367203295230865]\tWrappedArray(Database, NoSQL, Java, Eventually Consistent, Transactional)\n2\tTachyon\tDistributed Cache\t[0.20219165086746216]\tWrappedArray(Distributed Cache, Object Store, S3, Swift, HDFS)\n3\tApache Ambari\tCluster Provision\t[0.20219165086746216]\tWrappedArray(Cluster Provision, Hadoop, Cluster Monitoring, REST API, Metrics, Alerts)\n4\tDocker\tContainer\t[0.13858570158481598]\tWrappedArray(Container, Linux, DevOps, Deployment)\n7\tApache Spark\tData Processing\t[0.03941348195075989]\tWrappedArray(Data Processing, Java, Scala, SQL, R, Python, DataFrame, Table, DataStream, Streaming Analytics, Batch Analytics, Machine Learning, Graph Analytics, Approximations, Sampling, Lazy)\n8\tApache Flume\tLibrary\t[0.20219165086746216]\tWrappedArray(Library, Java, Log Collection)\n10\tApache HDFS\tFile System\t[0.13858570158481598]\tWrappedArray(File System, Hadoop, Java)\n11\tApache YARN\tCluster Resource Manager\t[0.13858570158481598]\tWrappedArray(Cluster Resource Manager, Hadoop, Java)\n14\tApache Hive\tData Processing\t[0.17666061222553253]\tWrappedArray(Data Processing, Hadoop, HiveQL, SQL, Query Processing, Java, MapReduce)\n15\tHortonworks\tDistribution\t[0.20219165086746216]\tWrappedArray(Distribution, Hadoop, Spark, Kafka)\n16\tApache HUE\tUI\t[0.20219165086746216]\tWrappedArray(UI, Hadoop, Cloudera, Ad Hoc, HiveQL, SQL, Data Import, Java)\n18\tApache Kafka\tMessage Broker\t[0.13772539794445038]\tWrappedArray(Message Broker, Java, C++, REST API, Messaging, Publish Subscribe, Producer Consumer)\n20\tApache Solr\tSearch Engine\t[0.20219165086746216]\tWrappedArray(Search Engine, Java, REST API, UI, Python, Ruby, XML, JSON)\n23\tApache Drill\tData Processing\t[0.20219165086746216]\tWrappedArray(Data Processing, Query Processing, SQL, Aggregations, Joins, Batch Analytics)\n27\tApache Pig\tData Processing\t[-0.17957141995429993]\tWrappedArray(Data Processing, Hadoop, HiveQL, SQL, Query Processing, Java, Lazy)\n29\tStanford CoreNLP\tLibrary\t[0.20219165086746216]\tWrappedArray(Library, NLP, Java, Text Analytics)\n32\tApache Sqoop\tData Import\t[0.20219165086746216]\tWrappedArray(Data Import, Hadoop, Java)\n33\tApache Oozie\tWorkflow\t[0.20219165086746216]\tWrappedArray(Workflow, Hadoop, Java, UI)\n34\tApache Nifi\tWorkflow\t[0.17666061222553253]\tWrappedArray(Workflow, Streaming, Message Broker, Java, UI)\n35\tNLTK\tLibrary\t[0.20219165086746216]\tWrappedArray(Library, NLP, Python, Text Analytics)\n38\tApache Zeppelin\tNotebook\t[0.11367203295230865]\tWrappedArray(Notebook, Python, Java, Scala, R, HiveQL, Cassandra, Visualization, SQL)\n39\tTableau\tBI\t[0.20219165086746216]\tWrappedArray(BI, UI, Visualization, SQL)\n41\tSQL\tProgramming Language\t[0.20219165086746216]\tWrappedArray(Programming Language, SQL, RDBMS, Interpreted)\n42\tScala\tProgramming Language\t[0.13858570158481598]\tWrappedArray(Programming Language, Functional, Java, Static Typing, Compiled)\n44\tPython\tProgramming Language\t[0.20219165086746216]\tWrappedArray(Programming Language, Dynamic Typing, Interpreted)\n45\tPresto\tData Processing\t[0.20219165086746216]\tWrappedArray(Data Processing, Query Processing, Java, SQL, Machine Learning)\n46\tMapR\tDistribution\t[0.20219165086746216]\tWrappedArray(Distribution, Hadoop, Spark, Kafka)\n50\tGoogle Cloud Platform\tCloud Provider\t[0.20219165086746216]\tWrappedArray(Cloud Provider, Google)\n51\tRedis\tDistributed Cache\t[0.20219165086746216]\tWrappedArray(Distributed Cache, Key Value Store, HyperLogLog, Approximations, Probabilistic Data Structures, UDAF)\n52\tJSON\tFile Format\t[0.20219165086746216]\tWrappedArray(File Format, Key Value Store)\n53\tXML\tFile Format\t[0.20219165086746216]\tWrappedArray(File Format, Key Value Store)\n56\tMicroStrategy\tBI\t[0.20219165086746216]\tWrappedArray(BI, UI, Visualization, SQL)\n57\tKnime\tWorkflow\t[0.20219165086746216]\tWrappedArray(Workflow, UI, Machine Learning, Graph Processing, Visualization)\n59\tOracle\tDatabase\t[0.20219165086746216]\tWrappedArray(Database, SQL, RDBMS, Transactional)\n61\tSpark ML/MLlib\tLibrary\t[0.11367203295230865]\tWrappedArray(Library, Spark, Machine Learning)\n62\tSpark Streaming\tLibrary\t[-0.04070530831813812]\tWrappedArray(Library, Spark, Streaming)\n63\tSpark SQL\tLibrary\t[0.18192996084690094]\tWrappedArray(Library, Spark, HiveQL, SQL)\n69\tSpark GraphX\tLibrary\t[0.197734996676445]\tWrappedArray(Library, Graph Analytics, Spark)\n"
      },
      "dateCreated": "Mar 1, 2016 10:45:39 PM",
      "dateStarted": "Mar 9, 2016 3:52:19 AM",
      "dateFinished": "Mar 9, 2016 3:52:20 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Train K-Means Cluster Model",
      "text": "import org.apache.spark.ml.clustering.KMeans\n\nval kmeans \u003d new KMeans()\n  .setK(5)\n  .setMaxIter(10)\n  .setFeaturesCol(\"features\")\n  .setPredictionCol(\"clusterId\")\n\nval kmeansModel \u003d kmeans.fit(itemFeatureVectorsDF)",
      "dateUpdated": "Mar 9, 2016 4:06:48 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456869576746_-1994222589",
      "id": "20160301-215936_103816347",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.ml.clustering.KMeans\nkmeans: org.apache.spark.ml.clustering.KMeans \u003d kmeans_9fd393aa3505\nkmeansModel: org.apache.spark.ml.clustering.KMeansModel \u003d kmeans_9fd393aa3505\n"
      },
      "dateCreated": "Mar 1, 2016 9:59:36 PM",
      "dateStarted": "Mar 9, 2016 4:06:48 AM",
      "dateFinished": "Mar 9, 2016 4:06:49 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Show cluster center",
      "text": "val clusterCenters \u003d kmeansModel.clusterCenters.mkString(\"\\n\")",
      "dateUpdated": "Mar 9, 2016 4:06:53 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457234151390_-820318732",
      "id": "20160306-031551_1012691012",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "clusterCenters: String \u003d \n[-0.04070530831813812]\n[0.19938496858985336]\n[0.12913553789258003]\n[-0.17957141995429993]\n[0.03941348195075989]\n"
      },
      "dateCreated": "Mar 6, 2016 3:15:51 AM",
      "dateStarted": "Mar 9, 2016 4:06:53 AM",
      "dateFinished": "Mar 9, 2016 4:06:53 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Evaluate K-Means Cluster Model Using Within Set Sum of Squared Errors (WSSSE)",
      "text": "val WSSSE \u003d kmeansModel.computeCost(itemFeatureVectorsDF)\n\nprintln(\"Within Set Sum of Squared Errors \u003d \" + WSSSE)",
      "dateUpdated": "Mar 9, 2016 4:06:54 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456863935154_-1530136782",
      "id": "20160301-202535_1236869408",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "WSSSE: Double \u003d 0.0026697421774022345\nWithin Set Sum of Squared Errors \u003d 0.0026697421774022345\n"
      },
      "dateCreated": "Mar 1, 2016 8:25:35 PM",
      "dateStarted": "Mar 9, 2016 4:06:54 AM",
      "dateFinished": "Mar 9, 2016 4:06:55 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val enrichedClusteredItems \u003d kmeansModel.transform(itemFeatureVectorsDF)\n  .select($\"id\" as \"itemId\", $\"features\", $\"clusterId\")\n  .join(enrichedItemFeatureVectorsDF, $\"itemId\" \u003d\u003d\u003d $\"enrichedItemFeatureVectors.id\")\n  .select($\"clusterId\", $\"itemId\", $\"title\", $\"category\", $\"tags\")\n  .sort($\"clusterId\", $\"itemId\")\n  \nz.show(enrichedClusteredItems)",
      "dateUpdated": "Mar 9, 2016 4:06:59 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "clusterId",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "itemId",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "clusterId",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "itemId",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1456863935154_-1530136782",
      "id": "20160301-202535_504888221",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "clusterId\titemId\ttitle\tcategory\ttags\n0\t62\tSpark Streaming\tLibrary\tWrappedArray(Library, Spark, Streaming)\n1\t2\tTachyon\tDistributed Cache\tWrappedArray(Distributed Cache, Object Store, S3, Swift, HDFS)\n1\t3\tApache Ambari\tCluster Provision\tWrappedArray(Cluster Provision, Hadoop, Cluster Monitoring, REST API, Metrics, Alerts)\n1\t8\tApache Flume\tLibrary\tWrappedArray(Library, Java, Log Collection)\n1\t14\tApache Hive\tData Processing\tWrappedArray(Data Processing, Hadoop, HiveQL, SQL, Query Processing, Java, MapReduce)\n1\t15\tHortonworks\tDistribution\tWrappedArray(Distribution, Hadoop, Spark, Kafka)\n1\t16\tApache HUE\tUI\tWrappedArray(UI, Hadoop, Cloudera, Ad Hoc, HiveQL, SQL, Data Import, Java)\n1\t20\tApache Solr\tSearch Engine\tWrappedArray(Search Engine, Java, REST API, UI, Python, Ruby, XML, JSON)\n1\t23\tApache Drill\tData Processing\tWrappedArray(Data Processing, Query Processing, SQL, Aggregations, Joins, Batch Analytics)\n1\t29\tStanford CoreNLP\tLibrary\tWrappedArray(Library, NLP, Java, Text Analytics)\n1\t32\tApache Sqoop\tData Import\tWrappedArray(Data Import, Hadoop, Java)\n1\t33\tApache Oozie\tWorkflow\tWrappedArray(Workflow, Hadoop, Java, UI)\n1\t34\tApache Nifi\tWorkflow\tWrappedArray(Workflow, Streaming, Message Broker, Java, UI)\n1\t35\tNLTK\tLibrary\tWrappedArray(Library, NLP, Python, Text Analytics)\n1\t39\tTableau\tBI\tWrappedArray(BI, UI, Visualization, SQL)\n1\t41\tSQL\tProgramming Language\tWrappedArray(Programming Language, SQL, RDBMS, Interpreted)\n1\t44\tPython\tProgramming Language\tWrappedArray(Programming Language, Dynamic Typing, Interpreted)\n1\t45\tPresto\tData Processing\tWrappedArray(Data Processing, Query Processing, Java, SQL, Machine Learning)\n1\t46\tMapR\tDistribution\tWrappedArray(Distribution, Hadoop, Spark, Kafka)\n1\t50\tGoogle Cloud Platform\tCloud Provider\tWrappedArray(Cloud Provider, Google)\n1\t51\tRedis\tDistributed Cache\tWrappedArray(Distributed Cache, Key Value Store, HyperLogLog, Approximations, Probabilistic Data Structures, UDAF)\n1\t52\tJSON\tFile Format\tWrappedArray(File Format, Key Value Store)\n1\t53\tXML\tFile Format\tWrappedArray(File Format, Key Value Store)\n1\t56\tMicroStrategy\tBI\tWrappedArray(BI, UI, Visualization, SQL)\n1\t57\tKnime\tWorkflow\tWrappedArray(Workflow, UI, Machine Learning, Graph Processing, Visualization)\n1\t59\tOracle\tDatabase\tWrappedArray(Database, SQL, RDBMS, Transactional)\n1\t63\tSpark SQL\tLibrary\tWrappedArray(Library, Spark, HiveQL, SQL)\n1\t69\tSpark GraphX\tLibrary\tWrappedArray(Library, Graph Analytics, Spark)\n2\t1\tApache Cassandra\tDatabase\tWrappedArray(Database, NoSQL, Java, Eventually Consistent, Transactional)\n2\t4\tDocker\tContainer\tWrappedArray(Container, Linux, DevOps, Deployment)\n2\t10\tApache HDFS\tFile System\tWrappedArray(File System, Hadoop, Java)\n2\t11\tApache YARN\tCluster Resource Manager\tWrappedArray(Cluster Resource Manager, Hadoop, Java)\n2\t18\tApache Kafka\tMessage Broker\tWrappedArray(Message Broker, Java, C++, REST API, Messaging, Publish Subscribe, Producer Consumer)\n2\t38\tApache Zeppelin\tNotebook\tWrappedArray(Notebook, Python, Java, Scala, R, HiveQL, Cassandra, Visualization, SQL)\n2\t42\tScala\tProgramming Language\tWrappedArray(Programming Language, Functional, Java, Static Typing, Compiled)\n2\t61\tSpark ML/MLlib\tLibrary\tWrappedArray(Library, Spark, Machine Learning)\n3\t27\tApache Pig\tData Processing\tWrappedArray(Data Processing, Hadoop, HiveQL, SQL, Query Processing, Java, Lazy)\n4\t7\tApache Spark\tData Processing\tWrappedArray(Data Processing, Java, Scala, SQL, R, Python, DataFrame, Table, DataStream, Streaming Analytics, Batch Analytics, Machine Learning, Graph Analytics, Approximations, Sampling, Lazy)\n"
      },
      "dateCreated": "Mar 1, 2016 8:25:35 PM",
      "dateStarted": "Mar 9, 2016 4:06:59 AM",
      "dateFinished": "Mar 9, 2016 4:07:01 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "",
      "dateUpdated": "Mar 13, 2016 6:38:59 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1457495167453_2000814305",
      "id": "20160309-034607_2033288424",
      "dateCreated": "Mar 9, 2016 3:46:07 AM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Live Recs/04: Generate Item-to-Item Collab Filtering Similarity Recs (K-Means)",
  "id": "2BDVAZRNT",
  "angularObjects": {
    "2BEGD5PKY": [],
    "2BE77VGXX": [],
    "2BCP5RYPW": [],
    "2BE5B7T6C": [],
    "2BDHX9C4U": [],
    "2BFE8ZRKW": [],
    "2BG7XUMST": [],
    "2BEWT9BTQ": [],
    "2BF9JBZN5": [],
    "2BF666AQP": [],
    "2BF7MKGKF": [],
    "2BG2MTBAA": [],
    "2BCR6TSCQ": [],
    "2BFVSJYDM": []
  },
  "config": {
    "looknfeel": "default"
  },
  "info": {}
}