#!/bin/bash

start_model_serving_python () {
    echo "PIPELINE_MODEL_TYPE=$PIPELINE_MODEL_TYPE"
    echo "PIPELINE_MODEL_NAME=$PIPELINE_MODEL_NAME"
    echo "PIPELINE_MODEL_TAG=$PIPELINE_MODEL_TAG"
    echo "PIPELINE_MODEL_PATH=$PIPELINE_MODEL_PATH"
    echo "PIPELINE_MODEL_SERVER_PATH=$PIPELINE_MODEL_SERVER_PATH"
    echo "PIPELINE_MODEL_SERVER_PORT=$PIPELINE_MODEL_SERVER_PORT"
    echo "PIPELINE_MODEL_SERVER_PROMETHEUS_PORT=$PIPELINE_MODEL_SERVER_PROMETHEUS_PORT"
    echo "PIPELINE_MODEL_SERVER_TENSORFLOW_SERVING_PORT=$PIPELINE_MODEL_SERVER_TENSORFLOW_SERVING_PORT"

    echo ""
    echo "Starting Python-based Model Serving..."
    echo ""

    source activate $PIPELINE_MODEL_CONDA_ENV_NAME

    PYTHONPATH=$PIPELINE_MODEL_PATH:$PYTHONPATH \
        $PIPELINE_MODEL_SERVER_PATH/model_server_python.py \
        --PIPELINE_MODEL_TYPE=$PIPELINE_MODEL_TYPE \
        --PIPELINE_MODEL_NAME=$PIPELINE_MODEL_NAME \
        --PIPELINE_MODEL_TAG=$PIPELINE_MODEL_TAG \
        --PIPELINE_MODEL_PATH=$PIPELINE_MODEL_PATH \
        --PIPELINE_MODEL_SERVER_PORT=$PIPELINE_MODEL_SERVER_PORT \
        --PIPELINE_MODEL_SERVER_PROMETHEUS_PORT=$PIPELINE_MODEL_SERVER_PROMETHEUS_PORT \
        --PIPELINE_MODEL_SERVER_TENSORFLOW_SERVING_PORT=$PIPELINE_MODEL_SERVER_TENSORFLOW_SERVING_PORT

    cd /root
}

start_model_serving_jvm () {
    echo "PIPELINE_JVM_MODEL_SERVER_PATH=$PIPELINE_JVM_MODEL_SERVER_PATH"
    source sysutils/container-limits.sh
    export JAVA_MAX_MEM_RATIO=85
    export JAVA_OPTIONS="$(sysutils/jvm-limits.sh)"
    echo ""
    echo "JAVA_OPTIONS=$JAVA_OPTIONS"
    echo ""
    echo "Starting JVM-based Model Serving..."
    echo ""
    cd $PIPELINE_JVM_MODEL_SERVER_PATH \
      && java $JAVA_OPTIONS -Djava.security.egd=file:/dev/./urandom \
        -jar /root/jvm/lib/sbt-launch-1.0.2.jar \
        "runMain io.pipeline.predict.jvm.PredictionServiceMain"
}

start_hystrix_dashboard () {
    echo "PIPELINE_HYSTRIX_DASHBOARD_PORT=$PIPELINE_HYSTRIX_DASHBOARD_PORT"
    source sysutils/container-limits.sh
    export JAVA_MAX_MEM_RATIO=85
    export JAVA_OPTIONS="$(sysutils/jvm-limits.sh)"
    echo ""
    echo "JAVA_OPTIONS=$JAVA_OPTIONS"
    echo ""
    echo "Starting JVM-based Dashboard Server..."
    echo ""
    
    java -jar /root/dashboard/jetty-0.4.7.RC0.jar --path /hystrix-dashboard --port $PIPELINE_HYSTRIX_DASHBOARD_PORT /root/dashboard/hystrix-dashboard-0.1.0-dev.0.uncommitted.war
}

start_tensorflow_serving () {
    echo "PIPELINE_MODEL_NAME=$PIPELINE_MODEL_NAME"
    echo "PIPELINE_MODEL_PATH=$PIPELINE_MODEL_PATH"
    echo "PIPELINE_MODEL_SERVER_TENSORFLOW_SERVING_PORT=$PIPELINE_MODEL_SERVER_TENSORFLOW_SERVING_PORT"
    echo "PIPELINE_MODEL_SERVER_TENSORFLOW_SERVING_REQUEST_BATCHING=$PIPELINE_MODEL_SERVER_TENSORFLOW_SERVING_REQUEST_BATCHING"
    echo ""
    echo "Starting TensorFlow Serving..."
    echo ""
    tensorflow_model_server --port=$PIPELINE_MODEL_SERVER_TENSORFLOW_SERVING_PORT \
        --model_name=$PIPELINE_MODEL_NAME --model_base_path=$PIPELINE_MODEL_PATH/versions \
        --batching_parameters_file=/root/config/tfserving/batching_config.txt \
        --enable_batching=$PIPELINE_MODEL_SERVER_TENSORFLOW_SERVING_REQUEST_BATCHING \
        --file_system_poll_wait_seconds=5
    echo ""
    echo "...TensorFlow Serving Started!"
    echo ""
}

start_tensorboard() {
    echo "PIPELINE_TENSORBOARD_LOGDIR=$PIPELINE_TENSORBOARD_LOGDIR"
    echo ""
    echo "Starting TensorBoard..."
    echo ""
    source activate $PIPELINE_TENSORBOARD_CONDA_ENV_NAME
    tensorboard --reload_interval=30 --logdir=$PIPELINE_TENSORBOARD_LOGDIR
    echo ""
    echo "...TensorBoard Started!"
    echo ""
}

start_websocket_kafka_log_stream() {
    # TODO:  Log relevant stuff
    echo "PIPELINE_WEBSOCKET_KAFKA_SERVER_PATH=$PIPELINE_WEBSOCKET_KAFKA_SERVER_PATH"
    echo "PIPELINE_WEBSOCKET_KAFKA_SERVER_PORT=$PIPELINE_WEBSOCKET_KAFKA_SERVER_PORT"
    echo "PIPELINE_WEBSOCKET_KAFKA_SERVER_UPDATE_INTERVAL=$PIPELINE_WEBSOCKET_KAFKA_SERVER_UPDATE_INTERVAL"
    echo ""
    echo "Starting WebSocket Kafka Log Stream Server..."
    echo ""
    source activate $PIPELINE_WEBSOCKET_KAFKA_CONDA_ENV_NAME
    # Start Python, WebSocket, Tornado--based Kafka Log Stream Server
    $PIPELINE_WEBSOCKET_KAFKA_SERVER_PATH/ws_kafka_topic_stream.py --PIPELINE_WEBSOCKET_KAFKA_SERVER_PORT=$PIPELINE_WEBSOCKET_KAFKA_SERVER_PORT --PIPELINE_WEBSOCKET_KAFKA_SERVER_UPDATE_INTERVAL=$PIPELINE_WEBSOCKET_KAFKA_SERVER_UPDATE_INTERVAL
    echo ""
    echo "...Server Started!"
    echo ""
}

source sysutils/container-limits.sh

# Start Nginx Server
service nginx start

# Start Prometheus Metrics Server
prometheus -config.file=/root/prometheus-1.7.1.linux-amd64/prometheus.yml &

# Start Grafana Dashboard Server
cd /root/grafana-$GRAFANA_VERSION/ && bin/grafana-server web &

# Start Kafka REST API (includes Kafka Broker and Kafka Schema Registry)
cd /root 
confluent start kafka &

echo "Required Environment Variables..."
echo "PIPELINE_MODEL_TYPE=$PIPELINE_MODEL_TYPE"
echo "PIPELINE_MODEL_NAME=$PIPELINE_MODEL_NAME"
echo "PIPELINE_MODEL_TAG=$PIPELINE_MODEL_TAG"
echo "PIPELINE_MODEL_PATH=$PIPELINE_MODEL_PATH"

echo ""
echo "___________________________________________"
echo " __     __   ___              ___          "
echo "|__) | |__) |__  |    | |\ | |__      /\  |"
echo "|    | |    |___ |___ | | \| |___    /~~\ |"
echo "___________________________________________"
echo ""

start_websocket_kafka_log_stream &

start_model_serving_python &
[ -s $PIPELINE_MODEL_PATH/pipeline_train.py ] \
  && start_tensorboard &

[ -s $PIPELINE_MODEL_PATH/versions ] \
  && start_tensorflow_serving &

start_hystrix_dashboard &

start_model_serving_jvm 
