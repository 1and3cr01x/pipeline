{
  "paragraphs": [
    {
      "text": "%dep\nz.reset()\nz.addRepo(\"maven central\").url(\"search.maven.org\")\nz.load(\"com.datastax.spark:spark-cassandra-connector_2.10:1.4.0\")\nz.load(\"org.elasticsearch:elasticsearch-spark_2.10:2.1.2\")\nz.load(\"com.databricks:spark-csv_2.10:1.2.0\")\nz.load(\"org.apache.spark:spark-streaming-kafka-assembly_2.10:1.5.1\")\nz.load(\"redis.clients:jedis:2.7.3\")\nz.load(\"/root/zeppelin-0.6.0-spark-1.5.1-hadoop-2.6.0-fluxcapacitor/lib/mysql-connector-java.jar\")\nz.load(\"com.twitter:algebird-core_2.10:0.11.0\")\nz.load(\"com.madhukaraphatak:java-sizeof_2.10:0.1\")\nz.load(\"/root/pipeline/myapps/sql/target/scala-2.10/sql_2.10-1.0.jar\")\n",
      "dateUpdated": "Dec 26, 2015 10:50:06 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1450580406758_1507036131",
      "id": "20151220-030006_1617695621",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res0: org.apache.zeppelin.spark.dep.Dependency \u003d org.apache.zeppelin.spark.dep.Dependency@2fbcbf8c\n"
      },
      "dateCreated": "Dec 20, 2015 3:00:06 AM",
      "dateStarted": "Dec 26, 2015 10:50:06 PM",
      "dateFinished": "Dec 26, 2015 10:50:11 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md ### Much Inspiration Drawn from the Following:\n* https://github.com/twitter/algebird/wiki/\n* https://github.com/twitter/algebird/wiki/Learning-Algebird-Monoids-with-REPL\n* http://donlehmanjr.com/Science/03%20Decay%20Ave/032.htm\n* https://github.com/phatak-dev/java-sizeof",
      "dateUpdated": "Dec 26, 2015 10:49:45 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1450587461034_-1916605796",
      "id": "20151220-045741_209948563",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch3\u003eMuch Inspiration Drawn from the Following:\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003ehttps://github.com/twitter/algebird/wiki/\u003c/li\u003e\n\u003cli\u003ehttps://github.com/twitter/algebird/wiki/Learning-Algebird-Monoids-with-REPL\u003c/li\u003e\n\u003cli\u003ehttp://donlehmanjr.com/Science/03%20Decay%20Ave/032.htm\u003c/li\u003e\n\u003cli\u003ehttps://github.com/phatak-dev/java-sizeof\u003c/li\u003e\n\u003c/ul\u003e\n"
      },
      "dateCreated": "Dec 20, 2015 4:57:41 AM",
      "dateStarted": "Dec 26, 2015 1:15:54 AM",
      "dateFinished": "Dec 26, 2015 1:15:54 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Normal Scala/Java Set",
      "text": "import com.madhukaraphatak.sizeof.SizeEstimator\n\nval memorySizeString \u003d SizeEstimator.estimate(\"abc\");\n\nval set \u003d (Set(1) ++ Set(2,3) ++ Set(3,4) ++ Set(5))\nval memorySizeSet \u003d SizeEstimator.estimate(set)",
      "dateUpdated": "Dec 26, 2015 10:50:14 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1450585060337_-1269629404",
      "id": "20151220-041740_860606599",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import com.madhukaraphatak.sizeof.SizeEstimator\nmemorySizeString: Long \u003d 48\nset: scala.collection.immutable.Set[Int] \u003d Set(5, 1, 2, 3, 4)\nmemorySizeSet: Long \u003d 312\n"
      },
      "dateCreated": "Dec 20, 2015 4:17:40 AM",
      "dateStarted": "Dec 26, 2015 10:50:14 PM",
      "dateFinished": "Dec 26, 2015 10:50:25 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "HyperLogLog (Count Distinct)",
      "text": "import com.twitter.algebird.HyperLogLog._\n\n// HyperLogLogAggregator - High Level Convenience\nimport com.twitter.algebird.HyperLogLogAggregator\n\nval hllAgg \u003d HyperLogLogAggregator.withBits[Int](14)\n\nval hllAggs \u003d hllAgg(List(1)) + hllAgg(List(1,2)) + hllAgg(List(2,3)) + hllAgg(List(3,4)) + hllAgg(List(4,5)) + hllAgg(List(5))\nval memorySizeHllAggs \u003d SizeEstimator.estimate(hllAggs)\n\nval hllAggs2 \u003d hllAgg((List(1) ++ List(2,3) ++ List(3,4) ++ List(5)))\nval memorySizeHllAggs2 \u003d SizeEstimator.estimate(hllAggs)\n\nval approxSize \u003d hllAggs.approximateSize\nval approxSizeMin \u003d approxSize.min\nval approxSizeEstimate \u003d approxSize.estimate\nval approxSizeMax \u003d approxSize.max\nval approxSizeEstimateProbabilityWithinBounds \u003d approxSize.probWithinBounds\n\nval estimatedSize \u003d hllAggs.estimatedSize\nval estimatedSizeInt \u003d estimatedSize.toInt\n\n// HyperLogLogMonoid - Low Level\nimport com.twitter.algebird.HyperLogLogMonoid\nval hllMonoid \u003d new HyperLogLogMonoid(14)\nval lists \u003d (List(1) ++ List(2,3) ++ List(3,4) ++ List(5))\nval hlls \u003d lists.map(hllMonoid.create(_))\nval combinedHllMonoid \u003d hllMonoid.sum(hlls)\nval memorySizeCombinedHllMonoid \u003d SizeEstimator.estimate(combinedHllMonoid)\nval approxSizeEstimateHllMonoid \u003d hllMonoid.sizeOf(combinedHllMonoid)",
      "dateUpdated": "Dec 26, 2015 10:50:42 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1450580466626_413857236",
      "id": "20151220-030106_1914295026",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import com.twitter.algebird.HyperLogLog._\nimport com.twitter.algebird.HyperLogLogAggregator\nhllAgg: com.twitter.algebird.GenHLLAggregator[Int] \u003d GenHLLAggregator(com.twitter.algebird.HyperLogLogMonoid@5b2c8128,com.twitter.algebird.Hash128$$anon$5@7fe1d2e9)\nhllAggs: com.twitter.algebird.HLL \u003d SparseHLL(14,Map(10388 -\u003e Max(1), 9650 -\u003e Max(1), 15708 -\u003e Max(2), 10082 -\u003e Max(3), 6205 -\u003e Max(1)))\nmemorySizeHllAggs: Long \u003d 680\nhllAggs2: com.twitter.algebird.HLL \u003d SparseHLL(14,Map(10388 -\u003e Max(1), 9650 -\u003e Max(1), 15708 -\u003e Max(2), 10082 -\u003e Max(3), 6205 -\u003e Max(1)))\nmemorySizeHllAggs2: Long \u003d 680\napproxSize: com.twitter.algebird.Approximate[Long] \u003d Approximate(4,5,6,0.9972)\napproxSizeMin: Long \u003d 4\napproxSizeEstimate: Long \u003d 5\napproxSizeMax: Long \u003d 6\napproxSizeEstimateProbabilityWithinBounds: Double \u003d 0.9972\nestimatedSize: Double \u003d 5.0007630947088195\nestimatedSizeInt: Int \u003d 5\nimport com.twitter.algebird.HyperLogLogMonoid\nhllMonoid: com.twitter.algebird.HyperLogLogMonoid \u003d com.twitter.algebird.HyperLogLogMonoid@45645ad1\nlists: List[Int] \u003d List(1, 2, 3, 3, 4, 5)\nhlls: List[com.twitter.algebird.HLL] \u003d List(SparseHLL(14,Map(9650 -\u003e Max(1))), SparseHLL(14,Map(10082 -\u003e Max(3))), SparseHLL(14,Map(6205 -\u003e Max(1))), SparseHLL(14,Map(6205 -\u003e Max(1))), SparseHLL(14,Map(10388 -\u003e Max(1))), SparseHLL(14,Map(15708 -\u003e Max(2))))\ncombinedHllMonoid: com.twitter.algebird.HLL \u003d SparseHLL(14,Map(10388 -\u003e Max(1), 9650 -\u003e Max(1), 15708 -\u003e Max(2), 10082 -\u003e Max(3), 6205 -\u003e Max(1)))\nmemorySizeCombinedHllMonoid: Long \u003d 680\napproxSizeEstimateHllMonoid: com.twitter.algebird.Approximate[Long] \u003d Approximate(4,5,6,0.9972)\n"
      },
      "dateCreated": "Dec 20, 2015 3:01:06 AM",
      "dateStarted": "Dec 26, 2015 10:50:42 PM",
      "dateFinished": "Dec 26, 2015 10:50:44 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "CountMin Sketch (Frequency, Count, Heavy Hitter)",
      "text": "import com.twitter.algebird.CMS\nimport com.twitter.algebird.CMSAggregator\nimport com.twitter.algebird.CMSHasherImplicits._\n\nval cmsMonoid \u003d CMS.monoid[Int](0.001, 1E-10, 1) \n\nval cmsAgg \u003d CMSAggregator(cmsMonoid)\nval lists \u003d (List(1) ++ List(2,3) ++ List(3,4) ++ List(5))\nval cmsAggs \u003d cmsAgg(lists)\n\nval memorySizeCombinedCmsAggs \u003d SizeEstimator.estimate(cmsAggs)\n\nval totalCount \u003d cmsAggs.totalCount\nval frequency1 \u003d cmsAggs.frequency(1).estimate\nval frequency1 \u003d cmsAggs.frequency(3).estimate",
      "dateUpdated": "Dec 26, 2015 10:49:45 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1450580555966_-894350321",
      "id": "20151220-030235_1437861013",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import com.twitter.algebird.CMS\nimport com.twitter.algebird.CMSAggregator\nimport com.twitter.algebird.CMSHasherImplicits._\ncmsMonoid: com.twitter.algebird.CMSMonoid[Int] \u003d com.twitter.algebird.CMSMonoid@40e86e16\ncmsAgg: com.twitter.algebird.CMSAggregator[Int] \u003d CMSAggregator(com.twitter.algebird.CMSMonoid@40e86e16)\nlists: List[Int] \u003d List(1, 2, 3, 3, 4, 5)\ncmsAggs: com.twitter.algebird.CMS[Int] \u003d CMSInstance(CountsTable(Vector(Vector(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0...memorySizeCombinedCmsAggs: Long \u003d 310488\ntotalCount: Long \u003d 6\nfrequency1: Long \u003d 1\nfrequency1: Long \u003d 2\n"
      },
      "dateCreated": "Dec 20, 2015 3:02:35 AM",
      "dateStarted": "Dec 26, 2015 1:15:55 AM",
      "dateFinished": "Dec 26, 2015 1:15:59 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Decay Average vs Moving Average",
      "dateUpdated": "Dec 26, 2015 10:49:45 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1450587563774_1352590284",
      "id": "20151220-045923_327498017",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT"
      },
      "dateCreated": "Dec 20, 2015 4:59:23 AM",
      "dateStarted": "Dec 26, 2015 1:15:59 AM",
      "dateFinished": "Dec 26, 2015 1:15:59 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Algebird/02: CountMin Sketch (Count)",
  "id": "2B7S5BZQV",
  "angularObjects": {
    "2ARR8UZDJ": [],
    "2AS9P7JSA": [],
    "2AR33ZMZJ": []
  },
  "config": {
    "looknfeel": "default"
  },
  "info": {}
}