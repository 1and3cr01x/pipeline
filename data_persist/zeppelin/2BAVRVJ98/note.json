{
  "paragraphs": [
    {
      "text": "import org.apache.spark.mllib.linalg.Vectors\nimport org.apache.spark.mllib.linalg.distributed.MatrixEntry\nimport org.apache.spark.mllib.linalg.distributed.RowMatrix\n\nval threshold \u003d 0.1\n\n//       word1, word2, word3\n// doc1\n// doc2\n// doc2\n                                        //       word1, word2, word3\nval data \u003d Array(Array(0.0, 1.0, 2.0),  // doc1 (     , 0.98 , 0.77 )\n                 Array(2.0, 3.0, 2.0),  // doc2 (     ,      , 0.88 )\n                 Array(4.0, 5.0, 2.0))  // doc3 (     ,      ,      )\n\nval rows \u003d sc.parallelize(data).map { datum \u003d\u003e\n  val values \u003d datum.map(_.toDouble)\n  Vectors.dense(values)\n}.cache()\n\nval mat \u003d new RowMatrix(rows)\n\n// Compute similar columns perfectly, with brute force.\nval exact \u003d mat.columnSimilarities()\n\n// Compute similar columns with estimation using DIMSUM\nval approx \u003d mat.columnSimilarities(threshold)\n\nval exactEntries \u003d exact.entries.map { case MatrixEntry(i, j, u) \u003d\u003e ((i, j), u) }\nval approxEntries \u003d approx.entries.map { case MatrixEntry(i, j, v) \u003d\u003e ((i, j), v) }\n\n// Print the Cosine Similarities\n//   Cosine Similarity \u003d dot product of two vectors / product of their length\n//   (Normalizes to unit vectors)\napprox.entries.collect().foreach(entry \u003d\u003e println(s\"\"\"${entry.i}, ${entry.j}, ${entry.value}\"\"\"))\n\nval meanAbsoluteError \u003d exactEntries.leftOuterJoin(approxEntries).values.map {\n  case (u, Some(v)) \u003d\u003e\n    math.abs(u - v)\n  case (u, None) \u003d\u003e\n    math.abs(u)\n}.mean()\n\nprintln(s\"Average absolute error in estimate is: ${meanAbsoluteError}\")\n",
      "dateUpdated": "Jan 3, 2016 12:56:37 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451781260472_665258555",
      "id": "20160103-003420_256708239",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.mllib.linalg.Vectors\nimport org.apache.spark.mllib.linalg.distributed.MatrixEntry\nimport org.apache.spark.mllib.linalg.distributed.RowMatrix\nthreshold: Double \u003d 0.1\ndata: Array[Array[Double]] \u003d Array(Array(0.0, 1.0, 2.0), Array(2.0, 3.0, 2.0), Array(4.0, 5.0, 2.0))\nrows: org.apache.spark.rdd.RDD[org.apache.spark.mllib.linalg.Vector] \u003d MapPartitionsRDD[190] at map at \u003cconsole\u003e:77\nmat: org.apache.spark.mllib.linalg.distributed.RowMatrix \u003d org.apache.spark.mllib.linalg.distributed.RowMatrix@6a6e8415\nexact: org.apache.spark.mllib.linalg.distributed.CoordinateMatrix \u003d org.apache.spark.mllib.linalg.distributed.CoordinateMatrix@10b6b9a3\napprox: org.apache.spark.mllib.linalg.distributed.CoordinateMatrix \u003d org.apache.spark.mllib.linalg.distributed.CoordinateMatrix@52111ac7\nexactEntries: org.apache.spark.rdd.RDD[((Long, Long), Double)] \u003d MapPartitionsRDD[205] at map at \u003cconsole\u003e:83\napproxEntries: org.apache.spark.rdd.RDD[((Long, Long), Double)] \u003d MapPartitionsRDD[206] at map at \u003cconsole\u003e:84\n0, 2, 0.7745966692414834\n1, 2, 0.87831006565368\n0, 1, 0.9827076298239907\nmeanAbsoluteError: Double \u003d 3.700743415417188E-17\nAverage absolute error in estimate is: 3.700743415417188E-17\n"
      },
      "dateCreated": "Jan 3, 2016 12:34:20 AM",
      "dateStarted": "Jan 3, 2016 12:54:05 AM",
      "dateFinished": "Jan 3, 2016 12:54:06 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451781443287_-1595263826",
      "id": "20160103-003723_1720060116",
      "dateCreated": "Jan 3, 2016 12:37:23 AM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Approx/06: DIMSUM Cosine Similarity",
  "id": "2BAVRVJ98",
  "angularObjects": {
    "2ARR8UZDJ": [],
    "2AS9P7JSA": [],
    "2AR33ZMZJ": []
  },
  "config": {},
  "info": {}
}