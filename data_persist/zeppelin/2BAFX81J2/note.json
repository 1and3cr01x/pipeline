{
  "paragraphs": [
    {
      "text": "%md ![Most Desirable Users](http://advancedspark.com/img/connected-users-with-cost.png)",
      "dateUpdated": "Jan 10, 2016 2:33:10 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "enabled": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451274621785_-2091468050",
      "id": "20151228-035021_708663317",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003e\u003cimg src\u003d\"http://advancedspark.com/img/connected-users-with-cost.png\" alt\u003d\"Most Desirable Users\" /\u003e\u003c/p\u003e\n"
      },
      "dateCreated": "Dec 28, 2015 3:50:21 AM",
      "dateStarted": "Jan 10, 2016 2:33:10 AM",
      "dateFinished": "Jan 10, 2016 2:33:10 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import com.advancedspark.ml.graph.Dijkstra\nimport org.apache.spark.graphx.Edge\nimport org.apache.spark.graphx.Graph\n\nval graphDF \u003d sqlContext.read\n  .format(\"com.databricks.spark.csv\")\n  .option(\"header\", \"false\")\n  .load(\"/root/pipeline/datasets/graph/graph.csv\")\n  .toDF(\"userId1\", \"userId2\", \"cost\")\n  \n// Edges has a cost that we\u0027re trying to minimize\nval connectionEdgesRDD \u003d graphDF.map(row \u003d\u003e {\n  Edge(row(0).toString.toLong, row(1).toString.toLong, row(2).toString.toDouble)\n})\n\nval graph \u003d Graph.fromEdges(connectionEdgesRDD, 0L)",
      "dateUpdated": "Jan 10, 2016 2:33:10 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451274763346_-1561452631",
      "id": "20151228-035243_771934602",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import com.advancedspark.ml.graph.Dijkstra\nimport org.apache.spark.graphx.Edge\nimport org.apache.spark.graphx.Graph\ngraphDF: org.apache.spark.sql.DataFrame \u003d [userId1: string, userId2: string, cost: string]\nconnectionEdgesRDD: org.apache.spark.rdd.RDD[org.apache.spark.graphx.Edge[Double]] \u003d MapPartitionsRDD[1050] at map at \u003cconsole\u003e:54\ngraph: org.apache.spark.graphx.Graph[Long,Double] \u003d org.apache.spark.graphx.impl.GraphImpl@13f9eff\n"
      },
      "dateCreated": "Dec 28, 2015 3:52:43 AM",
      "dateStarted": "Jan 10, 2016 2:33:10 AM",
      "dateFinished": "Jan 10, 2016 2:33:11 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Run Dijkstra on the entire graph From the given source",
      "text": "val src \u003d  10002L \n\nval shortestPathGraph \u003d Dijkstra.run(graph, src)",
      "dateUpdated": "Jan 10, 2016 2:33:10 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1452393064783_1985034596",
      "id": "20160110-023104_1688931389",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "src: Long \u003d 10002\nshortestPathGraph: org.apache.spark.graphx.Graph[(org.apache.spark.graphx.VertexId, List[Any]),Double] \u003d org.apache.spark.graphx.impl.GraphImpl@7665852d\n"
      },
      "dateCreated": "Jan 10, 2016 2:31:04 AM",
      "dateStarted": "Jan 10, 2016 2:33:11 AM",
      "dateFinished": "Jan 10, 2016 2:33:12 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Filter the shortest path for the given destination",
      "text": "val dest \u003d 90002L \n\nval shortestPathFromSrcToDest \u003d shortestPathGraph.vertices.filter(_._1 \u003d\u003d dest).map(_._2).collect()(0)._2\n\n// Example:  Shortest Path (Total Cost \u003d\u003d 11)\n//   10002 -5-\u003e 90003 -2-\u003e 10001 -1-\u003e 90001 -3-\u003e 90002",
      "dateUpdated": "Jan 10, 2016 2:33:10 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "enabled": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451401103924_621545220",
      "id": "20151229-145823_414962899",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "dest: Long \u003d 90002\nshortestPathFromSrcToDest: List[Any] \u003d List(11.0, List(10002, 90003, 10001, 90001))\n"
      },
      "dateCreated": "Dec 29, 2015 2:58:23 PM",
      "dateStarted": "Jan 10, 2016 2:33:11 AM",
      "dateFinished": "Jan 10, 2016 2:33:12 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "dateUpdated": "Jan 10, 2016 2:33:10 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1452393129072_868924533",
      "id": "20160110-023209_2040190288",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT"
      },
      "dateCreated": "Jan 10, 2016 2:32:09 AM",
      "dateStarted": "Jan 10, 2016 2:33:12 AM",
      "dateFinished": "Jan 10, 2016 2:33:12 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Graph/03: Shortest Path (Dijkstra)",
  "id": "2BAFX81J2",
  "angularObjects": {
    "2ARR8UZDJ": [],
    "2AS9P7JSA": [],
    "2AR33ZMZJ": []
  },
  "config": {
    "looknfeel": "default"
  },
  "info": {}
}