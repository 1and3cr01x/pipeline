{
  "paragraphs": [
    {
      "title": "Retrieve Dataset",
      "text": "val itemsDF \u003d sqlContext.read.format(\"json\")\n  .option(\"inferSchema\", \"false\")\n  .load(\"file:/root/pipeline/html/advancedspark.com/json/software.json\")",
      "dateUpdated": "Jan 17, 2016 12:45:14 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "tableHide": false,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451323111480_-372297908",
      "id": "20151228-171831_1063248354",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "itemsDF: org.apache.spark.sql.DataFrame \u003d [category: string, description: string, id: bigint, img: string, tags: array\u003cstring\u003e, title: string]\n"
      },
      "dateCreated": "Dec 28, 2015 5:18:31 PM",
      "dateStarted": "Jan 17, 2016 12:45:14 AM",
      "dateFinished": "Jan 17, 2016 12:59:11 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md ![SVD](http://fluxcapacitor.com/img/svd.png)",
      "dateUpdated": "Feb 4, 2016 3:42:37 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1454557295799_-2082924103",
      "id": "20160204-034135_298154292",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003e\u003cimg src\u003d\"http://fluxcapacitor.com/img/svd.png\" alt\u003d\"SVD\" /\u003e\u003c/p\u003e\n"
      },
      "dateCreated": "Feb 4, 2016 3:41:35 AM",
      "dateStarted": "Feb 4, 2016 3:42:37 AM",
      "dateFinished": "Feb 4, 2016 3:42:37 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val ratingsEdgeRDD \u003d itemRatingsDF.map(row \u003d\u003e\n  Edge(row(0).toString.toLong, row(1).toString.toLong, row(2).toString.toDouble)\n)\n\nratingsEdgeRDD.collect()",
      "dateUpdated": "Jan 17, 2016 12:45:00 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451357971347_956206859",
      "id": "20151229-025931_21691538",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "\u003cconsole\u003e:27: error: not found: value itemRatingsDF\n         val ratingsEdgeRDD \u003d itemRatingsDF.map(row \u003d\u003e\n                              ^\n"
      },
      "dateCreated": "Dec 29, 2015 2:59:31 AM",
      "dateStarted": "Jan 17, 2016 12:45:03 AM",
      "dateFinished": "Jan 17, 2016 12:59:03 AM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md ![SVD++ Return Value](http://fluxcapacitor.com/img/svdplusplus-return-value.png)",
      "dateUpdated": "Feb 4, 2016 3:43:10 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/markdown"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1452469161222_-1927724537",
      "id": "20160110-233921_1209042443",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003e\u003cimg src\u003d\"http://fluxcapacitor.com/img/svdplusplus-return-value.png\" alt\u003d\"SVD++ Return Value\" /\u003e\u003c/p\u003e\n"
      },
      "dateCreated": "Jan 10, 2016 11:39:21 PM",
      "dateStarted": "Feb 4, 2016 3:43:10 AM",
      "dateFinished": "Feb 4, 2016 3:43:11 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val rank \u003d 2\nval maxIterations \u003d 10\nval minRating \u003d 0\nval maxRating \u003d 1\nval gamma1 \u003d 0.007\nval gamma2 \u003d 0.007\nval gamma6 \u003d 0.005\nval gamma7 \u003d 0.015\n\nval conf \u003d new Conf(rank, maxIterations, minRating, maxRating, gamma1, gamma2, gamma6, gamma7)\nvar (graph, mean) \u003d SVDPlusPlus.run(ratingsEdgeRDD, conf)",
      "dateUpdated": "Jan 7, 2016 10:53:38 PM",
      "config": {
        "colWidth": 12.0,
        "tableHide": false,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451354329573_231527708",
      "id": "20151229-015849_1310275494",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "rank: Int \u003d 2\nmaxIterations: Int \u003d 10\nminRating: Int \u003d 0\nmaxRating: Int \u003d 1\ngamma1: Double \u003d 0.007\ngamma2: Double \u003d 0.007\ngamma6: Double \u003d 0.005\ngamma7: Double \u003d 0.015\nconf: org.apache.spark.graphx.lib.SVDPlusPlus.Conf \u003d org.apache.spark.graphx.lib.SVDPlusPlus$Conf@643ede9d\ngraph: org.apache.spark.graphx.Graph[(Array[Double], Array[Double], Double, Double),Double] \u003d org.apache.spark.graphx.impl.GraphImpl@31d153c7\nmean: Double \u003d 1.0\n"
      },
      "dateCreated": "Dec 29, 2015 1:58:49 AM",
      "dateStarted": "Jan 7, 2016 10:53:40 PM",
      "dateFinished": "Jan 7, 2016 10:53:44 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val userId \u003d 71042L\nval itemId \u003d 12L",
      "dateUpdated": "Jan 7, 2016 10:55:18 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1452207316831_1389601010",
      "id": "20160107-225516_1817098690",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "userId: Long \u003d 71042\nitemId: Long \u003d 12\n"
      },
      "dateCreated": "Jan 7, 2016 10:55:16 PM",
      "dateStarted": "Jan 7, 2016 10:55:18 PM",
      "dateFinished": "Jan 7, 2016 10:55:19 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "graph.vertices.filter(_._1 \u003d\u003d userId).collect()(0)._2",
      "dateUpdated": "Jan 7, 2016 10:55:34 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1452207332464_-528741682",
      "id": "20160107-225532_738798175",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res79: (Array[Double], Array[Double], Double, Double) \u003d (Array(0.5257774525023029, 0.28524841120142697),Array(3.415139857390967, 0.7993775181499537),0.0,0.22360679774997896)\n"
      },
      "dateCreated": "Jan 7, 2016 10:55:32 PM",
      "dateStarted": "Jan 7, 2016 10:55:34 PM",
      "dateFinished": "Jan 7, 2016 10:55:35 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "graph.vertices.collect()",
      "dateUpdated": "Jan 7, 2016 10:53:38 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451435935341_-908314701",
      "id": "20151230-003855_1015233782",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res64: Array[(org.apache.spark.graphx.VertexId, (Array[Double], Array[Double], Double, Double))] \u003d Array((13,(Array(0.5358208603770844, 0.29069723013745136),Array(0.6455757398696033, 0.1147826774481492),0.0,0.0)), (19,(Array(0.5363838564741003, 0.29100267066446933),Array(0.6462540572863963, 0.11490328156080526),0.0,0.0)), (39,(Array(0.5363838564741003, 0.29100267066446933),Array(0.6462540572863963, 0.11490328156080526),0.0,0.0)), (81,(Array(0.5363838564741003, 0.29100267066446933),Array(0.6462540572863963, 0.11490328156080526),0.0,0.0)), (4,(Array(0.5358208603770844, 0.29069723013745136),Array(0.6455757398696033, 0.1147826774481492),0.0,0.0)), (71,(Array(0.5363838564741003, 0.29100267066446933),Array(0.6462540572863963, 0.11490328156080526),0.0,0.0)), (16,(Array(0.5363838564741003, 0.29..."
      },
      "dateCreated": "Dec 30, 2015 12:38:55 AM",
      "dateStarted": "Jan 7, 2016 10:53:41 PM",
      "dateFinished": "Jan 7, 2016 10:53:44 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "def predict(graph:Graph[(Array[Double], Array[Double], Double, Double), Double], meanRating:Double, userId:Long, itemId:Long) \u003d {\r  // TODO:  Figure out why we need semi-colons here\r  val user \u003d graph.vertices.filter(_._1 \u003d\u003d userId).collect()(0)._2;\r  val item \u003d graph.vertices.filter(_._1 \u003d\u003d itemId).collect()(0)._2;\r  \r  mean + user._3 + item._3 + item._1.zip(user._2).map(x \u003d\u003e x._1 * x._2).reduce(_ + _)\r}",
      "dateUpdated": "Feb 4, 2016 3:43:44 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451357775195_-2092233653",
      "id": "20151229-025615_859618782",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "\u003cconsole\u003e:27: error: not found: type Graph\n         def predict(graph:Graph[(Array[Double], Array[Double], Double, Double),\n                           ^\n\u003cconsole\u003e:33: error: ambiguous reference to overloaded definition,\nboth method mean in object functions of type (columnName: String)org.apache.spark.sql.Column\nand  method mean in object functions of type (e: org.apache.spark.sql.Column)org.apache.spark.sql.Column\nmatch expected type ?\n  mean + user._3 + item._3 + item._1.zip(user._2).map(x \u003d\u003e x._1 * x._2).reduce(_ + _)\n  ^\n"
      },
      "dateCreated": "Dec 29, 2015 2:56:15 AM",
      "dateStarted": "Feb 4, 2016 3:43:31 AM",
      "dateFinished": "Feb 4, 2016 3:43:45 AM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// TODO:  Figure out why this is returning a value outside [minRating,maxRating]\nval prediction \u003d predict(graph, mean, userId, itemId)",
      "dateUpdated": "Jan 7, 2016 10:55:28 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451433379446_-1597057916",
      "id": "20151229-235619_664225396",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "prediction: Double \u003d 3.064446879756548\n"
      },
      "dateCreated": "Dec 29, 2015 11:56:19 PM",
      "dateStarted": "Jan 7, 2016 10:55:28 PM",
      "dateFinished": "Jan 7, 2016 10:55:29 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "dateUpdated": "Jan 7, 2016 10:53:39 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451433387431_-91135396",
      "id": "20151229-235627_762260740",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT"
      },
      "dateCreated": "Dec 29, 2015 11:56:27 PM",
      "dateStarted": "Jan 7, 2016 10:53:46 PM",
      "dateFinished": "Jan 7, 2016 10:53:46 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Live Recs/07: TODO: SVD++ Collaborative Filter",
  "id": "2BA66E1K5",
  "angularObjects": {
    "2ARR8UZDJ": [],
    "2AS9P7JSA": [],
    "2AR33ZMZJ": []
  },
  "config": {
    "looknfeel": "default"
  },
  "info": {}
}