{
  "paragraphs": [
    {
      "text": "import org.apache.spark.graphx._\nimport org.apache.spark.graphx.lib.SVDPlusPlus\nimport org.apache.spark.graphx.lib.SVDPlusPlus._\nimport org.apache.spark.sql._\nimport org.apache.spark.sql.types._",
      "dateUpdated": "Dec 30, 2015 12:35:53 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "tableHide": false,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451318099632_1275613400",
      "id": "20151228-155459_1951209027",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.graphx._\nimport org.apache.spark.graphx.lib.SVDPlusPlus\nimport org.apache.spark.graphx.lib.SVDPlusPlus._\nimport org.apache.spark.sql._\nimport org.apache.spark.sql.types._\n"
      },
      "dateCreated": "Dec 28, 2015 3:54:59 PM",
      "dateStarted": "Dec 30, 2015 12:35:53 AM",
      "dateFinished": "Dec 30, 2015 12:35:54 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val itemsDF \u003d sqlContext.read.format(\"json\")\n  .option(\"inferSchema\", \"false\")\n  .load(\"file:/root/pipeline/html/advancedspark.com/json/software.json\")",
      "dateUpdated": "Dec 30, 2015 12:34:19 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "tableHide": false,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451323111480_-372297908",
      "id": "20151228-171831_1063248354",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "itemsDF: org.apache.spark.sql.DataFrame \u003d [description: string, id: bigint, img: string, tags: array\u003cstring\u003e, title: string]\n"
      },
      "dateCreated": "Dec 28, 2015 5:18:31 PM",
      "dateStarted": "Dec 30, 2015 12:34:19 AM",
      "dateFinished": "Dec 30, 2015 12:34:20 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val ratingsEdgeRDD \u003d itemRatingsDF.map(row \u003d\u003e\n  Edge(row(0).toString.toLong, row(1).toString.toLong, row(2).toString.toDouble)\n)\n\nratingsEdgeRDD.collect()",
      "dateUpdated": "Dec 30, 2015 12:34:21 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451357971347_956206859",
      "id": "20151229-025931_21691538",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "ratingsEdgeRDD: org.apache.spark.rdd.RDD[org.apache.spark.graphx.Edge[Double]] \u003d MapPartitionsRDD[826] at map at \u003cconsole\u003e:46\nres45: Array[org.apache.spark.graphx.Edge[Double]] \u003d Array(Edge(71042,1,1.0), Edge(71042,3,1.0), Edge(71042,4,1.0), Edge(71042,5,1.0), Edge(71042,7,1.0), Edge(71042,9,1.0), Edge(71042,10,1.0), Edge(71042,13,1.0), Edge(71042,14,1.0), Edge(71042,17,1.0), Edge(71042,20,1.0), Edge(71042,22,1.0), Edge(71042,23,1.0), Edge(71042,25,1.0), Edge(71042,28,1.0), Edge(71042,29,1.0), Edge(71042,30,1.0), Edge(71042,31,1.0), Edge(71042,32,1.0), Edge(71042,35,1.0), Edge(24890,4,1.0), Edge(24890,5,1.0), Edge(24890,6,1.0), Edge(24890,7,1.0), Edge(24890,9,1.0), Edge(24890,10,1.0), Edge(24890,11,1.0), Edge(24890,12,1.0), Edge(24890,13,1.0), Edge(24890,15,1.0), Edge(24890,16,1.0), Edge(24890,18,1.0), Edge(24890,19,1.0), Edge(24890,20,1.0), Edge(24890,21,1.0), Edge(24890,22,1.0), Edge(24890,25,1.0), Edge(2489..."
      },
      "dateCreated": "Dec 29, 2015 2:59:31 AM",
      "dateStarted": "Dec 30, 2015 12:34:21 AM",
      "dateFinished": "Dec 30, 2015 12:34:21 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val rank \u003d 2\nval maxIterations \u003d 10\nval minRating \u003d 0\nval maxRating \u003d 1\nval gamma1 \u003d 0.007\nval gamma2 \u003d 0.007\nval gamma6 \u003d 0.005\nval gamma7 \u003d 0.015\n\nval conf \u003d new Conf(rank, maxIterations, minRating, maxRating, gamma1, gamma2, gamma6, gamma7)\nvar (graph, mean) \u003d SVDPlusPlus.run(ratingsEdgeRDD, conf)",
      "dateUpdated": "Dec 30, 2015 12:35:36 AM",
      "config": {
        "colWidth": 12.0,
        "tableHide": false,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451354329573_231527708",
      "id": "20151229-015849_1310275494",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "rank: Int \u003d 2\nmaxIterations: Int \u003d 10\nminRating: Int \u003d 0\nmaxRating: Int \u003d 1\ngamma1: Double \u003d 0.007\ngamma2: Double \u003d 0.007\ngamma6: Double \u003d 0.005\ngamma7: Double \u003d 0.015\nconf: org.apache.spark.graphx.lib.SVDPlusPlus.Conf \u003d org.apache.spark.graphx.lib.SVDPlusPlus$Conf@63895377\ngraph: org.apache.spark.graphx.Graph[(Array[Double], Array[Double], Double, Double),Double] \u003d org.apache.spark.graphx.impl.GraphImpl@1c002203\nmean: Double \u003d 1.0\n"
      },
      "dateCreated": "Dec 29, 2015 1:58:49 AM",
      "dateStarted": "Dec 30, 2015 12:35:36 AM",
      "dateFinished": "Dec 30, 2015 12:35:39 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "graph.vertices.collect()",
      "dateUpdated": "Dec 30, 2015 12:39:48 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451435935341_-908314701",
      "id": "20151230-003855_1015233782",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res80: Array[(org.apache.spark.graphx.VertexId, (Array[Double], Array[Double], Double, Double))] \u003d Array((13,(Array(0.8956919031459882, 0.9665866688071076),Array(0.5742262303278647, 0.6889924907539489),0.0,0.0)), (19,(Array(0.896633021872208, 0.9676022778701501),Array(0.5748295796007008, 0.6897164268897962),0.0,0.0)), (39,(Array(0.896633021872208, 0.9676022778701501),Array(0.5748295796007008, 0.6897164268897962),0.0,0.0)), (81,(Array(0.896633021872208, 0.9676022778701501),Array(0.5748295796007008, 0.6897164268897962),0.0,0.0)), (4,(Array(0.8956919031459882, 0.9665866688071076),Array(0.5742262303278647, 0.6889924907539489),0.0,0.0)), (71,(Array(0.896633021872208, 0.9676022778701501),Array(0.5748295796007008, 0.6897164268897962),0.0,0.0)), (16,(Array(0.896633021872208, 0.9676022778701501)..."
      },
      "dateCreated": "Dec 30, 2015 12:38:55 AM",
      "dateStarted": "Dec 30, 2015 12:39:48 AM",
      "dateFinished": "Dec 30, 2015 12:39:48 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "graph.vertices.filter(_._1 \u003d\u003d userId).collect()(0)._2",
      "dateUpdated": "Dec 30, 2015 12:45:08 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451436306200_2142848057",
      "id": "20151230-004506_491870451",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res90: (Array[Double], Array[Double], Double, Double) \u003d (Array(0.8789030847578733, 0.9484690013569752),Array(3.449796424601333, 4.0329641132613885),0.0,0.22360679774997896)\n"
      },
      "dateCreated": "Dec 30, 2015 12:45:06 AM",
      "dateStarted": "Dec 30, 2015 12:45:08 AM",
      "dateFinished": "Dec 30, 2015 12:45:11 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "def predict(graph:Graph[(Array[Double], Array[Double], Double, Double), Double], meanRating:Double, userId:Long, itemId:Long) \u003d {\r  // TODO:  Figure out why we need semi-colons here\r  val user \u003d graph.vertices.filter(_._1 \u003d\u003d userId).collect()(0)._2;\r  val item \u003d graph.vertices.filter(_._1 \u003d\u003d itemId).collect()(0)._2;\r  \r  mean + user._3 + item._3 + item._1.zip(user._2).map(x \u003d\u003e x._1 * x._2).reduce(_ + _)\r}",
      "dateUpdated": "Dec 30, 2015 12:43:38 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451357775195_-2092233653",
      "id": "20151229-025615_859618782",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "predict: (graph: org.apache.spark.graphx.Graph[(Array[Double], Array[Double], Double, Double),Double], meanRating: Double, userId: Long, itemId: Long)Double\n"
      },
      "dateCreated": "Dec 29, 2015 2:56:15 AM",
      "dateStarted": "Dec 30, 2015 12:43:38 AM",
      "dateFinished": "Dec 30, 2015 12:43:38 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val userId \u003d 71042L\nval itemId \u003d 12L\n\n// TODO:  Figure out why this is returning a value outside [minRating,maxRating]\nval prediction \u003d predict(graph, mean, userId, itemId)",
      "dateUpdated": "Dec 30, 2015 12:44:21 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451433379446_-1597057916",
      "id": "20151229-235619_664225396",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "userId: Long \u003d 71042\nitemId: Long \u003d 12\nprediction: Double \u003d 7.995506655594521\n"
      },
      "dateCreated": "Dec 29, 2015 11:56:19 PM",
      "dateStarted": "Dec 30, 2015 12:44:21 AM",
      "dateFinished": "Dec 30, 2015 12:44:22 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "dateUpdated": "Dec 30, 2015 12:29:52 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451433387431_-91135396",
      "id": "20151229-235627_762260740",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT"
      },
      "dateCreated": "Dec 29, 2015 11:56:27 PM",
      "dateStarted": "Dec 30, 2015 12:29:58 AM",
      "dateFinished": "Dec 30, 2015 12:29:58 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Live Recs/03: Generate Recs (SVD++ Collab Filter)",
  "id": "2BA66E1K5",
  "angularObjects": {
    "2ARR8UZDJ": [],
    "2AS9P7JSA": [],
    "2AR33ZMZJ": []
  },
  "config": {
    "looknfeel": "default"
  },
  "info": {}
}