{
  "paragraphs": [
    {
      "title": "Retrieve dataset",
      "text": "val itemsDF \u003d sqlContext.read.format(\"json\")\n  .load(\"file:/root/pipeline/html/advancedspark.com/json/software.json\")\n  .select($\"id\", $\"title\", $\"category\", $\"description\")",
      "dateUpdated": "Jan 16, 2016 2:53:48 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451704834989_870454693",
      "id": "20160102-032034_619481341",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "itemsDF: org.apache.spark.sql.DataFrame \u003d [id: bigint, title: string, category: string, description: string]\n"
      },
      "dateCreated": "Jan 2, 2016 3:20:34 AM",
      "dateStarted": "Jan 16, 2016 2:53:48 PM",
      "dateFinished": "Jan 16, 2016 2:53:49 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Show Distinct Categories",
      "text": "val distinctCategoriesDF \u003d itemsDF.select($\"title\", $\"category\").distinct()\nz.show(distinctCategoriesDF)",
      "dateUpdated": "Jan 16, 2016 2:53:48 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": true,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "enabled": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451771827145_-655270163",
      "id": "20160102-215707_46317998",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "title\tcategory\nSpark ML/MLlib\tLibrary\nPostgres\tDatabase\nMemcached\tDistributed Cache\nApache Pig\tData Processing Execution Engine\nKinesis\tLibrary\nSpark Streaming\tLibrary\nApache Parquet\tFile Format\nJSON\tFile Format\nTitan GraphDB\tDatabase\nNLTK\tLibrary\nKnime\tWorkflow\nCSV\tFile Format\nApache Solr\tSearch Engine\nElastic MapReduce\tData Processing Execution Engine\nApache Impala\tData Processing Execution Engine\nApache Hive\tData Processing Execution Engine\nPresto\tData Processing Execution Engine\nApache ZooKeeper\tDistributed Coordinator\nPython\tProgramming Language\nApache Kafka\tMessage Broker\nApache HUE\tUI\nTeradata\tDatabase\nVertica\tDatabase\nApache YARN\tCluster Resource Manager\nApache Nifi\tWorkflow\nRedshift\tDatabase\nMapR\tDistribution\nXML\tFile Format\nDynamoDB\tDatabase\nHortonworks\tDistribution\niPython/Jupyter\tNotebook\nRedis\tDistributed Cache\nScala\tProgramming Language\nApache Ambari\tCluster Provision\nDato GraphLab Create\tLibrary\nAmazon Web Services\tCloud Provider\nApache Flume\tLibrary\nApache Mahout\tLibrary\nStanford CoreNLP\tLibrary\nTachyon\tDistributed Cache\nMicroStrategy\tBI\nApache Cassandra\tDatabase\nS3\tFile System\nNeo4j\tLibrary\nApache Drill\tData Processing Execution Engine\nProtobuffers\tFile Format\nApache Mesos\tCluster Resource Manager\nSQL Server\tDatabase\nApache Flink\tData Processing Execution Engine\nApache Spark\tData Processing Execution Engine\nApache Storm\tStreaming\nSpark SQL\tLibrary\nMicrosft Azure\tCloud Provider\nMySQL\tDatabase\nIBM BigInsights\tDistribution\nMongoDB\tDatabase\nApache Tez\tData Processing Execution Engine\nSci-Kit Learn\tLibrary\nApache HDFS\tFile System\nR\tProgramming Language\nApache Sqoop\tData Import\nApache Lucene\tLibrary\nDeep Learning 4J\tLibrary\nApache Zeppelin\tNotebook\nTableau\tBI\nCloudera\tDistribution\nApache Oozie\tWorkflow\nGoogle Cloud Platform\tCloud Provider\nOn-Premise\tCloud Provider\nDocker\tCategory\nElasticSearch\tSearch Engine\nTensor Flow\tData Processing Execution Engine\nJava\tProgramming Language\nSpark GraphX\tLibrary\nApache Giraph\tLibrary\nApache HBase\tDatabase\nApache ORC\tFile Format\nApache MapReduce\tData Processing Execution Engine\nOracle\tDatabase\nSQL\tProgramming Language\n"
      },
      "dateCreated": "Jan 2, 2016 9:57:07 PM",
      "dateStarted": "Jan 16, 2016 2:53:48 PM",
      "dateFinished": "Jan 16, 2016 2:53:49 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Tokenize",
      "text": "import org.apache.spark.ml.feature.RegexTokenizer\n\n// Split each document into words\nval tokenizer \u003d new RegexTokenizer()\n  .setInputCol(\"description\")\n  .setOutputCol(\"words\")\n  .setGaps(false)\n  .setPattern(\"\\\\p{L}+\")",
      "dateUpdated": "Jan 16, 2016 2:53:48 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451704551688_-754338267",
      "id": "20160102-031551_2007021723",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.ml.feature.RegexTokenizer\ntokenizer: org.apache.spark.ml.feature.RegexTokenizer \u003d regexTok_85c54f624fdc\n"
      },
      "dateCreated": "Jan 2, 2016 3:15:51 AM",
      "dateStarted": "Jan 16, 2016 2:53:49 PM",
      "dateFinished": "Jan 16, 2016 2:53:50 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Remove Common Stop Words",
      "text": "import org.apache.spark.ml.feature.StopWordsRemover\n\n// The following list will be used by default if we don\u0027t specify a list:  \n//   http://ir.dcs.gla.ac.uk/resources/linguistic_utils/stop_words\nval stopWordsFilter \u003d new StopWordsRemover()\n  .setInputCol(tokenizer.getOutputCol)\n  .setOutputCol(\"filteredWords\")\n  .setCaseSensitive(false)",
      "dateUpdated": "Jan 16, 2016 2:53:48 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451413520885_1262045843",
      "id": "20151229-182520_534225248",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.ml.feature.StopWordsRemover\nstopWordsFilter: org.apache.spark.ml.feature.StopWordsRemover \u003d stopWords_09d169ceeb03\n"
      },
      "dateCreated": "Dec 29, 2015 6:25:20 PM",
      "dateStarted": "Jan 16, 2016 2:53:50 PM",
      "dateFinished": "Jan 16, 2016 2:53:50 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "TF transformer",
      "text": "import org.apache.spark.ml.feature.HashingTF\n\nval tf \u003d new HashingTF()\n  .setInputCol(stopWordsFilter.getOutputCol)\n  .setOutputCol(\"tfFeatures\")",
      "dateUpdated": "Jan 16, 2016 2:53:48 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451704581368_-518071794",
      "id": "20160102-031621_1939813047",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.ml.feature.HashingTF\ntf: org.apache.spark.ml.feature.HashingTF \u003d hashingTF_eb06d7f6629a\n"
      },
      "dateCreated": "Jan 2, 2016 3:16:21 AM",
      "dateStarted": "Jan 16, 2016 2:53:50 PM",
      "dateFinished": "Jan 16, 2016 2:53:50 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "IDF transformer",
      "text": "import org.apache.spark.ml.feature.IDF\n\n// Limit to top `vocabSize` most common words and convert to word count vector features\nval idf \u003d new IDF()\n  .setInputCol(tf.getOutputCol)\n  .setOutputCol(\"idfFeatures\")",
      "dateUpdated": "Jan 16, 2016 2:53:48 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "enabled": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451775771985_-1247745195",
      "id": "20160102-230251_1962189552",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.ml.feature.IDF\nidf: org.apache.spark.ml.feature.IDF \u003d idf_173d1e5fd089\n"
      },
      "dateCreated": "Jan 2, 2016 11:02:51 PM",
      "dateStarted": "Jan 16, 2016 2:53:50 PM",
      "dateFinished": "Jan 16, 2016 2:53:50 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "assemble TF/IDF and nGram feature vectors",
      "text": "import org.apache.spark.ml.feature.VectorAssembler\n\nval featureVectorAssembler \u003d new VectorAssembler()\n  .setInputCols(Array(tf.getOutputCol, idf.getOutputCol))\n  .setOutputCol(\"allFeatures\")",
      "dateUpdated": "Jan 16, 2016 2:53:48 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "enabled": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451774247109_110458938",
      "id": "20160102-223727_1555430952",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.ml.feature.VectorAssembler\nfeatureVectorAssembler: org.apache.spark.ml.feature.VectorAssembler \u003d vecAssembler_aa7dfbc1d219\n"
      },
      "dateCreated": "Jan 2, 2016 10:37:27 PM",
      "dateStarted": "Jan 16, 2016 2:53:50 PM",
      "dateFinished": "Jan 16, 2016 2:53:51 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "convert the category labels into indexes",
      "text": "import org.apache.spark.ml.feature.StringIndexer\n\n// Assign an Index to Each Category \nval categoryIndexerModel \u003d new StringIndexer()\n  .setInputCol(\"category\")\n  .setOutputCol(\"indexedCategory\")\n  .fit(itemsDF)",
      "dateUpdated": "Jan 16, 2016 2:53:48 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "enabled": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451768708398_-1255734024",
      "id": "20160102-210508_277987434",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.ml.feature.StringIndexer\ncategoryIndexerModel: org.apache.spark.ml.feature.StringIndexerModel \u003d strIdx_a5a30b4826e9\n"
      },
      "dateCreated": "Jan 2, 2016 9:05:08 PM",
      "dateStarted": "Jan 16, 2016 2:53:51 PM",
      "dateFinished": "Jan 16, 2016 2:53:51 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "create decision tree classifer",
      "text": "import org.apache.spark.ml.classification.DecisionTreeClassifier\n\nval classifier \u003d new DecisionTreeClassifier()\n  .setFeaturesCol(featureVectorAssembler.getOutputCol)\n  .setLabelCol(categoryIndexerModel.getOutputCol)\n  .setPredictionCol(\"prediction\")\n  .setRawPredictionCol(\"confidence\")\n  .setProbabilityCol(\"probability\")",
      "dateUpdated": "Jan 16, 2016 2:53:48 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451714221599_169436069",
      "id": "20160102-055701_1764018921",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.ml.classification.DecisionTreeClassifier\nclassifier: org.apache.spark.ml.classification.DecisionTreeClassifier \u003d dtc_75e0d7cfc812\n"
      },
      "dateCreated": "Jan 2, 2016 5:57:01 AM",
      "dateStarted": "Jan 16, 2016 2:53:51 PM",
      "dateFinished": "Jan 16, 2016 2:53:51 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "convert the category index back to String",
      "text": "import org.apache.spark.ml.feature.IndexToString\n\nval categoryReverseIndexer \u003d new IndexToString()\n  .setInputCol(classifier.getPredictionCol)\n  .setOutputCol(\"predictedCategory\")\n  .setLabels(categoryIndexerModel.labels)",
      "dateUpdated": "Jan 16, 2016 2:53:48 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1452219659117_711798430",
      "id": "20160108-022059_1281293442",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.ml.feature.IndexToString\ncategoryReverseIndexer: org.apache.spark.ml.feature.IndexToString \u003d idxToStr_647df8dfee84\n"
      },
      "dateCreated": "Jan 8, 2016 2:20:59 AM",
      "dateStarted": "Jan 16, 2016 2:53:51 PM",
      "dateFinished": "Jan 16, 2016 2:53:52 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Create the training pipeline",
      "text": "import org.apache.spark.ml.Pipeline\n\nval pipeline \u003d new Pipeline()\n  .setStages(Array(tokenizer, stopWordsFilter, tf, idf, featureVectorAssembler, categoryIndexerModel, classifier, categoryReverseIndexer))",
      "dateUpdated": "Jan 16, 2016 2:53:48 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451714366805_831050936",
      "id": "20160102-055926_1532666557",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.ml.Pipeline\npipeline: org.apache.spark.ml.Pipeline \u003d pipeline_e408f23b0037\n"
      },
      "dateCreated": "Jan 2, 2016 5:59:26 AM",
      "dateStarted": "Jan 16, 2016 2:53:52 PM",
      "dateFinished": "Jan 16, 2016 2:53:52 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Create evaluator for multiclass decision tree model",
      "text": "import org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator\n\nval metricName \u003d \"f1\"\n\nval modelEvaluator \u003d new MulticlassClassificationEvaluator()\n  .setLabelCol(classifier.getLabelCol)\n  .setPredictionCol(classifier.getPredictionCol)\n  .setMetricName(metricName)",
      "dateUpdated": "Jan 16, 2016 2:53:48 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "enabled": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451769445587_-1118091320",
      "id": "20160102-211725_268797232",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator\nmetricName: String \u003d f1\nmodelEvaluator: org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator \u003d mcEval_c8b28c71297b\n"
      },
      "dateCreated": "Jan 2, 2016 9:17:25 PM",
      "dateStarted": "Jan 16, 2016 2:53:52 PM",
      "dateFinished": "Jan 16, 2016 2:53:52 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Build param grid search",
      "text": "import org.apache.spark.ml.tuning.ParamGridBuilder\n\nval paramGrid \u003d new ParamGridBuilder()\n  .addGrid(tf.numFeatures, Array(10, 100))\n  .addGrid(idf.minDocFreq, Array(1, 10))\n  .addGrid(classifier.maxDepth, Array(3, 5))\n  .build()\n  \nparamGrid.size",
      "dateUpdated": "Jan 16, 2016 2:53:48 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "enabled": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451771035936_440379213",
      "id": "20160102-214355_638942362",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.ml.tuning.ParamGridBuilder\nparamGrid: Array[org.apache.spark.ml.param.ParamMap] \u003d \nArray({\n\tdtc_75e0d7cfc812-maxDepth: 3,\n\tidf_173d1e5fd089-minDocFreq: 1,\n\thashingTF_eb06d7f6629a-numFeatures: 10\n}, {\n\tdtc_75e0d7cfc812-maxDepth: 3,\n\tidf_173d1e5fd089-minDocFreq: 10,\n\thashingTF_eb06d7f6629a-numFeatures: 10\n}, {\n\tdtc_75e0d7cfc812-maxDepth: 5,\n\tidf_173d1e5fd089-minDocFreq: 1,\n\thashingTF_eb06d7f6629a-numFeatures: 10\n}, {\n\tdtc_75e0d7cfc812-maxDepth: 5,\n\tidf_173d1e5fd089-minDocFreq: 10,\n\thashingTF_eb06d7f6629a-numFeatures: 10\n}, {\n\tdtc_75e0d7cfc812-maxDepth: 3,\n\tidf_173d1e5fd089-minDocFreq: 1,\n\thashingTF_eb06d7f6629a-numFeatures: 100\n}, {\n\tdtc_75e0d7cfc812-maxDepth: 3,\n\tidf_173d1e5fd089-minDocFreq: 10,\n\thashingTF_eb06d7f6629a-numFeatures: 100\n}, {\n\tdtc_75e0d7cfc812-maxDepth: 5,\n\tidf_173d1e5fd089-minDocFreq: 1,\n\thashingTF...res117: Int \u003d 8\n"
      },
      "dateCreated": "Jan 2, 2016 9:43:55 PM",
      "dateStarted": "Jan 16, 2016 2:53:52 PM",
      "dateFinished": "Jan 16, 2016 2:53:53 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Create cross validator",
      "text": "import org.apache.spark.ml.tuning.CrossValidator\n\n// K-Folds Cross Validation Combined With Param Grid \nval numFolds \u003d 3\n\nval modelValidator \u003d new CrossValidator()\n  .setEstimator(pipeline)\n  .setEvaluator(modelEvaluator)\n  .setEstimatorParamMaps(paramGrid)\n  .setNumFolds(numFolds) ",
      "dateUpdated": "Jan 16, 2016 2:53:48 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "enabled": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451770989649_-868764763",
      "id": "20160102-214309_573238279",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.ml.tuning.CrossValidator\nnumFolds: Int \u003d 3\nmodelValidator: org.apache.spark.ml.tuning.CrossValidator \u003d cv_292e15c054c1\n"
      },
      "dateCreated": "Jan 2, 2016 9:43:09 PM",
      "dateStarted": "Jan 16, 2016 2:53:53 PM",
      "dateFinished": "Jan 16, 2016 2:53:53 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Train crossValidator model",
      "text": "val crossValidatorModel \u003d modelValidator.fit(itemsDF)",
      "dateUpdated": "Jan 16, 2016 2:53:48 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "enabled": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451771239364_977982340",
      "id": "20160102-214719_422404290",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "crossValidatorModel: org.apache.spark.ml.tuning.CrossValidatorModel \u003d cv_292e15c054c1\n"
      },
      "dateCreated": "Jan 2, 2016 9:47:19 PM",
      "dateStarted": "Jan 16, 2016 2:53:53 PM",
      "dateFinished": "Jan 16, 2016 2:54:05 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Describe effectiveness of all param grid options",
      "text": "// Print the average metrics\nval avgMetricsParamGrid \u003d crossValidatorModel.avgMetrics\n\n// Combine with paramGrid to see how they affect the overall metrics\nval combined \u003d paramGrid.zip(avgMetricsParamGrid)",
      "dateUpdated": "Jan 16, 2016 2:53:49 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "enabled": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451772919906_1239014473",
      "id": "20160102-221519_627091553",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "avgMetricsParamGrid: Array[Double] \u003d Array(0.07776234704408078, 0.07776234704408078, 0.1008322706100484, 0.1008322706100484, 0.10207884246241009, 0.10207884246241009, 0.10292633292633291, 0.10292633292633291)\ncombined: Array[(org.apache.spark.ml.param.ParamMap, Double)] \u003d \nArray(({\n\tdtc_75e0d7cfc812-maxDepth: 3,\n\tidf_173d1e5fd089-minDocFreq: 1,\n\thashingTF_eb06d7f6629a-numFeatures: 10\n},0.07776234704408078), ({\n\tdtc_75e0d7cfc812-maxDepth: 3,\n\tidf_173d1e5fd089-minDocFreq: 10,\n\thashingTF_eb06d7f6629a-numFeatures: 10\n},0.07776234704408078), ({\n\tdtc_75e0d7cfc812-maxDepth: 5,\n\tidf_173d1e5fd089-minDocFreq: 1,\n\thashingTF_eb06d7f6629a-numFeatures: 10\n},0.1008322706100484), ({\n\tdtc_75e0d7cfc812-maxDepth: 5,\n\tidf_173d1e5fd089-minDocFreq: 10,\n\thashingTF_eb06d7f6629a-numFeatures: 10\n},0.1008322706100484), ({\n\tdtc_75e0d7cfc812-maxDepth: 3,\n\tidf_173d1e5fd089-minDocFreq: 1,\n\thashingTF_eb06d7f6629a-numFeatures: 100\n},0.10207884246241009), ({\n\tdtc_75e0d7cfc812-maxDepth: 3,\n\tidf_173d1e5fd089-minDocFreq: 10,\n\th..."
      },
      "dateCreated": "Jan 2, 2016 10:15:19 PM",
      "dateStarted": "Jan 16, 2016 2:53:54 PM",
      "dateFinished": "Jan 16, 2016 2:54:05 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Describe Chosen HyperParameters",
      "text": "import org.apache.spark.ml.feature.Word2VecModel\nimport org.apache.spark.ml.feature.IDFModel\nimport org.apache.spark.ml.feature.StringIndexerModel\nimport org.apache.spark.ml.classification.DecisionTreeClassificationModel\nimport org.apache.spark.ml.PipelineModel\n\nval bestModel \u003d crossValidatorModel.bestModel.asInstanceOf[PipelineModel]\n\n// Explain params for each stage\nval bestHashingTFNumFeatures \u003d bestModel.stages(2).asInstanceOf[HashingTF].explainParams\nval bestIDFMinDocFrequency \u003d bestModel.stages(3).asInstanceOf[IDFModel].explainParams\nval bestDecisionTreeDepth \u003d bestModel.stages(6).asInstanceOf[DecisionTreeClassificationModel].explainParams",
      "dateUpdated": "Jan 16, 2016 2:53:49 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1452289600030_-1267163701",
      "id": "20160108-214640_299879104",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.ml.feature.Word2VecModel\nimport org.apache.spark.ml.feature.IDFModel\nimport org.apache.spark.ml.feature.StringIndexerModel\nimport org.apache.spark.ml.classification.DecisionTreeClassificationModel\nimport org.apache.spark.ml.PipelineModel\nbestModel: org.apache.spark.ml.PipelineModel \u003d pipeline_6062359a93a0\nbestHashingTFNumFeatures: String \u003d \ninputCol: input column name (current: filteredWords)\nnumFeatures: number of features (\u003e 0) (default: 262144, current: 100)\noutputCol: output column name (default: hashingTF_eb06d7f6629a__output, current: tfFeatures)\nbestIDFMinDocFrequency: String \u003d \ninputCol: input column name (current: tfFeatures)\nminDocFreq: minimum of documents in which a term should appear for filtering (default: 0, current: 1)\noutputCol: output column name (default: idf_173d1e5fd089__output, current: idfFeatures)\nbestDecisionTreeDepth: String \u003d \nfeaturesCol: features column name (default: features, current: allFeatures)\nlabelCol: label column name (default: label, current: indexedCategory)\npredictionCol: prediction column name (default: prediction, current: prediction)\nprobabilityCol: Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities (default: probability, current: probability)\nrawPredictionCol: raw prediction (a.k.a. confidence) column name (default: rawPrediction, current: confidence)\nthresholds: Thresholds in multi-class classification to adjust the probability of predicting each class. Array must have length equal to the number of classes..."
      },
      "dateCreated": "Jan 8, 2016 9:46:40 PM",
      "dateStarted": "Jan 16, 2016 2:54:05 PM",
      "dateFinished": "Jan 16, 2016 2:54:06 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Predict on new data",
      "text": "val predictOnDF \u003d sqlContext.createDataFrame(Seq(\n      (1, \"nosql\")\n    )).toDF(\"id\", \"description\")\n\nval predictedResultsDF \u003d bestModel.transform(predictOnDF)\n .select(classifier.getPredictionCol, categoryReverseIndexer.getOutputCol, stopWordsFilter.getOutputCol, classifier.getRawPredictionCol, classifier.getProbabilityCol)\n\nz.show(predictedResultsDF)",
      "dateUpdated": "Jan 16, 2016 2:53:49 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "prediction",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "predictedCategory",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "prediction",
              "index": 0.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451704614990_2073874276",
      "id": "20160102-031654_499992823",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "prediction\tpredictedCategory\tfilteredWords\tconfidence\tprobability\n2.0\tData Processing Execution Engine\tWrappedArray(nosql)\t[9.0,3.0,11.0,3.0,1.0,3.0,1.0,3.0,1.0,1.0,1.0,1.0,2.0,1.0,1.0,0.0,0.0,0.0,1.0,1.0,1.0]\t[0.2,0.06666666666666667,0.24444444444444444,0.06666666666666667,0.022222222222222223,0.06666666666666667,0.022222222222222223,0.06666666666666667,0.022222222222222223,0.022222222222222223,0.022222222222222223,0.022222222222222223,0.044444444444444446,0.022222222222222223,0.022222222222222223,0.0,0.0,0.0,0.022222222222222223,0.022222222222222223,0.022222222222222223]\n"
      },
      "dateCreated": "Jan 2, 2016 3:16:54 AM",
      "dateStarted": "Jan 16, 2016 2:54:05 PM",
      "dateFinished": "Jan 16, 2016 2:54:06 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "",
      "dateUpdated": "Jan 16, 2016 2:53:49 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1452217950823_214978392",
      "id": "20160108-015230_770789401",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT"
      },
      "dateCreated": "Jan 8, 2016 1:52:30 AM",
      "dateStarted": "Jan 16, 2016 2:54:06 PM",
      "dateFinished": "Jan 16, 2016 2:54:06 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "NLP/05: Text Classifier Pipeline (TF/IDF + Decision Tree)",
  "id": "2B8KKS3KC",
  "angularObjects": {
    "2ARR8UZDJ": [],
    "2AS9P7JSA": [],
    "2AR33ZMZJ": []
  },
  "config": {
    "looknfeel": "default"
  },
  "info": {}
}