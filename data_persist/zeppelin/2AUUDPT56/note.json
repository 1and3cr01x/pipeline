{
  "paragraphs": [
    {
      "title": "Load the Reference Data To Enrich the Streaming Ratings",
      "text": "val itemsDF \u003d sqlContext.read.format(\"json\")\n  .load(\"file:/root/pipeline/html/advancedspark.com/json/software.json\")\n\nz.show(itemsDF.select($\"id\", $\"title\", $\"img\", explode($\"tags\")).limit(10))",
      "dateUpdated": "Dec 29, 2015 3:16:27 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 340.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1448389076669_946770032",
      "id": "20151124-181756_1657385240",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "id\ttitle\timg\t_c0\n1\tApache Cassandra\timg/software/cassandra.png\tDatabase\n1\tApache Cassandra\timg/software/cassandra.png\tNoSQL\n1\tApache Cassandra\timg/software/cassandra.png\tJava\n1\tApache Cassandra\timg/software/cassandra.png\tJVM\n1\tApache Cassandra\timg/software/cassandra.png\tEventually Consistent\n1\tApache Cassandra\timg/software/cassandra.png\tTransactional\n2\tTachyon\timg/software/tachyon.png\tDistributed Cache\n2\tTachyon\timg/software/tachyon.png\tObject Store\n2\tTachyon\timg/software/tachyon.png\tS3\n2\tTachyon\timg/software/tachyon.png\tSwift\n"
      },
      "dateCreated": "Nov 24, 2015 6:17:56 PM",
      "dateStarted": "Dec 29, 2015 3:16:27 AM",
      "dateFinished": "Dec 29, 2015 3:16:28 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Read the real-time Ratings coming from Users through Kafka",
      "text": "val cassandraConfig \u003d Map(\"keyspace\" -\u003e \"advancedspark\", \"table\" -\u003e \"item_ratings\")\n\nval itemRatingsDF \u003d sqlContext.read.format(\"org.apache.spark.sql.cassandra\").options(cassandraConfig)\n  .load().toDF(\"userId\", \"itemId\", \"rating\", \"timestamp\")",
      "dateUpdated": "Dec 29, 2015 3:16:27 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "title": true,
        "tableHide": false,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1435900511434_-2036302443",
      "id": "20150703-051511_2118186706",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "cassandraConfig: scala.collection.immutable.Map[String,String] \u003d Map(keyspace -\u003e advancedspark, table -\u003e item_ratings)\nitemRatingsDF: org.apache.spark.sql.DataFrame \u003d [userId: int, itemId: int, rating: int, timestamp: bigint]\n"
      },
      "dateCreated": "Jul 3, 2015 5:15:11 AM",
      "dateStarted": "Dec 29, 2015 3:16:27 AM",
      "dateFinished": "Dec 29, 2015 3:16:28 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Show the total rating count and number of Overall distinct users Who Rated (Cassandra)",
      "text": "import org.apache.spark.sql.functions._\n\nval totalRatings \u003d itemRatingsDF.count()\nval distinctUsers \u003d itemRatingsDF.select(countDistinct($\"userId\")).collect()(0)(0)",
      "dateUpdated": "Dec 29, 2015 3:16:27 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "title": true,
        "tableHide": false,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1435903786952_671772613",
      "id": "20150703-060946_1260514447",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.sql.functions._\ntotalRatings: Long \u003d 79\ndistinctUsers: Any \u003d 2\n"
      },
      "dateCreated": "Jul 3, 2015 6:09:46 AM",
      "dateStarted": "Dec 29, 2015 3:16:28 AM",
      "dateFinished": "Dec 29, 2015 3:16:30 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Show Rating Count and Number of Distinct Users Who Rated a Given Item (Redis)",
      "text": "import redis.clients.jedis.Jedis\n\nval itemId \u003d 7 // Spark\n\nval jedis \u003d new Jedis(\"127.0.0.1\", 6379)\n\nval exactNumRatingsForItemId \u003d jedis.get(s\"\"\"exact-rating-count:${itemId}\"\"\")\nval exactNumDistinctUsersWhoRatedItemId \u003d jedis.scard(s\"\"\"exact-distinct-user-rating-count:${itemId}\"\"\")\nval approxNumDistinctUsersWhoRatedItemId \u003d jedis.pfcount(s\"\"\"approx-distinct-user-rating-count:${itemId}\"\"\")",
      "dateUpdated": "Dec 29, 2015 3:16:27 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1448963162364_-999362848",
      "id": "20151201-094602_557082428",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import redis.clients.jedis.Jedis\nitemId: Int \u003d 7\njedis: redis.clients.jedis.Jedis \u003d redis.clients.jedis.Jedis@2b48253\nexactNumRatingsForItemId: String \u003d null\nexactNumDistinctUsersWhoRatedItemId: Long \u003d 0\napproxNumDistinctUsersWhoRatedItemId: Long \u003d 0\n"
      },
      "dateCreated": "Dec 1, 2015 9:46:02 AM",
      "dateStarted": "Dec 29, 2015 3:16:29 AM",
      "dateFinished": "Dec 29, 2015 3:16:30 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Use the DataFrame API to show most desirable items by rating count",
      "text": "val joinedDF \u003d itemRatingsDF.join(itemsDF, $\"itemId\" \u003d\u003d\u003d $\"id\")\n  .select($\"itemId\", $\"title\")\n  .groupBy($\"itemId\", $\"title\")\n  .agg(count($\"itemId\").as(\"count\"))\n  .orderBy($\"count\".desc)\n  .limit(5)\n  \njoinedDF.show()",
      "dateUpdated": "Dec 29, 2015 3:16:27 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451072111148_1271278951",
      "id": "20151225-193511_1695756196",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "joinedDF: org.apache.spark.sql.DataFrame \u003d [itemId: int, title: string, count: bigint]\n+------+----------------+-----+\n|itemId|           title|count|\n+------+----------------+-----+\n|    22|   Apache Mahout|    2|\n|    25|  Apache Parquet|    2|\n|     7|    Apache Spark|    2|\n|    13|Apache MapReduce|    2|\n|    10|     Apache HDFS|    2|\n+------+----------------+-----+\n\n"
      },
      "dateCreated": "Dec 25, 2015 7:35:11 PM",
      "dateStarted": "Dec 29, 2015 3:16:30 AM",
      "dateFinished": "Dec 29, 2015 3:16:32 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Register Temp Tables to run SQL (won\u0027t need to do this in Spark 1.6+)",
      "text": "itemsDF.registerTempTable(\"items_temp\")\nitemRatingsDF.registerTempTable(\"item_ratings_temp\")",
      "dateUpdated": "Dec 29, 2015 3:16:27 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451071841185_1778592016",
      "id": "20151225-193041_517360775",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Dec 25, 2015 7:30:41 PM",
      "dateStarted": "Dec 29, 2015 3:16:31 AM",
      "dateFinished": "Dec 29, 2015 3:16:33 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Use SQL to Show Most desirable Items by Rating Count",
      "text": "%sql SELECT itemId, title, count(itemId) as count FROM item_ratings_temp \n  JOIN items_temp ON (item_ratings_temp.itemId \u003d items_temp.id) \n  GROUP BY itemId, title \n  ORDER BY count \n  DESC LIMIT 5",
      "dateUpdated": "Dec 29, 2015 3:16:27 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "multiBarChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "count",
              "index": 2.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "itemId",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "title": true,
        "tableHide": false,
        "editorHide": false,
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1435904577933_-1977276639",
      "id": "20150703-062257_361919402",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "itemId\ttitle\tcount\n22\tApache Mahout\t2\n25\tApache Parquet\t2\n7\tApache Spark\t2\n13\tApache MapReduce\t2\n10\tApache HDFS\t2\n"
      },
      "dateCreated": "Jul 3, 2015 6:22:57 AM",
      "dateStarted": "Dec 29, 2015 3:16:33 AM",
      "dateFinished": "Dec 29, 2015 3:16:35 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md ### Compare The Physical Plans Between DataFrames And SQL (Equal)",
      "dateUpdated": "Dec 29, 2015 3:16:27 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1438120230768_-497996483",
      "id": "20150728-215030_753792481",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch3\u003eCompare The Physical Plans Between DataFrames And SQL (Equal)\u003c/h3\u003e\n"
      },
      "dateCreated": "Jul 28, 2015 9:50:30 PM",
      "dateStarted": "Dec 29, 2015 3:16:27 AM",
      "dateFinished": "Dec 29, 2015 3:16:27 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "joinedDF.explain()",
      "dateUpdated": "Dec 29, 2015 3:16:27 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "itemId",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "itemId",
              "index": 0.0,
              "aggr": "sum"
            }
          }
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1449536560447_-675033656",
      "id": "20151208-010240_19538133",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "\u003d\u003d Physical Plan \u003d\u003d\nTakeOrderedAndProject(limit\u003d5, orderBy\u003d[count#43L DESC], output\u003d[itemId#30,title#23,count#43L])\n ConvertToSafe\n  TungstenAggregate(key\u003d[itemId#30,title#23], functions\u003d[(count(itemId#30),mode\u003dFinal,isDistinct\u003dfalse)], output\u003d[itemId#30,title#23,count#43L])\n   TungstenExchange hashpartitioning(itemId#30,title#23)\n    TungstenAggregate(key\u003d[itemId#30,title#23], functions\u003d[(count(itemId#30),mode\u003dPartial,isDistinct\u003dfalse)], output\u003d[itemId#30,title#23,currentCount#57L])\n     TungstenProject [itemId#30,title#23]\n      BroadcastHashJoin [cast(itemId#30 as bigint)], [id#20L], BuildRight\n       ConvertToUnsafe\n        Project [itemid#26 AS itemId#30]\n         Scan org.apache.spark.sql.cassandra.CassandraSourceRelation@34446796[itemid#26]\n       ConvertToUnsafe\n        Scan JSONRelation[file:/root/pipeline/html/advancedspark.com/json/software.json][title#23,id#20L]\n"
      },
      "dateCreated": "Dec 8, 2015 1:02:40 AM",
      "dateStarted": "Dec 29, 2015 3:16:33 AM",
      "dateFinished": "Dec 29, 2015 3:16:35 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "sqlContext.sql(\"\"\"SELECT itemId, title, count(itemId) as count FROM item_ratings_temp \n  JOIN items_temp ON (item_ratings_temp.itemId \u003d items_temp.id) \n  GROUP BY itemId, title \n  ORDER BY count \n  DESC LIMIT 5\"\"\").explain()",
      "dateUpdated": "Dec 29, 2015 3:16:27 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "plan",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "plan",
              "index": 0.0,
              "aggr": "sum"
            }
          }
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1449536647456_1803472786",
      "id": "20151208-010407_1170519136",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "\u003d\u003d Physical Plan \u003d\u003d\nTakeOrderedAndProject(limit\u003d5, orderBy\u003d[count#59L DESC], output\u003d[itemId#30,title#23,count#59L])\n ConvertToSafe\n  TungstenAggregate(key\u003d[itemId#30,title#23], functions\u003d[(count(itemId#30),mode\u003dFinal,isDistinct\u003dfalse)], output\u003d[itemId#30,title#23,count#59L])\n   TungstenExchange hashpartitioning(itemId#30,title#23)\n    TungstenAggregate(key\u003d[itemId#30,title#23], functions\u003d[(count(itemId#30),mode\u003dPartial,isDistinct\u003dfalse)], output\u003d[itemId#30,title#23,currentCount#65L])\n     TungstenProject [itemId#30,title#23]\n      BroadcastHashJoin [cast(itemId#30 as bigint)], [id#20L], BuildRight\n       ConvertToUnsafe\n        Project [itemid#26 AS itemId#30]\n         Scan org.apache.spark.sql.cassandra.CassandraSourceRelation@34446796[itemid#26]\n       ConvertToUnsafe\n        Scan JSONRelation[file:/root/pipeline/html/advancedspark.com/json/software.json][title#23,id#20L]\n"
      },
      "dateCreated": "Dec 8, 2015 1:04:07 AM",
      "dateStarted": "Dec 29, 2015 3:16:35 AM",
      "dateFinished": "Dec 29, 2015 3:16:36 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Save Top 5 Most Rated Items to ElasticSearch",
      "text": "import org.elasticsearch.spark.sql._\nimport org.apache.spark.sql.SaveMode\n\nval esConfig \u003d Map(\"pushdown\" -\u003e \"true\", \"es.nodes\" -\u003e \"127.0.0.1\", \"es.port\" -\u003e \"9200\")\n\njoinedDF.write.format(\"org.elasticsearch.spark.sql\")\n  .mode(SaveMode.Overwrite)\n  .options(esConfig)\n  .save(\"advancedspark/top-items-by-exact-rating-count\")\n\nz.show(joinedDF)\n",
      "dateUpdated": "Dec 29, 2015 3:16:27 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 196.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "itemId",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "itemId",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1447754108027_-274054386",
      "id": "20151117-095508_447614045",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "itemId\ttitle\tcount\n22\tApache Mahout\t2\n25\tApache Parquet\t2\n7\tApache Spark\t2\n13\tApache MapReduce\t2\n10\tApache HDFS\t2\n"
      },
      "dateCreated": "Nov 17, 2015 9:55:08 AM",
      "dateStarted": "Dec 29, 2015 3:16:36 AM",
      "dateFinished": "Dec 29, 2015 3:16:39 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "dateUpdated": "Dec 29, 2015 3:16:27 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1451253178953_1437391893",
      "id": "20151227-215258_643401988",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT"
      },
      "dateCreated": "Dec 27, 2015 9:52:58 PM",
      "dateStarted": "Dec 29, 2015 3:16:36 AM",
      "dateFinished": "Dec 29, 2015 3:16:39 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Live Recs/01: Analyze Likes (Summary Statistics)",
  "id": "2AUUDPT56",
  "angularObjects": {
    "2ARR8UZDJ": [],
    "2AS9P7JSA": [],
    "2AR33ZMZJ": []
  },
  "config": {
    "looknfeel": "default"
  },
  "info": {}
}