{
  "paragraphs": [
    {
      "title": "Populate ActressesAndActorsDF Reference Data Created In Earlier Setup Reference Data Notebook",
      "text": "val allItemRatingsDF \u003d sqlContext.sql(\"SELECT userId, itemId FROM item_ratings_temp\")\nallItemRatingsDF.show(30)",
      "dateUpdated": "Nov 25, 2015 12:03:47 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "title": true,
        "editorHide": false,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1436151459869_-304748701",
      "id": "20150706-025739_1574787707",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "allItemRatingsDF: org.apache.spark.sql.DataFrame \u003d [userId: int, itemId: int]\n+------+------+\n|userId|itemId|\n+------+------+\n| 49034| 10001|\n| 49034| 10006|\n| 49034| 10012|\n| 49034| 10015|\n| 49034| 90003|\n| 49034| 90005|\n| 49034| 90008|\n| 49034| 90010|\n| 46876| 10007|\n| 46876| 10012|\n| 46876| 10014|\n| 46876| 90004|\n| 46876| 90007|\n+------+------+\n\n"
      },
      "dateCreated": "Jul 6, 2015 2:57:39 AM",
      "dateStarted": "Nov 25, 2015 12:03:47 PM",
      "dateFinished": "Nov 25, 2015 12:03:48 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Collaborative Filtering:  Alternating Least Squares Matrix Factorization",
      "text": "%md ![Alternating Least Squares - Matrix Factorization](https://raw.githubusercontent.com/cfregly/spark-after-dark/master/img/ALS.png)",
      "dateUpdated": "Nov 25, 2015 12:03:47 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "title": true,
        "editorHide": false,
        "editorMode": "ace/mode/markdown"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1435978153894_1534941045",
      "id": "20150704-024913_884517592",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003e\u003cimg src\u003d\"https://raw.githubusercontent.com/cfregly/spark-after-dark/master/img/ALS.png\" alt\u003d\"Alternating Least Squares - Matrix Factorization\" /\u003e\u003c/p\u003e\n"
      },
      "dateCreated": "Jul 4, 2015 2:49:13 AM",
      "dateStarted": "Nov 25, 2015 12:03:47 PM",
      "dateFinished": "Nov 25, 2015 12:03:47 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Use The Historical Data For Model Training (80%) And Testing (20%)",
      "text": "val ratings \u003d itemRatingsDF.map(rating \u003d\u003e \n  org.apache.spark.mllib.recommendation.Rating(rating(0).asInstanceOf[Int], rating(1).asInstanceOf[Int], 1)\n)\n\nval splitRatings \u003d ratings.randomSplit(Array(1.0,0.0))\t\nval (trainRatings, testRatings) \u003d (splitRatings(0), splitRatings(1))",
      "dateUpdated": "Nov 25, 2015 12:03:47 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "title": true,
        "editorHide": false,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1435978228274_1300518407",
      "id": "20150704-025028_2001782588",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "ratings: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating] \u003d MapPartitionsRDD[3347] at map at \u003cconsole\u003e:95\nsplitRatings: Array[org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating]] \u003d Array(MapPartitionsRDD[3348] at randomSplit at \u003cconsole\u003e:98, MapPartitionsRDD[3349] at randomSplit at \u003cconsole\u003e:98)\ntrainRatings: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating] \u003d MapPartitionsRDD[3348] at randomSplit at \u003cconsole\u003e:98\ntestRatings: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating] \u003d MapPartitionsRDD[3349] at randomSplit at \u003cconsole\u003e:98\n"
      },
      "dateCreated": "Jul 4, 2015 2:50:28 AM",
      "dateStarted": "Nov 25, 2015 12:03:47 PM",
      "dateFinished": "Nov 25, 2015 12:03:48 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Train The Model Using The Historical Training Split Of The Historical Data",
      "text": "import org.apache.spark.mllib.recommendation.ALS\n\nval rank \u003d 10\nval numIterations \u003d 20\nval convergenceThreshold \u003d 0.01\n\nval model \u003d ALS.train(trainRatings, rank, numIterations, convergenceThreshold)",
      "dateUpdated": "Nov 25, 2015 12:03:47 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "title": true,
        "editorHide": false,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1435978256373_-160526409",
      "id": "20150704-025056_169923529",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.mllib.recommendation.ALS\nrank: Int \u003d 10\nnumIterations: Int \u003d 20\nconvergenceThreshold: Double \u003d 0.01\nmodel: org.apache.spark.mllib.recommendation.MatrixFactorizationModel \u003d org.apache.spark.mllib.recommendation.MatrixFactorizationModel@65e92aa\n"
      },
      "dateCreated": "Jul 4, 2015 2:50:56 AM",
      "dateStarted": "Nov 25, 2015 12:03:48 PM",
      "dateFinished": "Nov 25, 2015 12:03:50 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Evaluate The Model Using The Historical Testing Split And Root Mean Squared Error (RMSE) ??",
      "text": "val testFromTo \u003d testRatings.map { \n  case org.apache.spark.mllib.recommendation.Rating(userId, itemId, rating) \u003d\u003e (userId, itemId)\n}\n\nval predictedTestRatings \u003d \n  model.predict(testFromTo).map { \n    case org.apache.spark.mllib.recommendation.Rating(userId, itemId, rating) \u003d\u003e ((userId, itemId), rating)\n  }\n\nval actualTestRatings \u003d testRatings.map { \n  case org.apache.spark.mllib.recommendation.Rating(userId, itemId, rating) \u003d\u003e ((userId, itemId), rating)\n}\n\nval RMSE \u003d Math.sqrt(actualTestRatings.join(predictedTestRatings).map { \n  case ((userId, itemId), (r1, r2)) \u003d\u003e {\n  \tval err \u003d (r1 - r2)\n  \terr * err\n  }\n}.mean())",
      "dateUpdated": "Nov 25, 2015 12:03:47 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "title": true,
        "editorHide": false,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1435978278507_-1968815591",
      "id": "20150704-025118_867262526",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "testFromTo: org.apache.spark.rdd.RDD[(Int, Int)] \u003d MapPartitionsRDD[3737] at map at \u003cconsole\u003e:94\npredictedTestRatings: org.apache.spark.rdd.RDD[((Int, Int), Double)] \u003d MapPartitionsRDD[3747] at map at \u003cconsole\u003e:108\nactualTestRatings: org.apache.spark.rdd.RDD[((Int, Int), Double)] \u003d MapPartitionsRDD[3748] at map at \u003cconsole\u003e:95\nRMSE: Double \u003d 0.0\n"
      },
      "dateCreated": "Jul 4, 2015 2:51:18 AM",
      "dateStarted": "Nov 25, 2015 12:03:49 PM",
      "dateFinished": "Nov 25, 2015 12:03:51 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Generate Personalized Recommendations For Each Distinct User",
      "text": "import org.apache.spark.sql.Row;\n\nval recommendationsDF \u003d model.recommendProductsForUsers(5).toDF(\"id\",\"recommendationItemIds\")\n\ncase class Recommendation(userId: Int, itemId: Int, confidence: Double)\n\nval enrichedRecommendationsDF \u003d \n  recommendationsDF.explode($\"recommendationItemIds\") { \n\tcase Row(recommendations: Seq[Row]) \u003d\u003e recommendations.map(recommendation \u003d\u003e \n      Recommendation(recommendation(0).asInstanceOf[Int], \n                     recommendation(1).asInstanceOf[Int], \n                     recommendation(2).asInstanceOf[Double])) \n  }.select($\"userId\", $\"itemId\", $\"confidence\").join(itemsDF, $\"itemId\" \u003d\u003d\u003d $\"id\").select($\"userId\", $\"itemId\", $\"title\", $\"description\", $\"tags\", $\"img\", $\"confidence\")",
      "dateUpdated": "Nov 25, 2015 12:03:47 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "title": true,
        "tableHide": false,
        "editorHide": false,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1435978292871_1625908707",
      "id": "20150704-025132_1487939440",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.sql.Row\nrecommendationsDF: org.apache.spark.sql.DataFrame \u003d [id: int, recommendationItemIds: array\u003cstruct\u003cuser:int,product:int,rating:double\u003e\u003e]\ndefined class Recommendation\n\u003cconsole\u003e:113: warning: non-variable type argument org.apache.spark.sql.Row in type pattern Seq[org.apache.spark.sql.Row] is unchecked since it is eliminated by erasure\n       \tcase Row(recommendations: Seq[Row]) \u003d\u003e recommendations.map(recommendation \u003d\u003e \n                                  ^\nenrichedRecommendationsDF: org.apache.spark.sql.DataFrame \u003d [userId: int, itemId: int, title: string, description: string, tags: string, img: string, confidence: double]\n"
      },
      "dateCreated": "Jul 4, 2015 2:51:32 AM",
      "dateStarted": "Nov 25, 2015 12:03:50 PM",
      "dateFinished": "Nov 25, 2015 12:03:52 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "enrichedRecommendationsDF.show(50)",
      "dateUpdated": "Nov 25, 2015 12:03:47 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1443377582412_2075344434",
      "id": "20150927-181302_1140885708",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "+------+------+------------------+--------------------+--------------------+--------------------+------------------+\n|userId|itemId|             title|         description|                tags|                 img|        confidence|\n+------+------+------------------+--------------------+--------------------+--------------------+------------------+\n| 46876| 10012|       Johnny Depp|Johnny Depp is pe...|Owensboro, Kentuc...|img/people/10012.jpg|0.9987316597051454|\n| 46876| 10007| Denzel Washington|Denzel Hayes Wash...|Mount Vernon, New...|img/people/10007.jpg|0.9884104717836903|\n| 46876| 90004|   Bobbie Phillips|Brains and beauty...|Salisbury, North ...|img/people/90004.jpg|0.9884104717836903|\n| 46876| 10014|      James Franco|Known for his bre...|Palo Alto, Califo...|img/people/10014.jpg|0.9884104717836903|\n| 46876| 90007|    Angell Conwell|Born in the tiny ...|Orangeburg, South...|img/people/90007.jpg|0.9884104717836903|\n| 49034| 10012|       Johnny Depp|Johnny Depp is pe...|Owensboro, Kentuc...|img/people/10012.jpg|0.9982052818883218|\n| 49034| 90010|  Tiffani Thiessen|Tiffani-Amber Thi...|Long Beach, Calif...|img/people/90010.jpg|0.9890845768302094|\n| 49034| 90008|Shannah Laumeister|Shannah Laumeiste...|San Francisco, Ca...|img/people/90008.jpg|0.9890845768302094|\n| 49034| 10006|     Marlon Brando|Marlon Brando is ...|Manhattan, New Yo...|img/people/10006.jpg|0.9890845768302094|\n| 49034| 10001| Leonardo DiCaprio|Few actors in the...|Hollywood, Califo...|img/people/10001.jpg|0.9890845768302094|\n+------+------+------------------+--------------------+--------------------+--------------------+------------------+\n\n"
      },
      "dateCreated": "Sep 27, 2015 6:13:02 PM",
      "dateStarted": "Nov 25, 2015 12:03:51 PM",
      "dateFinished": "Nov 25, 2015 12:03:52 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import org.elasticsearch.spark.sql._ \nimport org.apache.spark.sql.SaveMode\n\nval esConfig \u003d Map(\"pushdown\" -\u003e \"true\", \"es.nodes\" -\u003e \"127.0.0.1\", \"es.port\" -\u003e \"9200\")\nenrichedRecommendationsDF.write.format(\"org.elasticsearch.spark.sql\").mode(SaveMode.Overwrite).options(esConfig).save(\"advancedspark/personalized-als\")",
      "dateUpdated": "Nov 25, 2015 12:03:48 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorHide": false,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1438113388648_-491234562",
      "id": "20150728-195628_1365871289",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.elasticsearch.spark.sql._\nimport org.apache.spark.sql.SaveMode\nesConfig: scala.collection.immutable.Map[String,String] \u003d Map(pushdown -\u003e true, es.nodes -\u003e 127.0.0.1, es.port -\u003e 9200)\n"
      },
      "dateCreated": "Jul 28, 2015 7:56:28 PM",
      "dateStarted": "Nov 25, 2015 12:03:52 PM",
      "dateFinished": "Nov 25, 2015 12:03:53 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "",
      "dateUpdated": "Nov 25, 2015 12:03:48 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorHide": false,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1435978459979_-187768604",
      "id": "20150704-025419_555917335",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT"
      },
      "dateCreated": "Jul 4, 2015 2:54:19 AM",
      "dateStarted": "Nov 25, 2015 12:03:53 PM",
      "dateFinished": "Nov 25, 2015 12:03:53 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Live Ratings/04:  Collaborative Filtering Recs (Matrix Factorization)",
  "id": "2AUYFSKXN",
  "angularObjects": {
    "2ARR8UZDJ": [],
    "2AS9P7JSA": [],
    "2AR33ZMZJ": []
  },
  "config": {
    "looknfeel": "default"
  },
  "info": {}
}