{
  "paragraphs": [
    {
      "text": "%dep\nz.reset()\nz.addRepo(\"maven central\").url(\"search.maven.org\")\nz.load(\"com.datastax.spark:spark-cassandra-connector_2.10:1.4.0\")\nz.load(\"org.elasticsearch:elasticsearch-spark_2.10:2.1.0\")\nz.load(\"com.databricks:spark-csv_2.10:1.2.0\")\nz.load(\"org.apache.spark:spark-streaming-kafka-assembly_2.10:1.5.1\")\nz.load(\"/root/zeppelin-0.6.0-spark-1.5.1-hadoop-2.6.0-fluxcapacitor/lib/mysql-connector-java.jar\")\nz.load(\"/root/pipeline/myapps/simpledatasource/target/scala-2.10/simpledatasource_2.10-1.0.jar\")",
      "dateUpdated": "Oct 18, 2015 11:24:35 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1445081890962_769572236",
      "id": "20151017-113810_697892520",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "Must be used before SparkInterpreter (%spark) initialized"
      },
      "dateCreated": "Oct 17, 2015 11:38:10 AM",
      "dateStarted": "Oct 18, 2015 11:24:35 PM",
      "dateFinished": "Oct 18, 2015 11:24:35 PM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Populate ActressesAndActorsDF Reference Data",
      "text": "val actressesAndActorsDF \u003d sqlContext.sql(\"SELECT id, name, bio, img FROM actresses_and_actors_perm\")\n\nactressesAndActorsDF.show()",
      "dateUpdated": "Oct 21, 2015 12:35:54 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1445081927425_320383091",
      "id": "20151017-113847_1233175220",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "actressesAndActorsDF: org.apache.spark.sql.DataFrame \u003d [id: bigint, name: string, bio: string, img: string]\n+-----+--------------------+--------------------+--------------------+\n|   id|                name|                 bio|                 img|\n+-----+--------------------+--------------------+--------------------+\n|10001|   Leonardo DiCaprio|Few actors in the...|img/people/10001.jpg|\n|10002|     Anthony Hopkins|Anthony Hopkins w...|img/people/10002.jpg|\n|10003|           Al Pacino|One of the greate...|img/people/10003.jpg|\n|10004|      Morgan Freeman|With an authorita...|img/people/10004.jpg|\n|10005|    James Gandolfini|James Gandolfini ...|img/people/10005.jpg|\n|10006|       Marlon Brando|Marlon Brando is ...|img/people/10006.jpg|\n|10007|   Denzel Washington|Denzel Hayes Wash...|img/people/10007.jpg|\n|10008|      Robert De Niro|Robert De Niro, t...|img/people/10008.jpg|\n|10009|    Chazz Palminteri|Bronx-born and ra...|img/people/10009.jpg|\n|10010|           Tom Hanks|Thomas Jeffrey Ha...|img/people/10010.jpg|\n|10011|       John Travolta|John Travolta was...|img/people/10011.jpg|\n|10012|         Johnny Depp|Johnny Depp is pe...|img/people/10012.jpg|\n|10013|       Mark Wahlberg|American actor Ma...|img/people/10013.jpg|\n|10014|        James Franco|Known for his bre...|img/people/10014.jpg|\n|10015|          Clive Owen|Darkly handsome B...|img/people/10015.jpg|\n|90001|         Linda Blair|From the age of f...|img/people/90001.jpg|\n|90002|      Shannon Whirry|Shannon Whirry is...|img/people/90002.jpg|\n|90003|      Rosalind Allen|Rosalind Allen (b...|img/people/90003.jpg|\n|90004|     Bobbie Phillips|Brains and beauty...|img/people/90004.jpg|\n|90005|Keshia Knight Pul...|Keshia Knight Pul...|img/people/90005.jpg|\n+-----+--------------------+--------------------+--------------------+\nonly showing top 20 rows\n\n"
      },
      "dateCreated": "Oct 17, 2015 11:38:47 AM",
      "dateStarted": "Oct 18, 2015 11:24:35 PM",
      "dateFinished": "Oct 18, 2015 11:24:36 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Convert \"bio\" column into Array[String]",
      "text": "import org.apache.spark.ml.feature.Tokenizer\n\nval tokenizerTransformer \u003d new Tokenizer().setInputCol(\"bio\").setOutputCol(\"wordsFeatureVectors\")\n\nval wordsFeatureVectorsDF \u003d tokenizerTransformer.transform(actressesAndActorsDF)\n\nwordsFeatureVectorsDF.select(\"name\", \"bio\", \"wordsFeatureVectors\").show()",
      "dateUpdated": "Oct 18, 2015 11:24:35 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1445102998027_-1055707710",
      "id": "20151017-172958_1780692227",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.ml.feature.Tokenizer\ntokenizerTransformer: org.apache.spark.ml.feature.Tokenizer \u003d tok_fd433cfcd1e2\nwordsFeatureVectorsDF: org.apache.spark.sql.DataFrame \u003d [id: bigint, name: string, bio: string, img: string, wordsFeatureVectors: array\u003cstring\u003e]\n+--------------------+--------------------+--------------------+\n|                name|                 bio| wordsFeatureVectors|\n+--------------------+--------------------+--------------------+\n|   Leonardo DiCaprio|Few actors in the...|[few, actors, in,...|\n|     Anthony Hopkins|Anthony Hopkins w...|[anthony, hopkins...|\n|           Al Pacino|One of the greate...|[one, of, the, gr...|\n|      Morgan Freeman|With an authorita...|[with, an, author...|\n|    James Gandolfini|James Gandolfini ...|[james, gandolfin...|\n|       Marlon Brando|Marlon Brando is ...|[marlon, brando, ...|\n|   Denzel Washington|Denzel Hayes Wash...|[denzel, hayes, w...|\n|      Robert De Niro|Robert De Niro, t...|[robert, de, niro...|\n|    Chazz Palminteri|Bronx-born and ra...|[bronx-born, and,...|\n|           Tom Hanks|Thomas Jeffrey Ha...|[thomas, jeffrey,...|\n|       John Travolta|John Travolta was...|[john, travolta, ...|\n|         Johnny Depp|Johnny Depp is pe...|[johnny, depp, is...|\n|       Mark Wahlberg|American actor Ma...|[american, actor,...|\n|        James Franco|Known for his bre...|[known, for, his,...|\n|          Clive Owen|Darkly handsome B...|[darkly, handsome...|\n|         Linda Blair|From the age of f...|[from, the, age, ...|\n|      Shannon Whirry|Shannon Whirry is...|[shannon, whirry,...|\n|      Rosalind Allen|Rosalind Allen (b...|[rosalind, allen,...|\n|     Bobbie Phillips|Brains and beauty...|[brains, and, bea...|\n|Keshia Knight Pul...|Keshia Knight Pul...|[keshia, knight, ...|\n+--------------------+--------------------+--------------------+\nonly showing top 20 rows\n\n"
      },
      "dateCreated": "Oct 17, 2015 5:29:58 PM",
      "dateStarted": "Oct 18, 2015 11:24:36 PM",
      "dateFinished": "Oct 18, 2015 11:24:36 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Filter Out Stop Words",
      "text": "import org.apache.spark.ml.feature.StopWordsRemover\n\nval stopWordRemoverTransformer \u003d new StopWordsRemover().setInputCol(\"wordsFeatureVectors\").setOutputCol(\"filteredWordsFeatureVectors\")\n\nval filteredWordsFeatureVectorsDF \u003d stopWordRemoverTransformer.transform(wordsFeatureVectorsDF)\n\nfilteredWordsFeatureVectorsDF.select(\"name\", \"bio\", \"filteredWordsFeatureVectors\").show()",
      "dateUpdated": "Oct 18, 2015 11:24:35 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1445104905188_1508787084",
      "id": "20151017-180145_1212516680",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.ml.feature.StopWordsRemover\nstopWordRemoverTransformer: org.apache.spark.ml.feature.StopWordsRemover \u003d stopWords_d4bfa7f93ca3\nfilteredWordsFeatureVectorsDF: org.apache.spark.sql.DataFrame \u003d [id: bigint, name: string, bio: string, img: string, wordsFeatureVectors: array\u003cstring\u003e, filteredWordsFeatureVectors: array\u003cstring\u003e]\n+--------------------+--------------------+---------------------------+\n|                name|                 bio|filteredWordsFeatureVectors|\n+--------------------+--------------------+---------------------------+\n|   Leonardo DiCaprio|Few actors in the...|       [actors, world, c...|\n|     Anthony Hopkins|Anthony Hopkins w...|       [anthony, hopkins...|\n|           Al Pacino|One of the greate...|       [greatest, actors...|\n|      Morgan Freeman|With an authorita...|       [authoritative, v...|\n|    James Gandolfini|James Gandolfini ...|       [james, gandolfin...|\n|       Marlon Brando|Marlon Brando is ...|       [marlon, brando, ...|\n|   Denzel Washington|Denzel Hayes Wash...|       [denzel, hayes, w...|\n|      Robert De Niro|Robert De Niro, t...|       [robert, niro,, t...|\n|    Chazz Palminteri|Bronx-born and ra...|       [bronx-born, rais...|\n|           Tom Hanks|Thomas Jeffrey Ha...|       [thomas, jeffrey,...|\n|       John Travolta|John Travolta was...|       [john, travolta, ...|\n|         Johnny Depp|Johnny Depp is pe...|       [johnny, depp, ve...|\n|       Mark Wahlberg|American actor Ma...|       [american, actor,...|\n|        James Franco|Known for his bre...|       [known, breakthro...|\n|          Clive Owen|Darkly handsome B...|       [darkly, handsome...|\n|         Linda Blair|From the age of f...|       [age, five,, lind...|\n|      Shannon Whirry|Shannon Whirry is...|       [shannon, whirry,...|\n|      Rosalind Allen|Rosalind Allen (b...|       [rosalind, allen,...|\n|     Bobbie Phillips|Brains and beauty...|       [brains, beauty, ...|\n|Keshia Knight Pul...|Keshia Knight Pul...|       [keshia, knight, ...|\n+--------------------+--------------------+---------------------------+\nonly showing top 20 rows\n\n"
      },
      "dateCreated": "Oct 17, 2015 6:01:45 PM",
      "dateStarted": "Oct 18, 2015 11:24:36 PM",
      "dateFinished": "Oct 18, 2015 11:24:37 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "TF/IDF Featurizer",
      "text": "import org.apache.spark.ml.feature.{HashingTF, IDF, Tokenizer}\n\nval hashingTFTransformer \u003d new HashingTF().setInputCol(\"filteredWordsFeatureVectors\").setOutputCol(\"tfWordsFeatureVectors\").setNumFeatures(1000)\n\nval tfWordsFeatureVectorsDF \u003d hashingTFTransformer.transform(filteredWordsFeatureVectorsDF)\n\nval idfEstimator \u003d new IDF().setInputCol(\"tfWordsFeatureVectors\").setOutputCol(\"tfIdfWordsFeatureVectors\")\n\nval idfModelTransformer \u003d idfEstimator.fit(tfWordsFeatureVectorsDF)\n\nval tfIdfWordsFeatureVectorsDF \u003d idfModelTransformer.transform(tfWordsFeatureVectorsDF)\n\ntfIdfWordsFeatureVectorsDF.select(\"name\", \"bio\", \"tfIdfWordsFeatureVectors\").show()",
      "dateUpdated": "Oct 18, 2015 11:24:35 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1445099320523_1491093045",
      "id": "20151017-162840_1956587375",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.ml.feature.{HashingTF, IDF, Tokenizer}\nhashingTFTransformer: org.apache.spark.ml.feature.HashingTF \u003d hashingTF_7f1ccf66bde0\ntfWordsFeatureVectorsDF: org.apache.spark.sql.DataFrame \u003d [id: bigint, name: string, bio: string, img: string, wordsFeatureVectors: array\u003cstring\u003e, filteredWordsFeatureVectors: array\u003cstring\u003e, tfWordsFeatureVectors: vector]\nidfEstimator: org.apache.spark.ml.feature.IDF \u003d idf_9fb2c76e9f36\nidfModelTransformer: org.apache.spark.ml.feature.IDFModel \u003d idf_9fb2c76e9f36\ntfIdfWordsFeatureVectorsDF: org.apache.spark.sql.DataFrame \u003d [id: bigint, name: string, bio: string, img: string, wordsFeatureVectors: array\u003cstring\u003e, filteredWordsFeatureVectors: array\u003cstring\u003e, tfWordsFeatureVectors: vector, tfIdfWordsFeatureVectors: vector]\n+--------------------+--------------------+------------------------+\n|                name|                 bio|tfIdfWordsFeatureVectors|\n+--------------------+--------------------+------------------------+\n|   Leonardo DiCaprio|Few actors in the...|    (1000,[6,22,43,18...|\n|     Anthony Hopkins|Anthony Hopkins w...|    (1000,[15,79,100,...|\n|           Al Pacino|One of the greate...|    (1000,[0,3,6,26,3...|\n|      Morgan Freeman|With an authorita...|    (1000,[13,30,32,6...|\n|    James Gandolfini|James Gandolfini ...|    (1000,[17,23,45,4...|\n|       Marlon Brando|Marlon Brando is ...|    (1000,[8,80,182,2...|\n|   Denzel Washington|Denzel Hayes Wash...|    (1000,[104,141,18...|\n|      Robert De Niro|Robert De Niro, t...|    (1000,[1,6,23,32,...|\n|    Chazz Palminteri|Bronx-born and ra...|    (1000,[6,23,74,11...|\n|           Tom Hanks|Thomas Jeffrey Ha...|    (1000,[24,26,32,3...|\n|       John Travolta|John Travolta was...|    (1000,[42,71,104,...|\n|         Johnny Depp|Johnny Depp is pe...|    (1000,[6,46,111,1...|\n|       Mark Wahlberg|American actor Ma...|    (1000,[7,32,56,58...|\n|        James Franco|Known for his bre...|    (1000,[32,40,46,7...|\n|          Clive Owen|Darkly handsome B...|    (1000,[44,53,75,8...|\n|         Linda Blair|From the age of f...|    (1000,[72,128,153...|\n|      Shannon Whirry|Shannon Whirry is...|    (1000,[43,63,80,9...|\n|      Rosalind Allen|Rosalind Allen (b...|    (1000,[38,45,104,...|\n|     Bobbie Phillips|Brains and beauty...|    (1000,[4,15,53,13...|\n|Keshia Knight Pul...|Keshia Knight Pul...|    (1000,[4,46,54,11...|\n+--------------------+--------------------+------------------------+\nonly showing top 20 rows\n\n"
      },
      "dateCreated": "Oct 17, 2015 4:28:40 PM",
      "dateStarted": "Oct 18, 2015 11:24:37 PM",
      "dateFinished": "Oct 18, 2015 11:24:38 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Word2Vec Featurizer",
      "text": "import org.apache.spark.ml.feature.Word2Vec\n\nval word2VecEstimator \u003d new Word2Vec()\n  .setInputCol(\"filteredWordsFeatureVectors\")\n  .setOutputCol(\"word2vecWordsFeatureVectors\")\n  .setMinCount(2)\n\nval word2VecModelTransformer \u003d word2VecEstimator.fit(filteredWordsFeatureVectorsDF)\n\nval word2VecWordFeatureVectorsDF \u003d word2VecModelTransformer.transform(filteredWordsFeatureVectorsDF)\n\nword2VecWordFeatureVectorsDF.select(\"name\", \"bio\", \"word2vecWordsFeatureVectors\").show()",
      "dateUpdated": "Oct 18, 2015 11:24:35 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1445099681901_-853444159",
      "id": "20151017-163441_477395570",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.ml.feature.Word2Vec\nword2VecEstimator: org.apache.spark.ml.feature.Word2Vec \u003d w2v_77556ce9c13d\nword2VecModelTransformer: org.apache.spark.ml.feature.Word2VecModel \u003d w2v_77556ce9c13d\nword2VecWordFeatureVectorsDF: org.apache.spark.sql.DataFrame \u003d [id: bigint, name: string, bio: string, img: string, wordsFeatureVectors: array\u003cstring\u003e, filteredWordsFeatureVectors: array\u003cstring\u003e, word2vecWordsFeatureVectors: vector]\n+--------------------+--------------------+---------------------------+\n|                name|                 bio|word2vecWordsFeatureVectors|\n+--------------------+--------------------+---------------------------+\n|   Leonardo DiCaprio|Few actors in the...|       [-1.7510706190175...|\n|     Anthony Hopkins|Anthony Hopkins w...|       [7.76603253168129...|\n|           Al Pacino|One of the greate...|       [-0.0010093685622...|\n|      Morgan Freeman|With an authorita...|       [-8.0501185408953...|\n|    James Gandolfini|James Gandolfini ...|       [-4.5533539960160...|\n|       Marlon Brando|Marlon Brando is ...|       [2.18291636476100...|\n|   Denzel Washington|Denzel Hayes Wash...|       [-3.7285476520826...|\n|      Robert De Niro|Robert De Niro, t...|       [2.32612072123271...|\n|    Chazz Palminteri|Bronx-born and ra...|       [2.69094913115573...|\n|           Tom Hanks|Thomas Jeffrey Ha...|       [-8.0884452017926...|\n|       John Travolta|John Travolta was...|       [3.50539529647089...|\n|         Johnny Depp|Johnny Depp is pe...|       [-9.3630809957782...|\n|       Mark Wahlberg|American actor Ma...|       [3.90832761435636...|\n|        James Franco|Known for his bre...|       [2.42231832493820...|\n|          Clive Owen|Darkly handsome B...|       [2.35344860811892...|\n|         Linda Blair|From the age of f...|       [2.28848998788101...|\n|      Shannon Whirry|Shannon Whirry is...|       [-9.5876041751611...|\n|      Rosalind Allen|Rosalind Allen (b...|       [-4.9245864858910...|\n|     Bobbie Phillips|Brains and beauty...|       [-4.8282786802802...|\n|Keshia Knight Pul...|Keshia Knight Pul...|       [2.53090507943521...|\n+--------------------+--------------------+---------------------------+\nonly showing top 20 rows\n\n"
      },
      "dateCreated": "Oct 17, 2015 4:34:41 PM",
      "dateStarted": "Oct 18, 2015 11:24:37 PM",
      "dateFinished": "Oct 18, 2015 11:24:39 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Count Featurizer - Words",
      "text": "import org.apache.spark.ml.feature.{CountVectorizer, CountVectorizerModel}\n\n// fit a CountVectorizerModel from the corpus\nval countWordsVectorizerEstimator \u003d new CountVectorizer()\n  .setInputCol(\"filteredWordsFeatureVectors\")\n  .setOutputCol(\"countWordsFeatureVectors\")\n  .setMinDF(2) // a term must appear in more or equal to 2 documents to be included in the vocabulary\n\nval countWordsVectorizerModelTransformer \u003d countWordsVectorizerEstimator.fit(filteredWordsFeatureVectorsDF)\n\nval countWordsFeatureVectorsDF \u003d countWordsVectorizerModelTransformer.transform(filteredWordsFeatureVectorsDF).select(\"name\", \"bio\", \"filteredWordsFeatureVectors\", \"countWordsFeatureVectors\")\n\ncountWordsFeatureVectorsDF.show()",
      "dateUpdated": "Oct 18, 2015 11:24:36 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1445101913136_1473887137",
      "id": "20151017-171153_871858",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.ml.feature.{CountVectorizer, CountVectorizerModel}\ncountWordsVectorizerEstimator: org.apache.spark.ml.feature.CountVectorizer \u003d cntVec_2982eb5d2c80\ncountWordsVectorizerModelTransformer: org.apache.spark.ml.feature.CountVectorizerModel \u003d cntVec_2982eb5d2c80\ncountWordsFeatureVectorsDF: org.apache.spark.sql.DataFrame \u003d [name: string, bio: string, filteredWordsFeatureVectors: array\u003cstring\u003e, countWordsFeatureVectors: vector]\n+--------------------+--------------------+---------------------------+------------------------+\n|                name|                 bio|filteredWordsFeatureVectors|countWordsFeatureVectors|\n+--------------------+--------------------+---------------------------+------------------------+\n|   Leonardo DiCaprio|Few actors in the...|       [actors, world, c...|    (87,[4,7,15,35,60...|\n|     Anthony Hopkins|Anthony Hopkins w...|       [anthony, hopkins...|    (87,[0,13,37,54,5...|\n|           Al Pacino|One of the greate...|       [greatest, actors...|    (87,[0,1,3,7,12,1...|\n|      Morgan Freeman|With an authorita...|       [authoritative, v...|    (87,[0,3,4,30,50,...|\n|    James Gandolfini|James Gandolfini ...|       [james, gandolfin...|    (87,[0,1,5,13,14,...|\n|       Marlon Brando|Marlon Brando is ...|       [marlon, brando, ...|    (87,[4,12,31,45,7...|\n|   Denzel Washington|Denzel Hayes Wash...|       [denzel, hayes, w...|    (87,[0,1,11,14,23...|\n|      Robert De Niro|Robert De Niro, t...|       [robert, niro,, t...|    (87,[0,1,3,7,12,1...|\n|    Chazz Palminteri|Bronx-born and ra...|       [bronx-born, rais...|    (87,[1,7,8,18,24,...|\n|           Tom Hanks|Thomas Jeffrey Ha...|       [thomas, jeffrey,...|    (87,[0,10,28,44,5...|\n|       John Travolta|John Travolta was...|       [john, travolta, ...|    (87,[0,1,8,20,25,...|\n|         Johnny Depp|Johnny Depp is pe...|       [johnny, depp, ve...|    (87,[0,5,7,8,9,24...|\n|       Mark Wahlberg|American actor Ma...|       [american, actor,...|    (87,[3,4,16,30,47...|\n|        James Franco|Known for his bre...|       [known, breakthro...|    (87,[0,2,11,16,17...|\n|          Clive Owen|Darkly handsome B...|       [darkly, handsome...|    (87,[2,4,49,63,80...|\n|         Linda Blair|From the age of f...|       [age, five,, lind...|    (87,[9,16,53,68,7...|\n|      Shannon Whirry|Shannon Whirry is...|       [shannon, whirry,...|    (87,[0,1,5,6,14,3...|\n|      Rosalind Allen|Rosalind Allen (b...|       [rosalind, allen,...|    (87,[1,15,22,26,4...|\n|     Bobbie Phillips|Brains and beauty...|       [brains, beauty, ...|    (87,[5,14,15,42,4...|\n|Keshia Knight Pul...|Keshia Knight Pul...|       [keshia, knight, ...|    (87,[0,1,2,17,20,...|\n+--------------------+--------------------+---------------------------+------------------------+\nonly showing top 20 rows\n\n"
      },
      "dateCreated": "Oct 17, 2015 5:11:53 PM",
      "dateStarted": "Oct 18, 2015 11:24:38 PM",
      "dateFinished": "Oct 18, 2015 11:24:40 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "N-Gram Featurizer",
      "text": "import org.apache.spark.ml.feature.NGram\n\nval ngramTransformer \u003d new NGram().setN(2).setInputCol(\"filteredWordsFeatureVectors\").setOutputCol(\"ngramsFeatureVectors\")\n\nval ngramsFeatureVectorsDF \u003d ngramTransformer.transform(filteredWordsFeatureVectorsDF)\n\nngramsFeatureVectorsDF.select(\"name\", \"bio\", \"ngramsFeatureVectors\").show()",
      "dateUpdated": "Oct 18, 2015 11:24:36 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1445102307362_-534718304",
      "id": "20151017-171827_540520315",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.ml.feature.NGram\nngramTransformer: org.apache.spark.ml.feature.NGram \u003d ngram_2add070b8c93\nngramsFeatureVectorsDF: org.apache.spark.sql.DataFrame \u003d [id: bigint, name: string, bio: string, img: string, wordsFeatureVectors: array\u003cstring\u003e, filteredWordsFeatureVectors: array\u003cstring\u003e, ngramsFeatureVectors: array\u003cstring\u003e]\n+--------------------+--------------------+--------------------+\n|                name|                 bio|ngramsFeatureVectors|\n+--------------------+--------------------+--------------------+\n|   Leonardo DiCaprio|Few actors in the...|[actors world, wo...|\n|     Anthony Hopkins|Anthony Hopkins w...|[anthony hopkins,...|\n|           Al Pacino|One of the greate...|[greatest actors,...|\n|      Morgan Freeman|With an authorita...|[authoritative vo...|\n|    James Gandolfini|James Gandolfini ...|[james gandolfini...|\n|       Marlon Brando|Marlon Brando is ...|[marlon brando, b...|\n|   Denzel Washington|Denzel Hayes Wash...|[denzel hayes, ha...|\n|      Robert De Niro|Robert De Niro, t...|[robert niro,, ni...|\n|    Chazz Palminteri|Bronx-born and ra...|[bronx-born raise...|\n|           Tom Hanks|Thomas Jeffrey Ha...|[thomas jeffrey, ...|\n|       John Travolta|John Travolta was...|[john travolta, t...|\n|         Johnny Depp|Johnny Depp is pe...|[johnny depp, dep...|\n|       Mark Wahlberg|American actor Ma...|[american actor, ...|\n|        James Franco|Known for his bre...|[known breakthrou...|\n|          Clive Owen|Darkly handsome B...|[darkly handsome,...|\n|         Linda Blair|From the age of f...|[age five,, five,...|\n|      Shannon Whirry|Shannon Whirry is...|[shannon whirry, ...|\n|      Rosalind Allen|Rosalind Allen (b...|[rosalind allen, ...|\n|     Bobbie Phillips|Brains and beauty...|[brains beauty, b...|\n|Keshia Knight Pul...|Keshia Knight Pul...|[keshia knight, k...|\n+--------------------+--------------------+--------------------+\nonly showing top 20 rows\n\n"
      },
      "dateCreated": "Oct 17, 2015 5:18:27 PM",
      "dateStarted": "Oct 18, 2015 11:24:40 PM",
      "dateFinished": "Oct 18, 2015 11:24:40 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Count Featurizer - N-Grams:  TODO:  Convert ArrayType(false) to ArrayType(true)",
      "text": "import org.apache.spark.ml.feature.{CountVectorizer, CountVectorizerModel}\n\n// fit a CountVectorizerModel from the corpus\nval countNGramsVectorizerEstimator \u003d new CountVectorizer()\n  .setInputCol(\"ngramsFeatureVectors\")\n  .setOutputCol(\"countNGramsFeatureVectors\")\n  .setMinDF(2) // a term must appear in more or equal to 2 documents to be included in the vocabulary\n\nval countNGramsVectorizerModelTransformer \u003d countNGramsVectorizerEstimator.fit(ngramsFeatureVectorsDF)\n\nval countNGramsFeatureVectorsDF \u003d countNGramsVectorizerModelTransformer.transform(ngramsFeatureVectorsDF).select(\"name\", \"bio\", \"countNGramsFeatureVectors\")\n\ncountNGramsFeatureVectorsDF.show()",
      "dateUpdated": "Oct 18, 2015 11:24:36 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1445103941122_-1446492764",
      "id": "20151017-174541_1589950786",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "import org.apache.spark.ml.feature.{CountVectorizer, CountVectorizerModel}\ncountNGramsVectorizerEstimator: org.apache.spark.ml.feature.CountVectorizer \u003d cntVec_7eda833ac5b7\njava.lang.IllegalArgumentException: requirement failed: Column ngramsFeatureVectors must be of type ArrayType(StringType,true) but was actually ArrayType(StringType,false).\n\tat scala.Predef$.require(Predef.scala:233)\n\tat org.apache.spark.ml.util.SchemaUtils$.checkColumnType(SchemaUtils.scala:42)\n\tat org.apache.spark.ml.feature.CountVectorizerParams$class.validateAndTransformSchema(CountVectorizer.scala:71)\n\tat org.apache.spark.ml.feature.CountVectorizer.validateAndTransformSchema(CountVectorizer.scala:107)\n\tat org.apache.spark.ml.feature.CountVectorizer.transformSchema(CountVectorizer.scala:168)\n\tat org.apache.spark.ml.PipelineStage.transformSchema(Pipeline.scala:62)\n\tat org.apache.spark.ml.feature.CountVectorizer.fit(CountVectorizer.scala:130)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:73)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:78)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:80)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:82)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:84)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:86)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:88)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:90)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:92)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:94)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:96)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:98)\n\tat $iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:100)\n\tat $iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:102)\n\tat $iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:104)\n\tat $iwC.\u003cinit\u003e(\u003cconsole\u003e:106)\n\tat \u003cinit\u003e(\u003cconsole\u003e:108)\n\tat .\u003cinit\u003e(\u003cconsole\u003e:112)\n\tat .\u003cclinit\u003e(\u003cconsole\u003e)\n\tat .\u003cinit\u003e(\u003cconsole\u003e:7)\n\tat .\u003cclinit\u003e(\u003cconsole\u003e)\n\tat $print(\u003cconsole\u003e)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:606)\n\tat org.apache.spark.repl.SparkIMain$ReadEvalPrint.call(SparkIMain.scala:1065)\n\tat org.apache.spark.repl.SparkIMain$Request.loadAndRun(SparkIMain.scala:1340)\n\tat org.apache.spark.repl.SparkIMain.loadAndRunReq$1(SparkIMain.scala:840)\n\tat org.apache.spark.repl.SparkIMain.interpret(SparkIMain.scala:871)\n\tat org.apache.spark.repl.SparkIMain.interpret(SparkIMain.scala:819)\n\tat org.apache.zeppelin.spark.SparkInterpreter.interpretInput(SparkInterpreter.java:655)\n\tat org.apache.zeppelin.spark.SparkInterpreter.interpret(SparkInterpreter.java:620)\n\tat org.apache.zeppelin.spark.SparkInterpreter.interpret(SparkInterpreter.java:613)\n\tat org.apache.zeppelin.interpreter.ClassloaderInterpreter.interpret(ClassloaderInterpreter.java:57)\n\tat org.apache.zeppelin.interpreter.LazyOpenInterpreter.interpret(LazyOpenInterpreter.java:93)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$InterpretJob.jobRun(RemoteInterpreterServer.java:276)\n\tat org.apache.zeppelin.scheduler.Job.run(Job.java:170)\n\tat org.apache.zeppelin.scheduler.FIFOScheduler$1.run(FIFOScheduler.java:118)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:262)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:178)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:292)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n\tat java.lang.Thread.run(Thread.java:745)\n\n"
      },
      "dateCreated": "Oct 17, 2015 5:45:41 PM",
      "dateStarted": "Oct 18, 2015 11:24:40 PM",
      "dateFinished": "Oct 18, 2015 11:24:41 PM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "TODO:  Add categorical Features (Genres?) and One Hot Encode",
      "dateUpdated": "Oct 18, 2015 11:24:36 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1445210443739_1347878706",
      "id": "20151018-232043_2008195623",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT"
      },
      "dateCreated": "Oct 18, 2015 11:20:43 PM",
      "dateStarted": "Oct 18, 2015 11:24:41 PM",
      "dateFinished": "Oct 18, 2015 11:24:41 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "TODO:  Reduce M using DIMSUM",
      "dateUpdated": "Oct 18, 2015 11:24:36 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1445210527768_827621572",
      "id": "20151018-232207_327706608",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT"
      },
      "dateCreated": "Oct 18, 2015 11:22:07 PM",
      "dateStarted": "Oct 18, 2015 11:24:41 PM",
      "dateFinished": "Oct 18, 2015 11:24:41 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "TODO:  Reduce M Using LSH",
      "dateUpdated": "Oct 18, 2015 11:24:37 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1445210555820_1660095599",
      "id": "20151018-232235_485057872",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT"
      },
      "dateCreated": "Oct 18, 2015 11:22:35 PM",
      "dateStarted": "Oct 18, 2015 11:24:41 PM",
      "dateFinished": "Oct 18, 2015 11:24:41 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "TODO:  Reduce N Using PCA",
      "text": "%md Look at Paco\u0027s presentation re: confusion matrix",
      "dateUpdated": "Oct 18, 2015 11:24:37 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/markdown",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1445210579438_1164569664",
      "id": "20151018-232259_1408313733",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003cp\u003eLook at Paco\u0027s presentation re: confusion matrix\u003c/p\u003e\n"
      },
      "dateCreated": "Oct 18, 2015 11:22:59 PM",
      "dateStarted": "Oct 18, 2015 11:24:37 PM",
      "dateFinished": "Oct 18, 2015 11:24:37 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Featurize Extended Actresses and Actors Bios  (100 each)",
      "text": "// create the actresses_temp table from the input JSON\nval actresses100BiosDF \u003d sqlContext.read.format(\"json\").load(\"file:/root/pipeline/datasets/hollywood/actresses-100-bios.json\")\nactresses100BiosDF.registerTempTable(\"actresses_100_bios_temp\")\n\n// create the actors_temp table from the input JSON\nval actors100BiosDF \u003d sqlContext.read.format(\"json\").load(\"file:/root/pipeline/datasets/hollywood/actors-100-bios.json\")\nactors100BiosDF.registerTempTable(\"actors_100_bios_temp\")",
      "dateUpdated": "Oct 18, 2015 11:24:37 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1445105724536_-1658776984",
      "id": "20151017-181524_33910338",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "actresses100BiosDF: org.apache.spark.sql.DataFrame \u003d [count: bigint, frequency: string, lastrunstatus: string, name: string, newdata: boolean, results: struct\u003cactresses:array\u003cstruct\u003cbio:string,hero:struct\u003calt:string,class:string,height:string,href:string,loadlate:string,src:string,text:string,width:string\u003e,index:bigint,name:struct\u003chref:string,text:string\u003e,url:string\u003e\u003e\u003e, thisversionrun: string, thisversionstatus: string, version: bigint]\nactors100BiosDF: org.apache.spark.sql.DataFrame \u003d []\n"
      },
      "dateCreated": "Oct 17, 2015 6:15:24 PM",
      "dateStarted": "Oct 18, 2015 11:24:41 PM",
      "dateFinished": "Oct 18, 2015 11:24:42 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val actresses100BiosExplodedDF \u003d sqlContext.sql(\"SELECT (90000 + people.index) as id, people.name.text as name, people.bio.text as bio, people.hero.src as img FROM actresses_100_bios_temp LATERAL VIEW explode(results.people) p AS people\")\n\nval actors100BiosExplodedDF \u003d sqlContext.sql(\"SELECT (10000 + people.index) as id, people.name.text as name, people.bio.text as bio, people.hero.src as img FROM actors_100_bios_temp LATERAL VIEW explode(results.people) p AS people\")\n\nval actressesAndActors100BiosDF \u003d actresses100BiosExplodedDF.unionAll(actors100BiosExplodedDF).cache()\nactressesAndAcactressesAndActors100BiosDFtorsDF.show(30)",
      "dateUpdated": "Oct 18, 2015 11:24:37 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1445209766355_1442759564",
      "id": "20151018-230926_166286914",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "org.apache.spark.sql.AnalysisException: No such struct field people in actresses; line 1 pos 160\n\tat org.apache.spark.sql.catalyst.expressions.ExtractValue$.findField(complexTypeExtractors.scala:84)\n\tat org.apache.spark.sql.catalyst.expressions.ExtractValue$.apply(complexTypeExtractors.scala:52)\n\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$4.apply(LogicalPlan.scala:267)\n\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$4.apply(LogicalPlan.scala:266)\n\tat scala.collection.LinearSeqOptimized$class.foldLeft(LinearSeqOptimized.scala:111)\n\tat scala.collection.immutable.List.foldLeft(List.scala:84)\n\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolve(LogicalPlan.scala:266)\n\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolve(LogicalPlan.scala:172)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveReferences$$anonfun$apply$8$$anonfun$5$$anonfun$applyOrElse$19.apply(Analyzer.scala:387)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveReferences$$anonfun$apply$8$$anonfun$5$$anonfun$applyOrElse$19.apply(Analyzer.scala:387)\n\tat org.apache.spark.sql.catalyst.analysis.package$.withPosition(package.scala:48)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveReferences$$anonfun$apply$8$$anonfun$5.applyOrElse(Analyzer.scala:387)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveReferences$$anonfun$apply$8$$anonfun$5.applyOrElse(Analyzer.scala:385)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:293)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:293)\n\tat org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:51)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:292)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:290)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$5.apply(TreeNode.scala:290)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:249)\n\tat scala.collection.Iterator$$anon$11.next(Iterator.scala:328)\n\tat scala.collection.Iterator$class.foreach(Iterator.scala:727)\n\tat scala.collection.AbstractIterator.foreach(Iterator.scala:1157)\n\tat scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)\n\tat scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)\n\tat scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)\n\tat scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)\n\tat scala.collection.AbstractIterator.to(Iterator.scala:1157)\n\tat scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)\n\tat scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)\n\tat scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)\n\tat scala.collection.AbstractIterator.toArray(Iterator.scala:1157)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:279)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:290)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveReferences$$anonfun$apply$8.applyOrElse(Analyzer.scala:385)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveReferences$$anonfun$apply$8.applyOrElse(Analyzer.scala:277)\n\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$resolveOperators$1.apply(LogicalPlan.scala:57)\n\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$resolveOperators$1.apply(LogicalPlan.scala:57)\n\tat org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:51)\n\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperators(LogicalPlan.scala:56)\n\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:54)\n\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan$$anonfun$1.apply(LogicalPlan.scala:54)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:249)\n\tat scala.collection.Iterator$$anon$11.next(Iterator.scala:328)\n\tat scala.collection.Iterator$class.foreach(Iterator.scala:727)\n\tat scala.collection.AbstractIterator.foreach(Iterator.scala:1157)\n\tat scala.collection.generic.Growable$class.$plus$plus$eq(Growable.scala:48)\n\tat scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:103)\n\tat scala.collection.mutable.ArrayBuffer.$plus$plus$eq(ArrayBuffer.scala:47)\n\tat scala.collection.TraversableOnce$class.to(TraversableOnce.scala:273)\n\tat scala.collection.AbstractIterator.to(Iterator.scala:1157)\n\tat scala.collection.TraversableOnce$class.toBuffer(TraversableOnce.scala:265)\n\tat scala.collection.AbstractIterator.toBuffer(Iterator.scala:1157)\n\tat scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:252)\n\tat scala.collection.AbstractIterator.toArray(Iterator.scala:1157)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode.transformChildren(TreeNode.scala:279)\n\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperators(LogicalPlan.scala:54)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveReferences$.apply(Analyzer.scala:277)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer$ResolveReferences$.apply(Analyzer.scala:276)\n\tat org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1$$anonfun$apply$1.apply(RuleExecutor.scala:83)\n\tat org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1$$anonfun$apply$1.apply(RuleExecutor.scala:80)\n\tat scala.collection.LinearSeqOptimized$class.foldLeft(LinearSeqOptimized.scala:111)\n\tat scala.collection.immutable.List.foldLeft(List.scala:84)\n\tat org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1.apply(RuleExecutor.scala:80)\n\tat org.apache.spark.sql.catalyst.rules.RuleExecutor$$anonfun$execute$1.apply(RuleExecutor.scala:72)\n\tat scala.collection.immutable.List.foreach(List.scala:318)\n\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.execute(RuleExecutor.scala:72)\n\tat org.apache.spark.sql.SQLContext$QueryExecution.analyzed$lzycompute(SQLContext.scala:916)\n\tat org.apache.spark.sql.SQLContext$QueryExecution.analyzed(SQLContext.scala:916)\n\tat org.apache.spark.sql.SQLContext$QueryExecution.assertAnalyzed(SQLContext.scala:914)\n\tat org.apache.spark.sql.DataFrame.\u003cinit\u003e(DataFrame.scala:132)\n\tat org.apache.spark.sql.DataFrame$.apply(DataFrame.scala:51)\n\tat org.apache.spark.sql.SQLContext.sql(SQLContext.scala:725)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:56)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:61)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:63)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:65)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:67)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:69)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:71)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:73)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:75)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:77)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:79)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:81)\n\tat $iwC$$iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:83)\n\tat $iwC$$iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:85)\n\tat $iwC$$iwC.\u003cinit\u003e(\u003cconsole\u003e:87)\n\tat $iwC.\u003cinit\u003e(\u003cconsole\u003e:89)\n\tat \u003cinit\u003e(\u003cconsole\u003e:91)\n\tat .\u003cinit\u003e(\u003cconsole\u003e:95)\n\tat .\u003cclinit\u003e(\u003cconsole\u003e)\n\tat .\u003cinit\u003e(\u003cconsole\u003e:7)\n\tat .\u003cclinit\u003e(\u003cconsole\u003e)\n\tat $print(\u003cconsole\u003e)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:606)\n\tat org.apache.spark.repl.SparkIMain$ReadEvalPrint.call(SparkIMain.scala:1065)\n\tat org.apache.spark.repl.SparkIMain$Request.loadAndRun(SparkIMain.scala:1340)\n\tat org.apache.spark.repl.SparkIMain.loadAndRunReq$1(SparkIMain.scala:840)\n\tat org.apache.spark.repl.SparkIMain.interpret(SparkIMain.scala:871)\n\tat org.apache.spark.repl.SparkIMain.interpret(SparkIMain.scala:819)\n\tat org.apache.zeppelin.spark.SparkInterpreter.interpretInput(SparkInterpreter.java:655)\n\tat org.apache.zeppelin.spark.SparkInterpreter.interpret(SparkInterpreter.java:620)\n\tat org.apache.zeppelin.spark.SparkInterpreter.interpret(SparkInterpreter.java:613)\n\tat org.apache.zeppelin.interpreter.ClassloaderInterpreter.interpret(ClassloaderInterpreter.java:57)\n\tat org.apache.zeppelin.interpreter.LazyOpenInterpreter.interpret(LazyOpenInterpreter.java:93)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$InterpretJob.jobRun(RemoteInterpreterServer.java:276)\n\tat org.apache.zeppelin.scheduler.Job.run(Job.java:170)\n\tat org.apache.zeppelin.scheduler.FIFOScheduler$1.run(FIFOScheduler.java:118)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:262)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:178)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:292)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n\tat java.lang.Thread.run(Thread.java:745)\n\n"
      },
      "dateCreated": "Oct 18, 2015 11:09:26 PM",
      "dateStarted": "Oct 18, 2015 11:24:41 PM",
      "dateFinished": "Oct 18, 2015 11:24:42 PM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "dateUpdated": "Oct 18, 2015 11:24:37 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1445209878832_1660663714",
      "id": "20151018-231118_1458525638",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT"
      },
      "dateCreated": "Oct 18, 2015 11:11:18 PM",
      "dateStarted": "Oct 18, 2015 11:24:42 PM",
      "dateFinished": "Oct 18, 2015 11:24:42 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Text/NLP 1:  Feature Engineering - User Profiles",
  "id": "2B2SHA7Y8",
  "angularObjects": {
    "2AR33ZMZJ": [],
    "2AS9P7JSA": [],
    "2ARR8UZDJ": []
  },
  "config": {
    "looknfeel": "default"
  },
  "info": {}
}