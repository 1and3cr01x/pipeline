{
  "paragraphs": [
    {
      "title": "Import Dependencies",
      "text": "%dep\nz.reset()\nz.addRepo(\"maven central\").url(\"search.maven.org\")\nz.load(\"com.datastax.spark:spark-cassandra-connector_2.10:1.4.0\")\nz.load(\"org.elasticsearch:elasticsearch-spark_2.10:2.1.2\")\nz.load(\"com.databricks:spark-csv_2.10:1.2.0\")\nz.load(\"org.apache.spark:spark-streaming-kafka-assembly_2.10:1.5.1\")\nz.load(\"redis.clients:jedis:2.7.3\")\nz.load(\"/root/zeppelin-0.6.0-spark-1.5.1-hadoop-2.6.0-fluxcapacitor/lib/mysql-connector-java.jar\")\nz.load(\"/root/pipeline/myapps/datasource/target/scala-2.10/datasource_2.10-1.0.jar\")",
      "dateUpdated": "Nov 24, 2015 7:55:16 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "title": true,
        "tableHide": false,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1435904425694_1044927616",
      "id": "20150703-062025_1689760268",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res0: org.apache.zeppelin.spark.dep.Dependency \u003d org.apache.zeppelin.spark.dep.Dependency@61a3205b\n"
      },
      "dateCreated": "Jul 3, 2015 6:20:25 AM",
      "dateStarted": "Nov 24, 2015 7:55:16 PM",
      "dateFinished": "Nov 24, 2015 7:55:21 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val actressesAndActorsDF \u003d sqlContext.read.format(\"json\").load(\"file:/root/pipeline/datasets/hollywood/actresses_and_actors.json\")\nactressesAndActorsDF.registerTempTable(\"actresses_and_actors_temp\")\nactressesAndActorsDF.show()",
      "dateUpdated": "Nov 24, 2015 7:56:56 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1448389076669_946770032",
      "id": "20151124-181756_1657385240",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "actressesAndActorsDF: org.apache.spark.sql.DataFrame \u003d [description: string, id: bigint, img: string, tags: string, title: string]\n+--------------------+-----+--------------------+--------------------+--------------------+\n|         description|   id|                 img|                tags|               title|\n+--------------------+-----+--------------------+--------------------+--------------------+\n|From the age of f...|90001|img/people/90001.jpg|St. Louis, Missou...|         Linda Blair|\n|Shannon Whirry is...|90002|img/people/90002.jpg|Green Lake, Wisco...|      Shannon Whirry|\n|Rosalind Allen (b...|90003|img/people/90003.jpg|Wellington, New Z...|      Rosalind Allen|\n|Brains and beauty...|90004|img/people/90004.jpg|Salisbury, North ...|     Bobbie Phillips|\n|Keshia Knight Pul...|90005|img/people/90005.jpg|Newark, New Jerse...|Keshia Knight Pul...|\n|On January 24, 19...|90006|img/people/90006.jpg|Brooklyn, New Yor...|         Tatyana Ali|\n|Born in the tiny ...|90007|img/people/90007.jpg|Orangeburg, South...|      Angell Conwell|\n|Shannah Laumeiste...|90008|img/people/90008.jpg|San Francisco, Ca...|  Shannah Laumeister|\n|Pam Grier was bor...|90009|img/people/90009.jpg|Winstom-Salem, No...|           Pam Grier|\n|Tiffani-Amber Thi...|90010|img/people/90010.jpg|Long Beach, Calif...|    Tiffani Thiessen|\n|Ashley Judd was b...|90011|img/people/90011.jpg|Granada Hills, Ca...|         Ashley Judd|\n|Stacey Dash was b...|90012|img/people/90012.jpg|Bronx, New York, ...|         Stacey Dash|\n|Sofia Margarita V...|90013|img/people/90013.jpg|Barranquilla, Atl...|       Sofia Vergara|\n|Gail O\u0027Grady was ...|90014|img/people/90014.jpg|Detroit, Michigan...|        Gail O\u0027Grady|\n|Barbara Niven was...|90015|img/people/90015.jpg|Portland, Oregon,...|       Barbara Niven|\n|Few actors in the...|10001|img/people/10001.jpg|Hollywood, Califo...|   Leonardo DiCaprio|\n|Anthony Hopkins w...|10002|img/people/10002.jpg|Port Talbot, Glam...|     Anthony Hopkins|\n|One of the greate...|10003|img/people/10003.jpg|Manhattan, New Yo...|           Al Pacino|\n|With an authorita...|10004|img/people/10004.jpg|Memphis, Tennesse...|      Morgan Freeman|\n|James Gandolfini ...|10005|img/people/10005.jpg|Westwood, New Jer...|    James Gandolfini|\n+--------------------+-----+--------------------+--------------------+--------------------+\nonly showing top 20 rows\n\n"
      },
      "dateCreated": "Nov 24, 2015 6:17:56 PM",
      "dateStarted": "Nov 24, 2015 7:56:56 PM",
      "dateFinished": "Nov 24, 2015 7:56:57 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Read the real-time Ratings coming from Users through Kafka",
      "text": "val cassandraConfig \u003d Map(\"keyspace\" -\u003e \"advancedspark\", \"table\" -\u003e \"ratings\")\nval ratingsDF \u003d sqlContext.read.format(\"org.apache.spark.sql.cassandra\").options(cassandraConfig).load().toDF(\"userid\", \"itemid\", \"rating\", \"batchtime\")",
      "dateUpdated": "Nov 24, 2015 7:55:17 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "title": true,
        "tableHide": false,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1435900511434_-2036302443",
      "id": "20150703-051511_2118186706",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "cassandraConfig: scala.collection.immutable.Map[String,String] \u003d Map(keyspace -\u003e advancedspark, table -\u003e ratings)\nratingsDF: org.apache.spark.sql.DataFrame \u003d [userid: int, itemid: int, rating: bigint, batchtime: int]\n"
      },
      "dateCreated": "Jul 3, 2015 5:15:11 AM",
      "dateStarted": "Nov 24, 2015 7:55:22 PM",
      "dateFinished": "Nov 24, 2015 7:55:35 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Current count of Real-time Ratings",
      "text": "ratingsDF.count()",
      "dateUpdated": "Nov 24, 2015 7:55:17 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "title": true,
        "tableHide": false,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1435903555217_1061802373",
      "id": "20150703-060555_1147518830",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res3: Long \u003d 6\n"
      },
      "dateCreated": "Jul 3, 2015 6:05:55 AM",
      "dateStarted": "Nov 24, 2015 7:55:34 PM",
      "dateFinished": "Nov 24, 2015 7:55:37 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Show number of distinct Real-time participating users",
      "text": "import org.apache.spark.sql.functions._\n\nratingsDF.select(countDistinct($\"userid\")).collect()(0)",
      "dateUpdated": "Nov 24, 2015 7:55:17 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "title": true,
        "tableHide": false,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1435903786952_671772613",
      "id": "20150703-060946_1260514447",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.sql.functions._\nres6: org.apache.spark.sql.Row \u003d [1]\n"
      },
      "dateCreated": "Jul 3, 2015 6:09:46 AM",
      "dateStarted": "Nov 24, 2015 7:55:36 PM",
      "dateFinished": "Nov 24, 2015 7:55:38 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "register the real-time Ratings as a temp table",
      "text": "ratingsDF.cache()\nratingsDF.registerTempTable(\"ratings_temp\")",
      "dateUpdated": "Nov 24, 2015 7:55:17 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "title": true,
        "tableHide": false,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1435904979849_80174944",
      "id": "20150703-062939_414600917",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res8: ratingsDF.type \u003d [userid: int, itemid: int, rating: bigint, batchtime: int]\n"
      },
      "dateCreated": "Jul 3, 2015 6:29:39 AM",
      "dateStarted": "Nov 24, 2015 7:55:37 PM",
      "dateFinished": "Nov 24, 2015 7:55:38 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Use SQL to Show Most desirable users by Rating Count",
      "text": "%sql SELECT title, count(itemid) as count FROM ratings_temp JOIN actresses_and_actors_temp ON (ratings_temp.itemid \u003d actresses_and_actors_temp.id) GROUP BY title ORDER BY count DESC LIMIT 5",
      "dateUpdated": "Nov 24, 2015 7:57:02 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "multiBarChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "name",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "count",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "name",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "count",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "title": true,
        "tableHide": false,
        "editorHide": false,
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1435904577933_-1977276639",
      "id": "20150703-062257_361919402",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "title\tcount\nPam Grier\t1\nBobbie Phillips\t1\nJames Franco\t1\nLinda Blair\t1\nAl Pacino\t1\n"
      },
      "dateCreated": "Jul 3, 2015 6:22:57 AM",
      "dateStarted": "Nov 24, 2015 7:57:02 PM",
      "dateFinished": "Nov 24, 2015 7:57:04 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md ### Compare The Physical Plans Between DataFrames And SQL (Should Be Equal)",
      "dateUpdated": "Nov 24, 2015 7:55:17 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/markdown"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1438120230768_-497996483",
      "id": "20150728-215030_753792481",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch3\u003eCompare The Physical Plans Between DataFrames And SQL (Should Be Equal)\u003c/h3\u003e\n"
      },
      "dateCreated": "Jul 28, 2015 9:50:30 PM",
      "dateStarted": "Nov 24, 2015 7:55:17 PM",
      "dateFinished": "Nov 24, 2015 7:55:18 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Explain Plan for SQL Query",
      "text": "val topKItemsByRatingsDF \u003d sqlContext.sql(\"SELECT count(itemid) as count FROM ratings_temp GROUP BY itemid ORDER BY count DESC\")\n\ntopKItemsByRatingsDF.explain()",
      "dateUpdated": "Nov 24, 2015 7:57:23 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "tableHide": false,
        "title": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1435904897005_-1761757602",
      "id": "20150703-062817_715212992",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "topKItemsByRatingsDF: org.apache.spark.sql.DataFrame \u003d [count: bigint]\n\u003d\u003d Physical Plan \u003d\u003d\nTungstenSort [count#110L DESC], true, 0\n ConvertToUnsafe\n  Exchange rangepartitioning(count#110L DESC)\n   ConvertToSafe\n    TungstenAggregate(key\u003d[itemid#10], functions\u003d[(count(itemid#10),mode\u003dFinal,isDistinct\u003dfalse)], output\u003d[count#110L])\n     TungstenExchange hashpartitioning(itemid#10)\n      TungstenAggregate(key\u003d[itemid#10], functions\u003d[(count(itemid#10),mode\u003dPartial,isDistinct\u003dfalse)], output\u003d[itemid#10,currentCount#136L])\n       InMemoryColumnarTableScan [itemid#10], (InMemoryRelation [userid#9,itemid#10,rating#11L,batchtime#12], true, 10000, StorageLevel(true, true, false, true, 1), (Project [userid#5 AS userid#9,itemid#6 AS itemid#10,batchtime#7L AS rating#11L,rating#8 AS batchtime#12]), None)\n"
      },
      "dateCreated": "Jul 3, 2015 6:28:17 AM",
      "dateStarted": "Nov 24, 2015 7:57:23 PM",
      "dateFinished": "Nov 24, 2015 7:57:23 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Explain Plan for DataFrame Query",
      "text": "ratingsDF.groupBy(\"itemid\").count().as(\"ct\").sort($\"count\".desc).explain()",
      "dateUpdated": "Nov 24, 2015 7:57:26 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "title": true,
        "tableHide": false,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1435904813656_1068531928",
      "id": "20150703-062653_388339500",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "\u003d\u003d Physical Plan \u003d\u003d\nTungstenSort [count#138L DESC], true, 0\n ConvertToUnsafe\n  Exchange rangepartitioning(count#138L DESC)\n   ConvertToSafe\n    TungstenAggregate(key\u003d[itemid#10], functions\u003d[(count(1),mode\u003dFinal,isDistinct\u003dfalse)], output\u003d[itemid#10,count#138L])\n     TungstenExchange hashpartitioning(itemid#10)\n      TungstenAggregate(key\u003d[itemid#10], functions\u003d[(count(1),mode\u003dPartial,isDistinct\u003dfalse)], output\u003d[itemid#10,currentCount#162L])\n       InMemoryColumnarTableScan [itemid#10], (InMemoryRelation [userid#9,itemid#10,rating#11L,batchtime#12], true, 10000, StorageLevel(true, true, false, true, 1), (Project [userid#5 AS userid#9,itemid#6 AS itemid#10,batchtime#7L AS rating#11L,rating#8 AS batchtime#12]), None)\n"
      },
      "dateCreated": "Jul 3, 2015 6:26:53 AM",
      "dateStarted": "Nov 24, 2015 7:57:26 PM",
      "dateFinished": "Nov 24, 2015 7:57:27 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "dateUpdated": "Nov 24, 2015 7:55:17 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1447754108027_-274054386",
      "id": "20151117-095508_447614045",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT"
      },
      "dateCreated": "Nov 17, 2015 9:55:08 AM",
      "dateStarted": "Nov 24, 2015 7:55:40 PM",
      "dateFinished": "Nov 24, 2015 7:55:40 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Live Ratings/02: Analyze Ratings (Summary Statistics)",
  "id": "2AUUDPT56",
  "angularObjects": {
    "2ARR8UZDJ": [],
    "2AS9P7JSA": [],
    "2AR33ZMZJ": []
  },
  "config": {
    "looknfeel": "default"
  },
  "info": {}
}