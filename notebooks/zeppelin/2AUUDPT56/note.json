{
  "paragraphs": [
    {
      "title": "Import Dependencies",
      "text": "%dep\nz.reset()\nz.addRepo(\"maven central\").url(\"search.maven.org\")\nz.load(\"com.datastax.spark:spark-cassandra-connector_2.10:1.4.0\")\nz.load(\"org.elasticsearch:elasticsearch-spark_2.10:2.1.2\")\nz.load(\"com.databricks:spark-csv_2.10:1.2.0\")\nz.load(\"org.apache.spark:spark-streaming-kafka-assembly_2.10:1.5.1\")\nz.load(\"redis.clients:jedis:2.7.3\")\nz.load(\"/root/zeppelin-0.6.0-spark-1.5.1-hadoop-2.6.0-fluxcapacitor/lib/mysql-connector-java.jar\")\nz.load(\"/root/pipeline/myapps/sql/target/scala-2.10/sql_2.10-1.0.jar\")",
      "dateUpdated": "Dec 12, 2015 9:56:43 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "title": true,
        "tableHide": false,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1435904425694_1044927616",
      "id": "20150703-062025_1689760268",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "Must be used before SparkInterpreter (%spark) initialized"
      },
      "dateCreated": "Jul 3, 2015 6:20:25 AM",
      "dateStarted": "Dec 12, 2015 9:56:43 AM",
      "dateFinished": "Dec 12, 2015 9:56:43 AM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Load the Reference Data To Enrich the Streaming Ratings",
      "text": "val itemsDF \u003d sqlContext.read.format(\"json\").load(\"file:/root/pipeline/html/advancedspark.com/data/software.json\")\n\nitemsDF.registerTempTable(\"items_temp\")",
      "dateUpdated": "Dec 14, 2015 9:01:13 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "id",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1448389076669_946770032",
      "id": "20151124-181756_1657385240",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "itemsDF: org.apache.spark.sql.DataFrame \u003d []\n"
      },
      "dateCreated": "Nov 24, 2015 6:17:56 PM",
      "dateStarted": "Dec 14, 2015 9:01:13 PM",
      "dateFinished": "Dec 14, 2015 9:01:13 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Read the real-time Ratings coming from Users through Kafka",
      "text": "val cassandraConfig \u003d Map(\"keyspace\" -\u003e \"advancedspark\", \"table\" -\u003e \"item_ratings\")\n\nval itemRatingsDF \u003d sqlContext.read.format(\"org.apache.spark.sql.cassandra\").options(cassandraConfig)\n  .load().toDF(\"userId\", \"itemId\", \"rating\", \"timestamp\")\n  \nitemRatingsDF.registerTempTable(\"item_ratings_temp\")",
      "dateUpdated": "Dec 10, 2015 4:14:23 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "title": true,
        "tableHide": false,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1435900511434_-2036302443",
      "id": "20150703-051511_2118186706",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "cassandraConfig: scala.collection.immutable.Map[String,String] \u003d Map(keyspace -\u003e advancedspark, table -\u003e item_ratings)\nitemRatingsDF: org.apache.spark.sql.DataFrame \u003d [userId: int, itemId: int, rating: int, timestamp: bigint]\n"
      },
      "dateCreated": "Jul 3, 2015 5:15:11 AM",
      "dateStarted": "Dec 10, 2015 4:14:23 AM",
      "dateFinished": "Dec 10, 2015 4:14:23 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Show the total rating count and number of Overall distinct users Who Rated (Cassandra)",
      "text": "import org.apache.spark.sql.functions._\n\nitemRatingsDF.count()\n\nitemRatingsDF.select(countDistinct($\"userId\")).collect()(0)(0)",
      "dateUpdated": "Dec 10, 2015 4:14:23 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "title": true,
        "tableHide": false,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1435903786952_671772613",
      "id": "20150703-060946_1260514447",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import org.apache.spark.sql.functions._\nres100: Long \u003d 346\nres102: Any \u003d 61\n"
      },
      "dateCreated": "Jul 3, 2015 6:09:46 AM",
      "dateStarted": "Dec 10, 2015 4:14:23 AM",
      "dateFinished": "Dec 10, 2015 4:14:24 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Show Rating Count and Number of Distinct Users Who Rated a Given Item (Redis)",
      "text": "import redis.clients.jedis.Jedis\n\nval jedis \u003d new Jedis(\"127.0.0.1\", 6379)\n\nval itemId \u003d 10001 // Leonardo DiCaprio\n\nval exactNumRatingsForItemId \u003d jedis.get(s\"\"\"exact-rating-count:${itemId}\"\"\")\n\nval exactNumDistinctUsersWhoRatedItemId \u003d jedis.scard(s\"\"\"exact-distinct-user-rating-count:${itemId}\"\"\")\n\nval approxNumDistinctUsersWhoRatedItemId \u003d jedis.pfcount(s\"\"\"approx-distinct-user-rating-count:${itemId}\"\"\")",
      "dateUpdated": "Dec 10, 2015 4:14:23 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1448963162364_-999362848",
      "id": "20151201-094602_557082428",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import redis.clients.jedis.Jedis\njedis: redis.clients.jedis.Jedis \u003d redis.clients.jedis.Jedis@7c55c777\nitemId: Int \u003d 10001\nexactNumRatingsForItemId: String \u003d null\nexactNumDistinctUsersWhoRatedItemId: Long \u003d 0\napproxNumDistinctUsersWhoRatedItemId: Long \u003d 1\n"
      },
      "dateCreated": "Dec 1, 2015 9:46:02 AM",
      "dateStarted": "Dec 10, 2015 4:14:24 AM",
      "dateFinished": "Dec 10, 2015 4:14:25 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Use SQL to Show Most desirable users by Rating Count",
      "text": "%sql SELECT title, count(itemId) as count FROM item_ratings_temp JOIN items_temp ON (item_ratings_temp.itemId \u003d items_temp.id) \n  GROUP BY title ORDER BY count DESC LIMIT 5",
      "dateUpdated": "Dec 10, 2015 4:14:23 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "multiBarChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "title",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "count",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "title",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "count",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "title": true,
        "tableHide": false,
        "editorHide": false,
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1435904577933_-1977276639",
      "id": "20150703-062257_361919402",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "title\tcount\nMorgan Freeman\t26\nJohnny Depp\t22\nTom Hanks\t20\nSofia Vergara\t20\nBobbie Phillips\t18\n"
      },
      "dateCreated": "Jul 3, 2015 6:22:57 AM",
      "dateStarted": "Dec 10, 2015 4:14:25 AM",
      "dateFinished": "Dec 10, 2015 4:14:25 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md ### Compare The Physical Plans Between DataFrames And SQL (Equal)",
      "dateUpdated": "Dec 10, 2015 4:14:23 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1438120230768_-497996483",
      "id": "20150728-215030_753792481",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch3\u003eCompare The Physical Plans Between DataFrames And SQL (Equal)\u003c/h3\u003e\n"
      },
      "dateCreated": "Jul 28, 2015 9:50:30 PM",
      "dateStarted": "Dec 10, 2015 4:14:23 AM",
      "dateFinished": "Dec 10, 2015 4:14:23 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val itemsDF \u003d sqlContext.read.format(\"json\").load(\"file:/root/pipeline/datasets/items/items.json\")\n\nval itemRatingsDF \u003d sqlContext.read.format(\"org.apache.spark.sql.cassandra\").options(cassandraConfig)\n  .load().toDF(\"userId\", \"itemId\", \"rating\", \"timestamp\")",
      "dateUpdated": "Dec 10, 2015 4:14:23 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1449536503946_10760739",
      "id": "20151208-010143_1329389328",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "itemsDF: org.apache.spark.sql.DataFrame \u003d [_corrupt_record: string, description: string, id: bigint, img: string, tags: string, title: string]\nitemRatingsDF: org.apache.spark.sql.DataFrame \u003d [userId: int, itemId: int, rating: int, timestamp: bigint]\n"
      },
      "dateCreated": "Dec 8, 2015 1:01:43 AM",
      "dateStarted": "Dec 10, 2015 4:14:25 AM",
      "dateFinished": "Dec 10, 2015 4:14:26 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val joinedDF \u003d itemRatingsDF.join(itemsDF, $\"itemId\" \u003d\u003d\u003d $\"id\").select($\"itemId\", $\"title\", $\"img\")\n  .groupBy($\"itemId\", $\"title\", $\"img\").agg(count($\"itemId\").as(\"count\")).orderBy($\"count\".desc).limit(5)\n\njoinedDF.explain()",
      "dateUpdated": "Dec 10, 2015 4:14:23 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "itemId",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "itemId",
              "index": 0.0,
              "aggr": "sum"
            }
          }
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1449536560447_-675033656",
      "id": "20151208-010240_19538133",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "joinedDF: org.apache.spark.sql.DataFrame \u003d [itemId: int, title: string, img: string, count: bigint]\n\u003d\u003d Physical Plan \u003d\u003d\nTakeOrderedAndProject(limit\u003d5, orderBy\u003d[count#214L DESC], output\u003d[itemId#211,title#205,img#203,count#214L])\n ConvertToSafe\n  TungstenAggregate(key\u003d[itemId#211,title#205,img#203], functions\u003d[(count(itemId#211),mode\u003dFinal,isDistinct\u003dfalse)], output\u003d[itemId#211,title#205,img#203,count#214L])\n   TungstenExchange hashpartitioning(itemId#211,title#205,img#203)\n    TungstenAggregate(key\u003d[itemId#211,title#205,img#203], functions\u003d[(count(itemId#211),mode\u003dPartial,isDistinct\u003dfalse)], output\u003d[itemId#211,title#205,img#203,currentCount#218L])\n     TungstenProject [itemId#211,title#205,img#203]\n      BroadcastHashJoin [cast(itemId#211 as bigint)], [id#202L], BuildRight\n       ConvertToUnsafe\n        Project [itemid#207 AS itemId#211]\n         Scan org.apache.spark.sql.cassandra.CassandraSourceRelation@29c7c620[itemid#207]\n       ConvertToUnsafe\n        Scan JSONRelation[file:/root/pipeline/datasets/items/items.json][title#205,img#203,id#202L]\n"
      },
      "dateCreated": "Dec 8, 2015 1:02:40 AM",
      "dateStarted": "Dec 10, 2015 4:14:26 AM",
      "dateFinished": "Dec 10, 2015 4:14:26 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val joinedSQLDF \u003d sqlContext.sql(\"SELECT itemId, title, img, count(itemId) as count FROM item_ratings_temp JOIN items_temp ON (item_ratings_temp.itemId \u003d items_temp.id) GROUP BY itemId, title, img ORDER BY count DESC LIMIT 5\")\n\njoinedSQLDF.explain()",
      "dateUpdated": "Dec 10, 2015 4:14:23 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "itemId",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "itemId",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "title",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1449536647456_1803472786",
      "id": "20151208-010407_1170519136",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "joinedSQLDF: org.apache.spark.sql.DataFrame \u003d [itemId: int, title: string, img: string, count: bigint]\n\u003d\u003d Physical Plan \u003d\u003d\nTakeOrderedAndProject(limit\u003d5, orderBy\u003d[count#220L DESC], output\u003d[itemId#181,title#175,img#173,count#220L])\n ConvertToSafe\n  TungstenAggregate(key\u003d[itemId#181,title#175,img#173], functions\u003d[(count(itemId#181),mode\u003dFinal,isDistinct\u003dfalse)], output\u003d[itemId#181,title#175,img#173,count#220L])\n   TungstenExchange hashpartitioning(itemId#181,title#175,img#173)\n    TungstenAggregate(key\u003d[itemId#181,title#175,img#173], functions\u003d[(count(itemId#181),mode\u003dPartial,isDistinct\u003dfalse)], output\u003d[itemId#181,title#175,img#173,currentCount#226L])\n     TungstenProject [itemId#181,title#175,img#173]\n      BroadcastHashJoin [cast(itemId#181 as bigint)], [id#172L], BuildRight\n       ConvertToUnsafe\n        Project [itemid#177 AS itemId#181]\n         Scan org.apache.spark.sql.cassandra.CassandraSourceRelation@4f995e4a[itemid#177]\n       ConvertToUnsafe\n        Scan JSONRelation[file:/root/pipeline/datasets/items/items.json][title#175,img#173,id#172L]\n"
      },
      "dateCreated": "Dec 8, 2015 1:04:07 AM",
      "dateStarted": "Dec 10, 2015 4:14:26 AM",
      "dateFinished": "Dec 10, 2015 4:14:26 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Save Top 5 Most Rated Items to ElasticSearch",
      "text": "import org.elasticsearch.spark.sql._\nimport org.apache.spark.sql.SaveMode\n\nval mostDesirableItemsByRatingCountDF \u003d sqlContext.sql(\"SELECT itemId, title, img, count(itemId) as count FROM item_ratings_temp JOIN items_temp ON (item_ratings_temp.itemId \u003d items_temp.id) GROUP BY itemId, title, img ORDER BY count DESC LIMIT 5\")\n\nval esConfig \u003d Map(\"pushdown\" -\u003e \"true\", \"es.nodes\" -\u003e \"127.0.0.1\", \"es.port\" -\u003e \"9200\")\n\nmostDesirableItemsByRatingCountDF.write.format(\"org.elasticsearch.spark.sql\").mode(SaveMode.Overwrite).options(esConfig)\n  .save(\"advancedspark/top-items-by-exact-rating-count\")\n\nz.show(mostDesirableItemsByRatingCountDF)\n",
      "dateUpdated": "Dec 10, 2015 4:14:23 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 196.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1447754108027_-274054386",
      "id": "20151117-095508_447614045",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "itemId\ttitle\timg\tcount\n10004\tMorgan Freeman\timg/items/10004.jpg\t26\n10012\tJohnny Depp\timg/items/10012.jpg\t22\n90013\tSofia Vergara\timg/items/90013.jpg\t20\n10010\tTom Hanks\timg/items/10010.jpg\t20\n90004\tBobbie Phillips\timg/items/90004.jpg\t18\n"
      },
      "dateCreated": "Nov 17, 2015 9:55:08 AM",
      "dateStarted": "Dec 10, 2015 4:14:26 AM",
      "dateFinished": "Dec 10, 2015 4:14:29 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "dateUpdated": "Dec 10, 2015 4:14:23 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1449537400520_-1271764997",
      "id": "20151208-011640_46441333",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT"
      },
      "dateCreated": "Dec 8, 2015 1:16:40 AM",
      "dateStarted": "Dec 10, 2015 4:14:27 AM",
      "dateFinished": "Dec 10, 2015 4:14:29 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Live Ratings/01: Analyze Ratings (Summary Statistics)",
  "id": "2AUUDPT56",
  "angularObjects": {
    "2ARR8UZDJ": [],
    "2AS9P7JSA": [],
    "2AR33ZMZJ": []
  },
  "config": {
    "looknfeel": "default"
  },
  "info": {}
}